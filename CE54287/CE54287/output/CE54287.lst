FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 07 8C LJMP  _ADC_CNT_ISR       (0149)     ljmp	_ADC_CNT_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 07 8F LJMP  _ADC_PWM16_ISR     (0157)     ljmp	_ADC_PWM16_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 05 40 LJMP  _PWM8_Speaker_ISR  (0161)     ljmp	_PWM8_Speaker_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
                                        (0177)     // call	void_handler
003C: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [i+161],0x0        (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [i+162],0x0        (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 04 D5 LCALL 0x04D5             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 03    MOV   A,0x3              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 CC    MOV   X,0xCC             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 3C    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 3C    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 3C    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 3B    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 3C    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 3C FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 3B    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 3B    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 3C    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 3C FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 3B    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 0C 0C LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
03D0: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_example_adc_lcd_Bank1
                                        (0019) export LoadConfigTBL_example_adc_lcd_Bank0
                                        (0020) export LoadConfigTBL_example_adc_lcd_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_example_adc_lcd_Bank0:
                                        (0023) ;  Instance name ADC, User Module ADCINCVR
                                        (0024) ;       Instance name ADC, Block Name ADC(ASC10)
                                        (0025) 	db		80h, 90h		;ADC_bfAtoDcr0       (ASC10CR0)
                                        (0026) 	db		81h, 00h		;ADC_bfAtoDcr1       (ASC10CR1)
                                        (0027) 	db		82h, 61h		;ADC_bfAtoDcr2       (ASC10CR2)
                                        (0028) 	db		83h, f0h		;ADC_bfAtoDcr3       (ASC10CR3)
                                        (0029) ;       Instance name ADC, Block Name CNT(DBB00)
                                        (0030) 	db		23h, 00h		;ADC_bCounter_CR0    (DBB00CR0)
                                        (0031) 	db		21h, 00h		;ADC_bPeriod         (DBB00DR1)
                                        (0032) 	db		22h, 00h		;ADC_bCompare        (DBB00DR2)
                                        (0033) ;       Instance name ADC, Block Name PWM16_LSB(DBB01)
                                        (0034) 	db		27h, 00h		;ADC_fPWM_LSB_CR0    (DBB01CR0)
                                        (0035) 	db		25h, 00h		;ADC_bPWM_Period_LSB (DBB01DR1)
                                        (0036) 	db		26h, 00h		;ADC_bPWM_IntTime_LSB(DBB01DR2)
                                        (0037) ;       Instance name ADC, Block Name PWM16_MSB(DCB02)
                                        (0038) 	db		2bh, 00h		;ADC_fPWM_MSB_CR0    (DCB02CR0)
                                        (0039) 	db		29h, 00h		;ADC_bPWM_Period_MSB (DCB02DR1)
                                        (0040) 	db		2ah, 00h		;ADC_bPWM_IntTime_MSB(DCB02DR2)
                                        (0041) ;  Instance name LCD, User Module LCD
                                        (0042) ;  Instance name PGA, User Module PGA
                                        (0043) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0044) 	db		71h, feh		;PGA_GAIN_CR0(ACB00CR0)
                                        (0045) 	db		72h, 21h		;PGA_GAIN_CR1(ACB00CR1)
                                        (0046) 	db		73h, 20h		;PGA_GAIN_CR2(ACB00CR2)
                                        (0047) 	db		70h, 00h		;PGA_GAIN_CR3(ACB00CR3)
                                        (0048) ;  Instance name PWM8_Speaker, User Module PWM8
                                        (0049) ;       Instance name PWM8_Speaker, Block Name PWM8(DCB03)
                                        (0050) 	db		2fh, 00h		;PWM8_Speaker_CONTROL_REG(DCB03CR0)
                                        (0051) 	db		2dh, ffh		;PWM8_Speaker_PERIOD_REG(DCB03DR1)
                                        (0052) 	db		2eh, 28h		;PWM8_Speaker_COMPARE_REG(DCB03DR2)
                                        (0053) ;  Global Register values Bank 0
                                        (0054) 	db		60h, 29h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0055) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0056) 	db		63h, 17h		; AnalogReferenceControl register (ARF_CR)
                                        (0057) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0058) 	db		e6h, 10h		; DecimatorControl_0 register (DEC_CR0)
                                        (0059) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0060) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0061) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0062) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0063) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0064) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0065) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0066) 	db		b5h, 10h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0067) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0068) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0069) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0070) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0071) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0072) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0073) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0074) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0075) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0076) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0077) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0078) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0079) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0080) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0081) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0082) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0083) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0084) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0085) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0086) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0087) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0088) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0089) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0090) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0091) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0092) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0093) 	db		ffh
                                        (0094) LoadConfigTBL_example_adc_lcd_Bank1:
                                        (0095) ;  Instance name ADC, User Module ADCINCVR
                                        (0096) ;       Instance name ADC, Block Name ADC(ASC10)
                                        (0097) ;       Instance name ADC, Block Name CNT(DBB00)
                                        (0098) 	db		20h, 21h		;ADC_fCounterFN      (DBB00FN)
                                        (0099) 	db		21h, 45h		;ADC_fCounterSL      (DBB00IN)
                                        (0100) 	db		22h, 40h		;ADC_fCounterOS      (DBB00OU)
                                        (0101) ;       Instance name ADC, Block Name PWM16_LSB(DBB01)
                                        (0102) 	db		24h, 01h		;ADC_bfPWM_LSB_FN    (DBB01FN)
                                        (0103) 	db		25h, 15h		;ADC_(DBB01IN)
                                        (0104) 	db		26h, 40h		;ADC_(DBB01OU)
                                        (0105) ;       Instance name ADC, Block Name PWM16_MSB(DCB02)
                                        (0106) 	db		28h, 21h		;ADC_bfPWM_MSB_FN    (DCB02FN)
                                        (0107) 	db		29h, 35h		;ADC_(DCB02IN)
                                        (0108) 	db		2ah, 40h		;ADC_(DCB02OU)
                                        (0109) ;  Instance name LCD, User Module LCD
                                        (0110) ;  Instance name PGA, User Module PGA
                                        (0111) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0112) ;  Instance name PWM8_Speaker, User Module PWM8
                                        (0113) ;       Instance name PWM8_Speaker, Block Name PWM8(DCB03)
                                        (0114) 	db		2ch, 31h		;PWM8_Speaker_FUNC_REG(DCB03FN)
                                        (0115) 	db		2dh, 16h		;PWM8_Speaker_INPUT_REG(DCB03IN)
                                        (0116) 	db		2eh, 45h		;PWM8_Speaker_OUTPUT_REG(DCB03OU)
                                        (0117) ;  Global Register values Bank 1
                                        (0118) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0119) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0120) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0121) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0122) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0123) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0124) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0125) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0126) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0127) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0128) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0129) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0130) 	db		e1h, bfh		; OscillatorControl_1 register (OSC_CR1)
                                        (0131) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0132) 	db		dfh, 00h		; OscillatorControl_3 register (OSC_CR3)
                                        (0133) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0134) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0135) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0136) 	db		ffh
                                        (0137) AREA psoc_config(rom, rel)
                                        (0138) LoadConfigTBL_example_adc_lcd_Ordered:
                                        (0139) ;  Ordered Global Register values
                                        (0140) 	M8C_SetBank0
03D2: 62 00 00 MOV   REG[0x0],0x0       (0141) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
03D5: 71 10    OR    F,0x10             
                                        (0142) 	M8C_SetBank1
03D7: 62 00 02 MOV   REG[0x0],0x2       (0143) 	mov	reg[00h], 02h		; Port_0_DriveMode_0 register (PRT0DM0)
03DA: 62 01 FD MOV   REG[0x1],0xFD      (0144) 	mov	reg[01h], fdh		; Port_0_DriveMode_1 register (PRT0DM1)
03DD: 70 EF    AND   F,0xEF             
                                        (0145) 	M8C_SetBank0
03DF: 62 03 FD MOV   REG[0x3],0xFD      (0146) 	mov	reg[03h], fdh		; Port_0_DriveMode_2 register (PRT0DM2)
03E2: 62 02 02 MOV   REG[0x2],0x2       (0147) 	mov	reg[02h], 02h		; Port_0_GlobalSelect register (PRT0GS)
03E5: 71 10    OR    F,0x10             
                                        (0148) 	M8C_SetBank1
03E7: 62 02 00 MOV   REG[0x2],0x0       (0149) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
03EA: 62 03 00 MOV   REG[0x3],0x0       (0150) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
03ED: 70 EF    AND   F,0xEF             
                                        (0151) 	M8C_SetBank0
03EF: 62 01 00 MOV   REG[0x1],0x0       (0152) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
03F2: 62 04 00 MOV   REG[0x4],0x0       (0153) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
03F5: 71 10    OR    F,0x10             
                                        (0154) 	M8C_SetBank1
03F7: 62 04 00 MOV   REG[0x4],0x0       (0155) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
03FA: 62 05 FF MOV   REG[0x5],0xFF      (0156) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
03FD: 70 EF    AND   F,0xEF             
                                        (0157) 	M8C_SetBank0
03FF: 62 07 FF MOV   REG[0x7],0xFF      (0158) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0402: 62 06 00 MOV   REG[0x6],0x0       (0159) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0405: 71 10    OR    F,0x10             
                                        (0160) 	M8C_SetBank1
0407: 62 06 00 MOV   REG[0x6],0x0       (0161) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
040A: 62 07 00 MOV   REG[0x7],0x0       (0162) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
040D: 70 EF    AND   F,0xEF             
                                        (0163) 	M8C_SetBank0
040F: 62 05 00 MOV   REG[0x5],0x0       (0164) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0412: 62 08 00 MOV   REG[0x8],0x0       (0165) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0415: 71 10    OR    F,0x10             
                                        (0166) 	M8C_SetBank1
0417: 62 08 7F MOV   REG[0x8],0x7F      (0167) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
041A: 62 09 80 MOV   REG[0x9],0x80      (0168) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
041D: 70 EF    AND   F,0xEF             
                                        (0169) 	M8C_SetBank0
041F: 62 0B 80 MOV   REG[0xB],0x80      (0170) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0422: 62 0A 00 MOV   REG[0xA],0x0       (0171) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0425: 71 10    OR    F,0x10             
                                        (0172) 	M8C_SetBank1
0427: 62 0A 00 MOV   REG[0xA],0x0       (0173) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
042A: 62 0B 00 MOV   REG[0xB],0x0       (0174) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
042D: 70 EF    AND   F,0xEF             
                                        (0175) 	M8C_SetBank0
042F: 62 09 00 MOV   REG[0x9],0x0       (0176) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0432: 62 0C 00 MOV   REG[0xC],0x0       (0177) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0435: 71 10    OR    F,0x10             
                                        (0178) 	M8C_SetBank1
0437: 62 0C 00 MOV   REG[0xC],0x0       (0179) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
043A: 62 0D 00 MOV   REG[0xD],0x0       (0180) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
043D: 70 EF    AND   F,0xEF             
                                        (0181) 	M8C_SetBank0
043F: 62 0F 00 MOV   REG[0xF],0x0       (0182) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0442: 62 0E 00 MOV   REG[0xE],0x0       (0183) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0445: 71 10    OR    F,0x10             
                                        (0184) 	M8C_SetBank1
0447: 62 0E 00 MOV   REG[0xE],0x0       (0185) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
044A: 62 0F 00 MOV   REG[0xF],0x0       (0186) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
044D: 70 EF    AND   F,0xEF             
                                        (0187) 	M8C_SetBank0
044F: 62 0D 00 MOV   REG[0xD],0x0       (0188) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0452: 62 10 00 MOV   REG[0x10],0x0      (0189) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0455: 71 10    OR    F,0x10             
                                        (0190) 	M8C_SetBank1
0457: 62 10 00 MOV   REG[0x10],0x0      (0191) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
045A: 62 11 00 MOV   REG[0x11],0x0      (0192) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
045D: 70 EF    AND   F,0xEF             
                                        (0193) 	M8C_SetBank0
045F: 62 13 00 MOV   REG[0x13],0x0      (0194) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0462: 62 12 00 MOV   REG[0x12],0x0      (0195) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0465: 71 10    OR    F,0x10             
                                        (0196) 	M8C_SetBank1
0467: 62 12 00 MOV   REG[0x12],0x0      (0197) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
046A: 62 13 00 MOV   REG[0x13],0x0      (0198) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
046D: 70 EF    AND   F,0xEF             
                                        (0199) 	M8C_SetBank0
046F: 62 11 00 MOV   REG[0x11],0x0      (0200) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
0472: 62 14 00 MOV   REG[0x14],0x0      (0201) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
0475: 71 10    OR    F,0x10             
                                        (0202) 	M8C_SetBank1
0477: 62 14 00 MOV   REG[0x14],0x0      (0203) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
047A: 62 15 00 MOV   REG[0x15],0x0      (0204) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
047D: 70 EF    AND   F,0xEF             
                                        (0205) 	M8C_SetBank0
047F: 62 17 00 MOV   REG[0x17],0x0      (0206) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0482: 62 16 00 MOV   REG[0x16],0x0      (0207) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
0485: 71 10    OR    F,0x10             
                                        (0208) 	M8C_SetBank1
0487: 62 16 00 MOV   REG[0x16],0x0      (0209) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
048A: 62 17 00 MOV   REG[0x17],0x0      (0210) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
048D: 70 EF    AND   F,0xEF             
                                        (0211) 	M8C_SetBank0
048F: 62 15 00 MOV   REG[0x15],0x0      (0212) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0492: 62 18 00 MOV   REG[0x18],0x0      (0213) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
0495: 71 10    OR    F,0x10             
                                        (0214) 	M8C_SetBank1
0497: 62 18 00 MOV   REG[0x18],0x0      (0215) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
049A: 62 19 00 MOV   REG[0x19],0x0      (0216) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
049D: 70 EF    AND   F,0xEF             
                                        (0217) 	M8C_SetBank0
049F: 62 1B 00 MOV   REG[0x1B],0x0      (0218) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
04A2: 62 1A 00 MOV   REG[0x1A],0x0      (0219) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
04A5: 71 10    OR    F,0x10             
                                        (0220) 	M8C_SetBank1
04A7: 62 1A 00 MOV   REG[0x1A],0x0      (0221) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
04AA: 62 1B 00 MOV   REG[0x1B],0x0      (0222) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
04AD: 70 EF    AND   F,0xEF             
                                        (0223) 	M8C_SetBank0
04AF: 62 19 00 MOV   REG[0x19],0x0      (0224) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
04B2: 62 1C 00 MOV   REG[0x1C],0x0      (0225) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
04B5: 71 10    OR    F,0x10             
                                        (0226) 	M8C_SetBank1
04B7: 62 1C 00 MOV   REG[0x1C],0x0      (0227) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
04BA: 62 1D 00 MOV   REG[0x1D],0x0      (0228) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
04BD: 70 EF    AND   F,0xEF             
                                        (0229) 	M8C_SetBank0
04BF: 62 1F 00 MOV   REG[0x1F],0x0      (0230) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
04C2: 62 1E 00 MOV   REG[0x1E],0x0      (0231) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
04C5: 71 10    OR    F,0x10             
                                        (0232) 	M8C_SetBank1
04C7: 62 1E 00 MOV   REG[0x1E],0x0      (0233) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
04CA: 62 1F 00 MOV   REG[0x1F],0x0      (0234) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
04CD: 70 EF    AND   F,0xEF             
                                        (0235) 	M8C_SetBank0
04CF: 62 1D 00 MOV   REG[0x1D],0x0      (0236) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
04D2: 70 EF    AND   F,0xEF             
                                        (0237) 	M8C_SetBank0
04D4: 7F       RET                      (0238) 	ret
                                        (0239) 
                                        (0240) 
                                        (0241) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_example_adc_lcd
                                        (0026) export _LoadConfig_example_adc_lcd
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
04D5: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
04D8: 55 01 7F MOV   [0x1],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
04DB: 55 02 80 MOV   [0x2],0x80         (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
04DE: 7C 04 E5 LCALL 0x04E5             (0069) 	lcall	LoadConfig_example_adc_lcd
04E1: 7C 03 D0 LCALL 0x03D0             (0070) 	lcall	LoadConfigTBL_example_adc_lcd_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
04E4: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration example_adc_lcd
                                        (0078) ;
                                        (0079) ;    Load configuration registers for example_adc_lcd.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_example_adc_lcd:
                                        (0096)  LoadConfig_example_adc_lcd:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
04E5: 10       PUSH  X                  (0099) 	push	x
04E6: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
04E8: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
04EA: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
04EB: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_example_adc_lcd_Bank0
04ED: 57 A3    MOV   X,0xA3             (0105)     mov     X, <LoadConfigTBL_example_adc_lcd_Bank0
04EF: 7C 05 00 LCALL 0x0500             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
04F2: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
04F4: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
04F5: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_example_adc_lcd_Bank1
04F7: 57 1A    MOV   X,0x1A             (0112)     mov     X, <LoadConfigTBL_example_adc_lcd_Bank1
04F9: 7C 05 00 LCALL 0x0500             (0113)     lcall   LoadConfig              ; Load the bank 1 values
04FC: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
04FE: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
04FF: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0500: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0502: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
0503: 08       PUSH  A                  (0143)     push    A
0504: 4F       MOV   X,SP               (0144)     mov     X, SP
0505: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
0508: D0 04    JNC   0x050D             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
050A: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
050D: 18       POP   A                  (0149)     pop     A
050E: 20       POP   X                  (0150)     pop     X
050F: 70 EF    AND   F,0xEF             
0511: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0514: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0515: 08       PUSH  A                  (0156)     push    A
0516: 28       ROMX                     (0157)     romx                            ; Load register address from table
0517: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0519: A0 1F    JZ    0x0539             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
051B: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
051C: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
051F: A0 03    JZ    0x0523             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0521: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
0523: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0525: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0526: 20       POP   X                  (0167)     pop     X
0527: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0528: 09 00    ADC   A,0x0              (0169)     adc     A, 0
052A: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
052B: 08       PUSH  A                  (0171)     push    A
052C: 28       ROMX                     (0172)     romx                            ; load config data from the table
052D: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
052E: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
0530: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0532: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
0533: 20       POP   X                  (0177)     pop     X
0534: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0535: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0537: 8F D7    JMP   0x050F             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0539: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
053B: 70 3F    AND   F,0x3F             
053D: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
053F: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\pwm8_speakerint.asm           (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_SpeakerINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_Speaker.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_Speaker_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_Speaker_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_Speaker_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0540: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_SpeakerINT.asm
FILE: lib\pwm8_speaker.asm              (0001) ;;*****************************************************************************
0541: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_Speaker.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_Speaker.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_Speaker_EnableInt
                                        (0030) export _PWM8_Speaker_EnableInt
                                        (0031) export  PWM8_Speaker_DisableInt
                                        (0032) export _PWM8_Speaker_DisableInt
                                        (0033) export  PWM8_Speaker_Start
                                        (0034) export _PWM8_Speaker_Start
                                        (0035) export  PWM8_Speaker_Stop
                                        (0036) export _PWM8_Speaker_Stop
                                        (0037) export  PWM8_Speaker_WritePeriod
                                        (0038) export _PWM8_Speaker_WritePeriod
                                        (0039) export  PWM8_Speaker_WritePulseWidth
                                        (0040) export _PWM8_Speaker_WritePulseWidth
                                        (0041) export  PWM8_Speaker_bReadPulseWidth
                                        (0042) export _PWM8_Speaker_bReadPulseWidth
                                        (0043) export  PWM8_Speaker_bReadCounter
                                        (0044) export _PWM8_Speaker_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_Speaker_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_Speaker_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_Speaker_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_Speaker_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA example_adc_lcd_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_Speaker_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_Speaker_EnableInt:
                                        (0091) _PWM8_Speaker_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_Speaker_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0544: 7F       RET                      (0095)    ret
0545: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_Speaker_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_Speaker_DisableInt:
                                        (0119) _PWM8_Speaker_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_Speaker_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0548: 7F       RET                      (0123)    ret
0549: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_Speaker_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_Speaker_Start:
                                        (0148) _PWM8_Speaker_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_Speaker_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
054C: 7F       RET                      (0152)    ret
054D: 41 2F FE AND   REG[0x2F],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_Speaker_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_Speaker_Stop:
                                        (0176) _PWM8_Speaker_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_Speaker_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0550: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_Speaker_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_Speaker_WritePeriod:
                                        (0206) _PWM8_Speaker_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0551: 60 2D    MOV   REG[0x2D],A        (0208)    mov   reg[PWM8_Speaker_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0553: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_Speaker_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_Speaker_WritePulseWidth:
                                        (0233) _PWM8_Speaker_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0554: 60 2E    MOV   REG[0x2E],A        (0235)    mov   reg[PWM8_Speaker_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
0556: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_Speaker_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_Speaker_bReadPulseWidth:
                                        (0260) _PWM8_Speaker_bReadPulseWidth:
                                        (0261)  bPWM8_Speaker_ReadPulseWidth:                   ; this name deprecated
                                        (0262) _bPWM8_Speaker_ReadPulseWidth:                   ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0557: 5D 2E    MOV   A,REG[0x2E]        (0264)    mov   A, reg[PWM8_Speaker_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0559: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_Speaker_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_Speaker_bReadCounter:
                                        (0293) _PWM8_Speaker_bReadCounter:
                                        (0294)  bPWM8_Speaker_ReadCounter:                      ; this name deprecated
                                        (0295) _bPWM8_Speaker_ReadCounter:                      ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
055A: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
055B: 5D 2E    MOV   A,REG[0x2E]        (0304)    mov   A, reg[PWM8_Speaker_COMPARE_REG]        ; Save the Compare register on the stack
055D: 08       PUSH  A                  (0305)    push  A                                       ;
055E: 41 2F FE AND   REG[0x2F],0xFE     
0561: 71 10    OR    F,0x10             
                                        (0306)    PWM8_Speaker_Stop_M                           ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0563: 5D 2D    MOV   A,REG[0x2D]        (0308)    mov   A, reg[PWM8_Speaker_INPUT_REG]          ; save the clock input setting
0565: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
0566: 62 2D 00 MOV   REG[0x2D],0x0      (0311)    mov   reg[PWM8_Speaker_INPUT_REG], INPUT_REG_NULL
0569: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
056B: 5D 2C    MOV   A,REG[0x2C]        (0314)    mov   A, reg[PWM8_Speaker_COUNTER_REG]        ; DR2 <- DR0
056D: 5D 2E    MOV   A,REG[0x2E]        (0315)    mov   A, reg[PWM8_Speaker_COMPARE_REG]        ; Stash the Count on the stack
056F: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0570: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0572: 60 2E    MOV   REG[0x2E],A        (0318)    mov   reg[PWM8_Speaker_COMPARE_REG], A
0574: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
0576: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0578: 60 2D    MOV   REG[0x2D],A        (0321)    mov   reg[PWM8_Speaker_INPUT_REG], A          ;
057A: 70 EF    AND   F,0xEF             
057C: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_Speaker_Start_M                          ;   then re-enable the PWM.
057F: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0580: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0582: 70 3F    AND   F,0x3F             
0584: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
0586: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_Speaker.asm
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0587: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0589: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
058A: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
058B: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
058D: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
058F: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0591: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
0593: 18       POP   A                  (0124)    pop  A
0594: 70 3F    AND   F,0x3F             
0596: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0598: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0599: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
059B: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
059C: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
059D: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
059F: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
05A1: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
05A4: B0 0E    JNZ   0x05B3             (0164)    jnz  .SETHIGHGAIN
05A6: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
05A9: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
05AB: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
05AD: 18       POP   A                  (0168)    pop  A
05AE: 70 3F    AND   F,0x3F             
05B0: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
05B2: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
05B3: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
05B6: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
05B8: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
05BA: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
05BD: 18       POP   A                  (0177)    pop  A
05BE: 70 3F    AND   F,0x3F             
05C0: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
05C2: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
05C3: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
05C6: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
05C7: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
05C8: 10       PUSH  X                  (0209)     push  X
05C9: 28       ROMX                     (0210)     romx                               ; Get character from ROM
05CA: B0 04    JNZ   0x05CF             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
05CC: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
05CD: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
05CE: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
05CF: 90 44    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
05D1: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
05D2: 18       POP   A                  (0220)     pop   A
05D3: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
05D4: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
05D6: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
05D7: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
05E9: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
05EA: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
05EB: 67       ASR   A                  (0262)     asr   A
05EC: 67       ASR   A                  (0263)     asr   A
05ED: 67       ASR   A                  (0264)     asr   A
05EE: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
05F0: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
05F2: 90 21    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
05F4: 18       POP   A                  (0268)     pop   A                            ; Restore value
05F5: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
05F7: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
05F9: 90 1A    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
05FB: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
05FC: 4B       SWAP  A,X                (0305)     swap  A,X
05FD: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
05FF: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
0600: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
0602: 7F       RET                      (0310)     ret
0603: 70 BF    AND   F,0xBF             
0605: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0607: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0609: A0 06    JZ    0x0610             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
060B: 90 08    CALL  _LCD_Write_Data|LCD_WriteData|LCD_Write_Data|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
060D: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
060E: 8F F8    JMP   0x0607             (0351)     jmp   .Loop_PrString               ; Go get next character
0610: 70 3F    AND   F,0x3F             
0612: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
0614: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
0615: 90 65    CALL  0x067C             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0617: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0618: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0619: 67       ASR   A                  (0390)     asr   A
061A: 67       ASR   A                  (0391)     asr   A
061B: 67       ASR   A                  (0392)     asr   A
061C: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
061E: 90 3B    CALL  0x065B             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0620: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0621: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0623: 40       NOP                      (0397)     nop
0624: 40       NOP                      (0398)     nop
0625: 40       NOP                      (0399)     nop
0626: 90 33    CALL  0x065B             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0628: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0629: 90 51    CALL  0x067C             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
062B: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
062C: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
062D: 67       ASR   A                  (0436)     asr   A
062E: 67       ASR   A                  (0437)     asr   A
062F: 67       ASR   A                  (0438)     asr   A
0630: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0632: 90 09    CALL  0x063D             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0634: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
0635: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0637: 40       NOP                      (0443)     nop
0638: 40       NOP                      (0444)     nop
0639: 40       NOP                      (0445)     nop
063A: 90 01    CALL  0x063D             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
063C: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
063D: 08       PUSH  A                  (0477)     push  A
063E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0641: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0644: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
0646: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0648: 18       POP   A                  (0483)     pop   A
0649: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
064B: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
064D: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
064F: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0651: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0653: 40       NOP                      (0489)     nop
0654: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
0656: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0658: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
065A: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
065B: 08       PUSH  A                  (0523)     push  A
065C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
065F: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0662: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
0665: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
0667: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0669: 18       POP   A                  (0530)     pop   A
066A: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
066C: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
066E: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0670: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0672: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0674: 40       NOP                      (0536)     NOP
0675: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0677: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0679: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
067B: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
067C: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
067D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0680: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0683: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
0685: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0687: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
068A: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
068C: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
068E: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0690: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0692: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
0695: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
0697: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0699: 40       NOP                      (0586)     NOP
                                        (0587) 
069A: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
069B: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
069D: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
06A0: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
06A2: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
06A4: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
06A5: 40       NOP                      (0597)     nop
06A6: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
06A8: 08       PUSH  A                  (0610)     push  A
06A9: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
06AC: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
06AE: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
06B0: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
06B1: 40       NOP                      (0616)     nop                                    ; fastest PSoC
06B2: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
06B3: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
06B6: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
06B8: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
06BA: 40       NOP                      (0623)     nop
06BB: 40       NOP                      (0624)     nop
                                        (0625) 
06BC: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
06BF: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
06C1: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
06C3: 18       POP   A                  (0630)     pop   A
06C4: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
06C6: A0 04    JZ    0x06CB             (0633)     jz    .UNLOCK
06C8: 79       DEC   X                  (0634)     dec   X
06C9: BF D3    JNZ   0x069D             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
06CB: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
06CC: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
06CF: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
06D1: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
06D3: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
06D5: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
06D7: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
06D8: 7F       RET                      (0646)     ret
06D9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
06DC: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
06DF: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
06E2: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
06E5: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
06E7: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
06E9: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
06EB: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
06ED: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
06EF: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
06F1: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06F3: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
06F5: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
06F7: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
06F9: 50 03    MOV   A,0x3              (0701)     mov   A,03h
06FB: 9F 40    CALL  0x063D             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
06FD: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
06FF: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
0701: 50 03    MOV   A,0x3              (0707)     mov   A,03h
0703: 9F 38    CALL  0x063D             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
0705: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0707: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0709: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
070B: 50 03    MOV   A,0x3              (0714)     mov   A,03h
070D: 9F 2E    CALL  0x063D             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
070F: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0711: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
0713: 50 02    MOV   A,0x2              (0720)     mov   A,02h
0715: 9F 26    CALL  0x063D             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0717: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0719: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
071B: 50 08    MOV   A,0x8              (0726)     mov   A,08h
071D: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
071F: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0721: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0723: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0725: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0727: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0729: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
072B: 50 06    MOV   A,0x6              (0736)     mov   A,06h
072D: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
072F: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0731: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0733: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0735: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0737: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0739: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
073B: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
073D: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
073F: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0741: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0743: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0745: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0747: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
074C: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
074E: 10       PUSH  X                  (0791)     push  X                            ; Store COL
074F: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0751: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0752: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0754: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0755: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0757: 70 3F    AND   F,0x3F             
0759: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
075B: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
075C: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
075E: 78       DEC   A                  (0828)     dec   A
075F: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0761: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
076A: 08       PUSH  A                  (0871)     push  A
076B: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
076D: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
076F: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0771: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0773: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0775: D0 06    JNC   0x077C             (0877)     jnc   .Delay50u_End
0777: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0779: 78       DEC   A                  (0880)     dec   A                              ; [4]
077A: BF FE    JNZ   0x0779             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
077C: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
077D: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\adcint.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   ADCINT.asm
                                        (0004) ;;  Version: 4.00, Updated on 2015/3/4 at 22:21:28
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR Interrupt Service Routines
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "ADC.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export _ADC_CNT_ISR
                                        (0021) export _ADC_PWM16_ISR
                                        (0022) export  ADC_cCounterU
                                        (0023) export _ADC_iResult
                                        (0024) export  ADC_iResult
                                        (0025) export _ADC_bfStatus
                                        (0026) export  ADC_bfStatus
                                        (0027) export  ADC_bSampC
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) AREA InterruptRAM(RAM, REL, CON)
                                        (0033) 
                                        (0034)  ADC_cCounterU:     BLK   1  ;The Upper byte of the Counter
                                        (0035) _ADC_iResult:
                                        (0036)  ADC_iResult:       BLK   2  ;A/D value
                                        (0037) _ADC_bfStatus:
                                        (0038)  ADC_bfStatus:      BLK   1  ;Data Valid Flag
                                        (0039)  ADC_bSampC:        BLK   1  ;# of times to run A/D
                                        (0040) 
                                        (0041) 
                                        (0042) ;-----------------------------------------------
                                        (0043) ;  EQUATES and TABLES
                                        (0044) ;-----------------------------------------------
                                        (0045) LowByte:   equ 1
                                        (0046) HighByte:  equ 0
                                        (0047) 
                                        (0048) 
                                        (0049) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0050) ;---------------------------------------------------
                                        (0051) ; Insert your custom declarations below this banner
                                        (0052) ;---------------------------------------------------
                                        (0053) 
                                        (0054) ;------------------------
                                        (0055) ; Includes
                                        (0056) ;------------------------
                                        (0057) 
                                        (0058) 	
                                        (0059) ;------------------------
                                        (0060) ;  Constant Definitions
                                        (0061) ;------------------------
                                        (0062) 
                                        (0063) 
                                        (0064) ;------------------------
                                        (0065) ; Variable Allocation
                                        (0066) ;------------------------
                                        (0067) 
                                        (0068) 
                                        (0069) ;---------------------------------------------------
                                        (0070) ; Insert your custom declarations above this banner
                                        (0071) ;---------------------------------------------------
                                        (0072) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0073) 
                                        (0074) AREA UserModules (ROM, REL)
                                        (0075) 
                                        (0076) .LITERAL
                                        (0077) ADCMaxNegX4Table:
                                        (0078) ; Bits  7    8    9   10   11   12   13
                                        (0079)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0080) 
                                        (0081) ADCMaxPosX4Table:
                                        (0082) IF (ADC_DATA_FORMAT)
                                        (0083) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0084)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0085) ELSE
                                        (0086) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0087)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0088) 
                                        (0089)  ENDIF
                                        (0090) .ENDLITERAL
                                        (0091) 
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;  FUNCTION NAME: _ADC_CNT_ISR (Counter8 Interrupt)
                                        (0094) ;
                                        (0095) ;
                                        (0096) ;  DESCRIPTION:
                                        (0097) ;     Increment the upper (software) half on the counter whenever the
                                        (0098) ;     lower (hardware) half of the counter underflows.  This counter
                                        (0099) ;     should start out at the most negative value (0xFF).
                                        (0100) ;
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;
                                        (0103) _ADC_CNT_ISR:
078C: 76 03    INC   [0x3]              (0104)    inc [ADC_cCounterU]
                                        (0105)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0106)    ;---------------------------------------------------
                                        (0107)    ; Insert your custom assembly code below this banner
                                        (0108)    ;---------------------------------------------------
                                        (0109)    ;   NOTE: interrupt service routines must preserve
                                        (0110)    ;   the values of the A and X CPU registers.
                                        (0111)    
                                        (0112)    ;---------------------------------------------------
                                        (0113)    ; Insert your custom assembly code above this banner
                                        (0114)    ;---------------------------------------------------
                                        (0115)    
                                        (0116)    ;---------------------------------------------------
                                        (0117)    ; Insert a lcall to a C function below this banner
                                        (0118)    ; and un-comment the lines between these banners
                                        (0119)    ;---------------------------------------------------
                                        (0120)    
                                        (0121)    ;PRESERVE_CPU_CONTEXT
                                        (0122)    ;lcall _My_C_Function
                                        (0123)    ;RESTORE_CPU_CONTEXT
                                        (0124)    
                                        (0125)    ;---------------------------------------------------
                                        (0126)    ; Insert a lcall to a C function above this banner
                                        (0127)    ; and un-comment the lines between these banners
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ;@PSoC_UserCode_END@ (Do not change this line.)
078E: 7E       RETI                     (0130)    reti
                                        (0131) 
                                        (0132) 
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;  FUNCTION NAME: _ADC_PWM16_ISR  (PWM16 Interrupt)
                                        (0135) ;
                                        (0136) ;  DESCRIPTION:
                                        (0137) ;     This ISR is called when the ADC has completed and integrate cycle.
                                        (0138) ;     The ADC value is calculated and stored in a global location before
                                        (0139) ;     the end of the ISR.
                                        (0140) ;
                                        (0141) ;-----------------------------------------------------------------------------
                                        (0142) ;
                                        (0143) _ADC_PWM16_ISR:
078F: 41 23 FE AND   REG[0x23],0xFE     (0144)    and   reg[ADC_bCounter_CR0], ~ADC_fDBLK_ENABLE          ; Disable Counter
                                        (0145) IF ADC_NoAZ
0792: 43 82 20 OR    REG[0x82],0x20     (0146)    or    reg[ADC_bfAtoDcr2], ADC_fAutoZero                 ; Put Integrator in AutoZero
                                        (0147) ENDIF
0795: 43 83 10 OR    REG[0x83],0x10     (0148)    or   reg[ADC_bfAtoDcr3],ADC_fFSW0                       ; Put Integrator in reset
0798: 71 01    OR    F,0x1              
                                        (0149) 
                                        (0150)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0151)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0152)    M8C_EnableGInt
079A: 40       NOP                      (0153)    nop                                                     ; Wait a couple cycles
079B: 70 FE    AND   F,0xFE             
                                        (0154)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
079D: 08       PUSH  A                  (0155)    push  A                                                 ; Save the Accumulator
079E: 5D 20    MOV   A,REG[0x20]        (0156)    mov   A,reg[ADC_bCount]                                 ; Read counter value  (Bogus read puts value in Period register)
07A0: 5D 22    MOV   A,REG[0x22]        (0157)    mov   A,reg[ADC_bCompare]                               ; Read counter value
07A2: 78       DEC   A                  (0158)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
07A3: 73       CPL   A                  (0159)    cpl   A                                                 ; Invert the value
07A4: D0 03    JNC   0x07A8             (0160)    jnc   ADC_INT_CALCV                                     ; if carry, then inc MSB as well
07A6: 76 03    INC   [0x3]              (0161)    inc   [ADC_cCounterU]
                                        (0162) ADC_INT_CALCV:
07A8: 53 05    MOV   [0x5],A            (0163)    mov   [(ADC_iResult + LowByte)], A                      ; Store LSB value
07AA: 51 03    MOV   A,[0x3]            (0164)    mov   A, [ADC_cCounterU]                                ; Store MSB from temp counter
07AC: 53 04    MOV   [0x4],A            (0165)    mov   [(ADC_iResult + HighByte)], A
                                        (0166)                                                            ; The new value has been stored,
                                        (0167)                                                            ; so get counters ready for next reading first.
07AE: 62 21 FF MOV   REG[0x21],0xFF     (0168)    mov   reg[ADC_bPeriod], ffh                             ; Initialize counter to FF - Set to overflow after 256 counts
07B1: 43 23 01 OR    REG[0x23],0x1      (0169)    or    reg[ADC_bCounter_CR0],ADC_fDBLK_ENABLE            ; Enable Counter
                                        (0170) 
                                        (0171) IF (ADC_DATA_FORMAT)                                       ; Only check for Negative numbers if SIGNED result
                                        (0172)    mov   A, [ADC_bfStatus]                                 ; Get Status with Resolution
                                        (0173)    and   A, ADC_bRES_MASK                                  ; Mask of resolution
                                        (0174)    index ADCMaxNegX4Table                                  ; Get Maximum negative value from table
                                        (0175)    mov   [ADC_cCounterU], A                                ; Place result back into MSB of counter
                                        (0176) ELSE
07B4: 55 03 00 MOV   [0x3],0x0          (0177)    mov   [ADC_cCounterU], 00h                              ; Place result back into MSB of counter
                                        (0178) ENDIF
                                        (0179) 
                                        (0180)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0181)    ;---------------------------------------------------
                                        (0182)    ; If the input is muxed with multiple inputs
                                        (0183)    ; this is a good place to change inputs.
                                        (0184)    ; Insert your custom code below this banner
                                        (0185)    ;---------------------------------------------------
                                        (0186)    ;   NOTE: interrupt service routines must preserve
                                        (0187)    ;   the values of the A and X CPU registers. At this
                                        (0188)    ;   point A is already preserved and will be restored;
                                        (0189)    ;   however, if you use X, you must take care of it
                                        (0190)    ;   here!
                                        (0191) 
                                        (0192)    ;---------------------------------------------------
                                        (0193)    ; Insert your custom code above this banner
                                        (0194)    ;---------------------------------------------------
                                        (0195)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0196) 
07B7: 41 83 EF AND   REG[0x83],0xEF     (0197)    and   reg[ADC_bfAtoDcr3],~ADC_fFSW0                     ; Take Integrator out of reset
                                        (0198) IF ADC_NoAZ
07BA: 41 82 DF AND   REG[0x82],0xDF     (0199)    and   reg[ADC_bfAtoDcr2],~ADC_fAutoZero                 ; Take Integrator out of AutoZero
                                        (0200) ENDIF
                                        (0201) 
                                        (0202)    ;****************************************************************************
                                        (0203)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0204)    ;                          ; if stack space isn't at a premium.
                                        (0205)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0206)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0207)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0208)    ;        successful acquisition of the next byte.
                                        (0209)    ;****************************************************************************
                                        (0210) IF (ADC_DATA_FORMAT)                             ; Only check for Negative numbers if SIGNED result
                                        (0211) 
                                        (0212)                                                  ; Negative Overflow Check
                                        (0213)    tst   [(ADC_iResult + HighByte)],80h
                                        (0214)    jnz   ADC_NOT_POVFL2
                                        (0215) 
                                        (0216) ENDIF
                                        (0217)                                                  ; Postive Overflow Check
                                        (0218)                                                  ; Get MSB of Max Positive value x4 + 1
07BD: 51 06    MOV   A,[0x6]            (0219)    mov   A,[ADC_bfStatus]                        ; Get Status with Resolution
07BF: 21 0F    AND   A,0xF              (0220)    and   A,ADC_bRES_MASK                         ; Mask of resolution normalized to 0
07C1: FF C2    INDEX 0x0785             (0221)    index ADCMaxPosX4Table                        ; Get Maximum positive value x4 + 1 from table
07C3: 08       PUSH  A                  (0222)    push  A
07C4: 22 04    AND   A,[0x4]            (0223)    and   A, [(ADC_iResult + HighByte)]
07C6: A0 0B    JZ    0x07D2             (0224)    jz    ADC_NOT_POVFL
                                        (0225)                                                  ; Positive overflow, fix it - set to Max Positive + 1
07C8: 18       POP   A                  (0226)    pop   A
07C9: 11 01    SUB   A,0x1              (0227)    sub   A, 01h
                                        (0228) 
                                        (0229)                                                  ; Force most positive * 4 into result
07CB: 53 04    MOV   [0x4],A            (0230)    mov   [(ADC_iResult + HighByte)], A
07CD: 55 05 FF MOV   [0x5],0xFF         (0231)    mov   [(ADC_iResult + LowByte)], ffh
07D0: 80 02    JMP   0x07D3             (0232)    jmp   ADC_NOT_POVFL2
                                        (0233) ADC_NOT_POVFL:
07D2: 18       POP   A                  (0234)    pop   A
                                        (0235) 
                                        (0236) ADC_NOT_POVFL2:
07D3: 68 04    ASR   [0x4]              (0237)    asr   [(ADC_iResult + HighByte)]              ; Shift MSB and LSB right twice to divide by four
07D5: 6E 05    RRC   [0x5]              (0238)    rrc   [(ADC_iResult + LowByte)]               ; Remember digital clock 4 times analog clock
07D7: 68 04    ASR   [0x4]              (0239)    asr   [(ADC_iResult + HighByte)]
07D9: 6E 05    RRC   [0x5]              (0240)    rrc   [(ADC_iResult + LowByte)]
                                        (0241) 
                                        (0242)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0243)    ;---------------------------------------------------
                                        (0244)    ; Data is ready at this point.
                                        (0245)    ; If processing Data at Interrupt level - add
                                        (0246)    ; User Code to handle the data below this banner
                                        (0247)    ;---------------------------------------------------
                                        (0248)    ;   NOTE: interrupt service routines must preserve
                                        (0249)    ;   the values of the A and X CPU registers. At this
                                        (0250)    ;   point A is already preserved and will be restored;
                                        (0251)    ;   however, if you use X, you must take care of it
                                        (0252)    ;   here!
                                        (0253) 
                                        (0254)    ;---------------------------------------------------
                                        (0255)    ; Insert your custom code above this banner
                                        (0256)    ;---------------------------------------------------
                                        (0257)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0258) 
07DB: 18       POP   A                  (0259)    pop   A                                       ; Restore A, not used any more
                                        (0260) 
07DC: 2E 06 10 OR    [0x6],0x10         (0261)    or    [ADC_bfStatus],ADC_fDATA_READY          ; Set Data ready bit
                                        (0262) 
07DF: 47 07 FF TST   [0x7],0xFF         (0263)    tst   [ADC_bSampC], ffh                       ; If sample_counter == 0 -->> continuous data collection
07E2: A0 17    JZ    0x07FA             (0264)    jz    ADC_END_PWM16_ISR
                                        (0265) 
07E4: 7A 07    DEC   [0x7]              (0266)    dec   [ADC_bSampC]                            ; Dec sample counter and check for zero
07E6: B0 13    JNZ   0x07FA             (0267)    jnz   ADC_END_PWM16_ISR
                                        (0268) 
                                        (0269)    ;**********************************************
                                        (0270)    ; Turn off ADC
                                        (0271)    ;**********************************************
07E8: 41 27 FE AND   REG[0x27],0xFE     (0272)    and   reg[ADC_fPWM_LSB_CR0], ~ADC_fDBLK_ENABLE              ; Disable the PWM
07EB: 41 23 FE AND   REG[0x23],0xFE     (0273)    and   reg[ADC_bCounter_CR0], ~ADC_fDBLK_ENABLE              ; Disable the Counter
                                        (0274) IF ADC_NoAZ
07EE: 43 82 20 OR    REG[0x82],0x20     (0275)    or    reg[ADC_bfAtoDcr2], ADC_fAutoZero                     ; Put the Integrator into Autozero mode
                                        (0276) ENDIF
07F1: 43 83 10 OR    REG[0x83],0x10     (0277)    or    reg[ADC_bfAtoDcr3], ADC_fFSW0                         ; Put Integrator into reset
07F4: 41 E1 FB AND   REG[0xE1],0xFB     (0278)    and   reg[ADC_bfPWM16_INT_REG], ~ADC_bfPWM16_Mask           ; Disable interrupts
07F7: 41 E1 FE AND   REG[0xE1],0xFE     (0279)    and   reg[ADC_bfCounter_INT_REG], ~ADC_bfCounter_Mask
                                        (0280) 
                                        (0281) ADC_END_PWM16_ISR:
07FA: 7E       RETI                     (0282)    reti
                                        (0283) 
                                        (0284) ; End of File ADCINT.asm
FILE: lib\adc.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
07FB: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  ADC.asm
                                        (0004) ;;  Version: 4.00, Updated on 2015/3/4 at 22:21:28
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "ADC.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ADC_Start
                                        (0030) export _ADC_Start
                                        (0031) export  ADC_SetPower
                                        (0032) export _ADC_SetPower
                                        (0033) export  ADC_Stop
                                        (0034) export _ADC_Stop
                                        (0035) export  ADC_GetSamples
                                        (0036) export _ADC_GetSamples
                                        (0037) export  ADC_StopAD
                                        (0038) export _ADC_StopAD
                                        (0039) export  ADC_fIsData
                                        (0040) export _ADC_fIsData
                                        (0041) export  ADC_fIsDataAvailable
                                        (0042) export _ADC_fIsDataAvailable
                                        (0043) export  ADC_iGetData
                                        (0044) export _ADC_iGetData
                                        (0045) export  ADC_ClearFlag
                                        (0046) export _ADC_ClearFlag
                                        (0047) export  ADC_iGetDataClearFlag
                                        (0048) export _ADC_iGetDataClearFlag
                                        (0049) export  ADC_SetResolution
                                        (0050) export _ADC_SetResolution
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) LowByte:       equ 1
                                        (0056) HighByte:      equ 0
                                        (0057) 
                                        (0058) ; Calctime parameters
                                        (0059) wCalcTime:     equ   ADC_bCALCTIME
                                        (0060) 
                                        (0061) AREA UserModules (ROM, REL)
                                        (0062) 
                                        (0063) .SECTION
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;  FUNCTION NAME: ADC_Start
                                        (0066) ;  FUNCTION NAME: ADC_SetPower
                                        (0067) ;
                                        (0068) ;  DESCRIPTION:
                                        (0069) ;  Applies power setting to the module's analog PSoc block.
                                        (0070) ;
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;
                                        (0073) ;  ARGUMENTS:
                                        (0074) ;   A  Contains power level setting 0 to 3
                                        (0075) ;
                                        (0076) ;  RETURNS:  NA
                                        (0077) ;
                                        (0078) ;  SIDE EFFECTS:
                                        (0079) ;    The A and X registers may be modified by this or future implementations
                                        (0080) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0082) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0083) ;    functions.
                                        (0084) ;          
                                        (0085) ;    Currently only the page pointer registers listed below are modified:
                                        (0086) ;          CUR_PP
                                        (0087) ;
                                        (0088)  ADC_Start:
                                        (0089) _ADC_Start:
                                        (0090)  ADC_SetPower:
                                        (0091) _ADC_SetPower:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0094)    RAM_SETPAGE_CUR >ADC_bfStatus
                                        (0095)    
07FE: 4F       MOV   X,SP               (0096)    mov   X, SP                                       ; Get location of next location on stack
07FF: 21 03    AND   A,0x3              (0097)    and   A,ADC_bfPOWERMASK                           ; Mask only the valid power setting bits
0801: 08       PUSH  A                  (0098)    push  A                                           ; Save power value on temp location
0802: 5D 83    MOV   A,REG[0x83]        (0099)    mov   A, reg[ADC_bfAtoDcr3]                       ; Get current value of AtoDcr3
0804: 21 FC    AND   A,0xFC             (0100)    and   A, ~ADC_bfPOWERMASK                         ; Mask off old power value
0806: 2B 00    OR    A,[X+0]            (0101)    or    A, [X]                                      ; OR in new power value
0808: 29 F0    OR    A,0xF0             (0102)    or    A, f0h                                      ; Make sure other register is set correctly
080A: 60 83    MOV   REG[0x83],A        (0103)    mov   reg[ADC_bfAtoDcr3], A                       ; Reload CR with new power value
                                        (0104) 
080C: 49 82 01 TST   REG[0x82],0x1      (0105)    tst   reg[ADC_bfAtoDcr2], ADC_fRES_SET
080F: A0 05    JZ    0x0815             (0106)    jz    .DoNotLoadRes
0811: 50 05    MOV   A,0x5              (0107)    mov   A,ADC_bNUMBITS - ADC_bMINRES                           ; get and set the resolution
0813: 53 06    MOV   [0x6],A            (0108)    mov   [ADC_bfStatus], A              ; place it in the status variable
                                        (0109) .DoNotLoadRes:
0815: 18       POP   A                  (0110)    pop   A                                           ; Restore the stack and power value
0816: 70 3F    AND   F,0x3F             
0818: 71 C0    OR    F,0xC0             
                                        (0111)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_4
081A: 7F       RET                      (0113)    ret
                                        (0114) .ENDSECTION
                                        (0115) 
                                        (0116) .SECTION
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;  FUNCTION NAME: ADC_Stop
                                        (0119) ;
                                        (0120) ;  DESCRIPTION:
                                        (0121) ;  Removes power from the module's analog PSoc block, but the digital
                                        (0122) ;  blocks keep on running.
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: None
                                        (0127) ;
                                        (0128) ;  RETURNS:   NA
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  ADC_Stop:
                                        (0138) _ADC_Stop:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
081B: 41 83 FC AND   REG[0x83],0xFC     (0140)    and   reg[ADC_bfAtoDcr3], ~ADC_bfPOWERMASK
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
081E: 7F       RET                      (0142)    ret
081F: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0143) .ENDSECTION
                                        (0144) 
                                        (0145) .SECTION
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;  FUNCTION NAME: ADC_Get_Samples
                                        (0148) ;
                                        (0149) ;  DESCRIPTION:
                                        (0150) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0151) ;  is set whenever a new data value is available.
                                        (0152) ;
                                        (0153) ;-----------------------------------------------------------------------------
                                        (0154) ;
                                        (0155) ;  ARGUMENTS:
                                        (0156) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0157) ;     continuously.
                                        (0158) ;
                                        (0159) ;  RETURNS:  NA
                                        (0160) ;
                                        (0161) ;  SIDE EFFECTS:
                                        (0162) ;    The A and X registers may be modified by this or future implementations
                                        (0163) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0164) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0165) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0166) ;    functions.
                                        (0167) ;          
                                        (0168) ;    Currently only the page pointer registers listed below are modified:
                                        (0169) ;          CUR_PP
                                        (0170) ;
                                        (0171)  ADC_GetSamples:
                                        (0172) _ADC_GetSamples:
                                        (0173)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0174)    RAM_SETPAGE_CUR >ADC_bfStatus
0822: 53 07    MOV   [0x7],A            (0175)    mov   [ADC_bSampC], A                                   ; Store sample count
                                        (0176)                                                            ; Interrupts, Put A/D in reset
0824: 51 06    MOV   A,[0x6]            (0177)    mov   A,[ADC_bfStatus]                                  ; get and set the resolution
0826: 21 0F    AND   A,0xF              (0178)    and   A,ADC_bRES_MASK
0828: 01 07    ADD   A,0x7              (0179)    add   A,ADC_bMINRES
082A: 90 5B    CALL  _ADC_SetResolution (0180)    call  ADC_SetResolution
                                        (0181) 
                                        (0182) ADC_LoadMSBCounter:                                        ; The PWM has been setup by SetResolution, now set the upper
                                        (0183)                                                            ; counter which will be the same as the period.
                                        (0184)                                                            ; Reset MSB of counter to most negative value
                                        (0185) 
082C: 5D 2A    MOV   A,REG[0x2A]        (0186)    mov   A,reg[ADC_bPWM_IntTime_MSB]                       ; Get MSB of PWM and move it into RAM
082E: 53 03    MOV   [0x3],A            (0187)    mov   [ADC_cCounterU], A                                ; Use counter as temp location
0830: 50 00    MOV   A,0x0              (0188)    mov   A, 00h                                            ; Load A with zero for the calculation
0832: 12 03    SUB   A,[0x3]            (0189)    sub   A, [ADC_cCounterU]                                ; 0 - MSB_PWM = MSB_of_most_neg_value
0834: 67       ASR   A                  (0190)    asr   A                                                 ; Half the range (+ and -)
                                        (0191) IF (ADC_DATA_FORMAT)
                                        (0192)    mov   [ADC_cCounterU], A                                ; Place result back into MSB of counter
                                        (0193) ELSE
0835: 55 03 00 MOV   [0x3],0x0          (0194)    mov   [ADC_cCounterU], 00h                              ; Always start at zero for unsigned values
                                        (0195) ENDIF
0838: 5D 26    MOV   A,REG[0x26]        (0196)    mov   A, reg[ADC_bPWM_IntTime_LSB]                      ; Dummy Read  - required do not remove
083A: 62 21 FF MOV   REG[0x21],0xFF     (0197)    mov   reg[ADC_bPeriod], FFh                             ; Make sure counter starts at FF
                                        (0198) 
083D: 41 83 EF AND   REG[0x83],0xEF     (0199)    and   reg[ADC_bfAtoDcr3],~ADC_fFSW0                     ; Take Integrator out of reset
                                        (0200) IF ADC_NoAZ
0840: 41 82 DF AND   REG[0x82],0xDF     (0201)     and  reg[ADC_bfAtoDcr2],~ADC_fAutoZero                 ; Take Integrator out of AutoZero
                                        (0202) ENDIF
                                        (0203) 
                                        (0204)                                                                ; Enable the A/D and Start it!
0843: 43 23 05 OR    REG[0x23],0x5      (0205)    or    reg[ADC_bCounter_CR0], (ADC_fDBLK_ENABLE|ADC_fPULSE_WIDE)   ; Enable the Counter
0846: 43 27 01 OR    REG[0x27],0x1      (0206)    or    reg[ADC_fPWM_LSB_CR0], ADC_fDBLK_ENABLE               ; Enable PWM
0849: 43 E1 04 OR    REG[0xE1],0x4      (0207)    or    reg[ADC_bfPWM16_INT_REG], ADC_bfPWM16_Mask            ; Enable Counter interrupts
084C: 43 E1 01 OR    REG[0xE1],0x1      (0208)    or    reg[ADC_bfCounter_INT_REG], ADC_bfCounter_Mask
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_4
084F: 7F       RET                      (0210)    ret
                                        (0211) .ENDSECTION
                                        (0212) 
                                        (0213) .SECTION
                                        (0214) ;-----------------------------------------------------------------------------
                                        (0215) ;  FUNCTION NAME: ADC_StopAD
                                        (0216) ;
                                        (0217) ;  DESCRIPTION:
                                        (0218) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0219) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0220) ;
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:  None
                                        (0224) ;
                                        (0225) ;  RETURNS: NA
                                        (0226) ;
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  ADC_StopAD:
                                        (0235) _ADC_StopAD:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0850: 41 27 FE AND   REG[0x27],0xFE     (0237)    and   reg[ADC_fPWM_LSB_CR0], ~ADC_fDBLK_ENABLE              ; Disable the PWM
                                        (0238) 
0853: 41 23 FE AND   REG[0x23],0xFE     (0239)    and   reg[ADC_bCounter_CR0], ~ADC_fDBLK_ENABLE              ; Disable the Counter
                                        (0240) 
                                        (0241) IF ADC_NoAZ
0856: 43 82 20 OR    REG[0x82],0x20     (0242)    or   reg[ADC_bfAtoDcr2], ADC_fAutoZero                      ; Put the Integrator into Autozero mode
                                        (0243) ENDIF
                                        (0244) 
0859: 43 83 10 OR    REG[0x83],0x10     (0245)    or   reg[ADC_bfAtoDcr3], ADC_fFSW0                          ; Put Integrator into reset
085C: 08       PUSH  A                  (0246)    push A
085D: 41 E1 FB AND   REG[0xE1],0xFB     
0860: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0247)    M8C_DisableIntMask ADC_bfPWM16_INT_REG, ADC_bfPWM16_Mask    ; Disable interrupts
                                        (0248)    M8C_DisableIntMask ADC_bfCounter_INT_REG, ADC_bfCounter_Mask
0863: 18       POP   A                  (0249)    pop  A
                                        (0250)    RAM_EPILOGUE RAM_USE_CLASS_1
0864: 7F       RET                      (0251)    ret
0865: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0252) .ENDSECTION
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: ADC_fIsData
                                        (0257) ;  FUNCTION NAME: ADC_fIsDataAvailable
                                        (0258) ;
                                        (0259) ;  DESCRIPTION:
                                        (0260) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0261) ;  value is available.
                                        (0262) ;
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;
                                        (0265) ;  ARGUMENTS: None
                                        (0266) ;
                                        (0267) ;  RETURNS:
                                        (0268) ;  A  Returns data status  A == 0 no data available
                                        (0269) ;                          A != 0 data available
                                        (0270) ;
                                        (0271) ;  SIDE EFFECTS:
                                        (0272) ;    The A and X registers may be modified by this or future implementations
                                        (0273) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0274) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0275) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0276) ;    functions.
                                        (0277) ;          
                                        (0278) ;    Currently only the page pointer registers listed below are modified: 
                                        (0279) ;          CUR_PP
                                        (0280) ;
                                        (0281)  ADC_fIsData:
                                        (0282) _ADC_fIsData:
                                        (0283)  ADC_fIsDataAvailable:
                                        (0284) _ADC_fIsDataAvailable:
                                        (0285)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0286)    RAM_SETPAGE_CUR >ADC_bfStatus
0868: 51 06    MOV   A,[0x6]            (0287)    mov   A, [ADC_bfStatus]                            ; Get status byte
086A: 21 10    AND   A,0x10             (0288)    and   A, ADC_fDATA_READY                           ; Mask off other bits
                                        (0289)    RAM_EPILOGUE RAM_USE_CLASS_4
086C: 7F       RET                      (0290)    ret
086D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0291) .ENDSECTION
                                        (0292) 
                                        (0293) .SECTION
                                        (0294) ;-----------------------------------------------------------------------------
                                        (0295) ;  FUNCTION NAME: ADC_iGetDataClearFlag
                                        (0296) ;  FUNCTION NAME: ADC_iGetData
                                        (0297) ;
                                        (0298) ;  DESCRIPTION:
                                        (0299) ;  Returns the data from the A/D.  Does not check if data is available.
                                        (0300) ;  iGetDataClearFlag clears the result ready flag as well.
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: None
                                        (0305) ;
                                        (0306) ;  RETURNS:
                                        (0307) ;  A:X  return the ADC result.
                                        (0308) ;
                                        (0309) ;  SIDE EFFECTS:
                                        (0310) ;    The A and X registers may be modified by this or future implementations
                                        (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0314) ;    functions.
                                        (0315) ;          
                                        (0316) ;    Currently only the page pointer registers listed below are modified: 
                                        (0317) ;          CUR_PP
                                        (0318) ;
                                        (0319)  ADC_iGetDataClearFlag:
                                        (0320) _ADC_iGetDataClearFlag:   
                                        (0321)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0322)    RAM_SETPAGE_CUR >ADC_bfStatus
0870: 26 06 EF AND   [0x6],0xEF         (0323)    and   [ADC_bfStatus], ~ADC_fDATA_READY  ; Clear Data ready bit
0873: 58 04    MOV   X,[0x4]            (0324)    mov   X, [(ADC_iResult + HighByte)]
0875: 51 05    MOV   A,[0x5]            (0325)    mov   A, [(ADC_iResult + LowByte)]
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_4
0877: 7F       RET                      (0327)    ret
0878: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0328) 
                                        (0329) 
                                        (0330)  ADC_iGetData:
                                        (0331) _ADC_iGetData:
                                        (0332)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0333)    RAM_SETPAGE_CUR >ADC_iResult
087B: 58 04    MOV   X,[0x4]            (0334)    mov   X, [(ADC_iResult + HighByte)]
087D: 51 05    MOV   A,[0x5]            (0335)    mov   A, [(ADC_iResult + LowByte)]
                                        (0336)    RAM_EPILOGUE RAM_USE_CLASS_4
087F: 7F       RET                      (0337)    ret
0880: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0338) .ENDSECTION
                                        (0339) 
                                        (0340) .SECTION
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) ;  FUNCTION NAME: ADC_ClearFlag
                                        (0343) ;
                                        (0344) ;  DESCRIPTION:
                                        (0345) ;  Clears the data ready flag.
                                        (0346) ;
                                        (0347) ;-----------------------------------------------------------------------------
                                        (0348) ;
                                        (0349) ;  ARGUMENTS: None
                                        (0350) ;
                                        (0351) ;  RETURNS: NA
                                        (0352) ;
                                        (0353) ;  SIDE EFFECTS:
                                        (0354) ;    The A and X registers may be modified by this or future implementations
                                        (0355) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0356) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0357) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0358) ;    functions.
                                        (0359) ;          
                                        (0360) ;    Currently only the page pointer registers listed below are modified: 
                                        (0361) ;          CUR_PP
                                        (0362) ;
                                        (0363)  ADC_ClearFlag:
                                        (0364) _ADC_ClearFlag:
                                        (0365)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0366)    RAM_SETPAGE_CUR >ADC_bfStatus
0883: 26 06 EF AND   [0x6],0xEF         (0367)    and   [ADC_bfStatus], ~ADC_fDATA_READY  ; Clear Data ready bit
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
0886: 7F       RET                      (0369)    ret
0887: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: ADC_SetResolution
                                        (0375) ;
                                        (0376) ;  DESCRIPTION:
                                        (0377) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0378) ;
                                        (0379) ;-----------------------------------------------------------------------------
                                        (0380) ;
                                        (0381) ;  ARGUMENTS:
                                        (0382) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0383) ;
                                        (0384) ;  RETURNS:  NA
                                        (0385) ;
                                        (0386) ;  SIDE EFFECTS:
                                        (0387) ;    The A and X registers may be modified by this or future implementations
                                        (0388) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0389) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0390) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0391) ;    functions.
                                        (0392) ;          
                                        (0393) ;    Currently only the page pointer registers listed below are modified: 
                                        (0394) ;          CUR_PP
                                        (0395) ;
                                        (0396) ;     This function halts the PWM and the counter to sync the A/D , but
                                        (0397) ;     does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0398) ;     should be called.
                                        (0399) ;
                                        (0400)  ADC_SetResolution:
                                        (0401) _ADC_SetResolution:
                                        (0402)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0403)    RAM_SETPAGE_CUR >ADC_bfStatus
                                        (0404)    
088A: 41 82 FE AND   REG[0x82],0xFE     (0405)    and   reg[ADC_bfAtoDcr2], ~ADC_fRES_SET
                                        (0406) 
088D: 9F C1    CALL  _ADC_StopAD        (0407)    call  ADC_StopAD                                ; Stop the A/D if it is running
088F: 55 06 00 MOV   [0x6],0x0          (0408)    mov   [ADC_bfStatus], 00h                       ; and clear status and old resolution
                                        (0409) 
                                        (0410)                                                    ; Check for resolution to be within min and max values
0892: 39 07    CMP   A,0x7              (0411)    cmp   A,ADC_bMINRES                             ; Check low end of resolution
0894: D0 05    JNC   0x089A             (0412)    jnc   ADC_CHECKHI
0896: 50 07    MOV   A,0x7              (0413)    mov   A,ADC_bMINRES                             ; Too low - load legal low value
0898: 80 07    JMP   0x08A0             (0414)    jmp   ADC_RES_OK
                                        (0415) 
                                        (0416) ADC_CHECKHI:                                       ; Check high end of resolution
089A: 39 0D    CMP   A,0xD              (0417)    cmp   A,ADC_bMAXRES
089C: C0 03    JC    0x08A0             (0418)    jc    ADC_RES_OK
089E: 50 0D    MOV   A,0xD              (0419)    mov   A,ADC_bMAXRES                             ; Too high - load legal Max value
                                        (0420) 
                                        (0421) ADC_RES_OK:
                                        (0422)                                                    ; Calculate compare value for the PWM which
                                        (0423)                                                    ; computes the integrate time
08A0: 11 07    SUB   A,0x7              (0424)    sub   A, ADC_bMINRES                            ; Normalize with min resolution
08A2: 2C 06    OR    [0x6],A            (0425)    or    [ADC_bfStatus], A
                                        (0426)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0427)                                                    ; is running 4x so 128*4=512 or 0x0200
08A4: 01 01    ADD   A,0x1              (0428)    add   A,01h                                     ; The MSB is 02h.
08A6: 5C       MOV   X,A                (0429)    mov   X,A
08A7: 50 01    MOV   A,0x1              (0430)    mov   A,01h
                                        (0431) 
                                        (0432) ADC_CALC_INTTIME:                                  ; Now shift the MSB left for every bit of resolution of min (7).
08A9: 64       ASL   A                  (0433)    asl   A
08AA: 79       DEC   X                  (0434)    dec   X
08AB: BF FD    JNZ   0x08A9             (0435)    jnz   ADC_CALC_INTTIME
                                        (0436) 
                                        (0437) ADC_LOAD_INTTIME:                                  ; Load compare value and Calc time into registers
                                        (0438)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
08AD: 62 26 00 MOV   REG[0x26],0x0      (0439)    mov   reg[ADC_bPWM_IntTime_LSB], 00h
08B0: 60 2A    MOV   REG[0x2A],A        (0440)    mov   reg[ADC_bPWM_IntTime_MSB], A
                                        (0441) 
                                        (0442)                                                    ; Load the CalcTime into the PWM Period
08B2: 62 25 0A MOV   REG[0x25],0xA      (0443)    mov   reg[ADC_bPWM_Period_LSB], <wCalcTime
08B5: 01 00    ADD   A,0x0              (0444)    add   A, >wCalcTime
08B7: 60 29    MOV   REG[0x29],A        (0445)    mov   reg[ADC_bPWM_Period_MSB],A
                                        (0446)    RAM_EPILOGUE RAM_USE_CLASS_4
08B9: 7F       RET                      (0447)    ret
                                        (0448) .ENDSECTION
                                        (0449) ; End of File ADC.asm
FILE: C:\Users\student\DOCUME~1\PSOCDE~1.4PR\CE5428~1.ARC\CE54287\CE54287\main.c
(0001) //--------------------------------------------------------------------------
(0002) //
(0003) // Copyright 2008, Cypress Semiconductor Corporation.
(0004) //
(0005) // This software is owned by Cypress Semiconductor Corporation (Cypress)
(0006) // and is protected by and subject to worldwide patent protection (United
(0007) // States and foreign), United States copyright laws and international
(0008) // treaty provisions. Cypress hereby grants to licensee a personal,
(0009) // non-exclusive, non-transferable license to copy, use, modify, create
(0010) // derivative works of, and compile the Cypress Source Code and derivative
(0011) // works for the sole purpose of creating custom software in support of
(0012) // licensee product to be used only in conjunction with a Cypress integrated
(0013) // circuit as specified in the applicable agreement. Any reproduction,
(0014) // modification, translation, compilation, or representation of this
(0015) // software except as specified above is prohibited without the express
(0016) // written permission of Cypress.
(0017) //
(0018) // Disclaimer: CYPRESS MAKES NO WARRANTY OF ANY KIND,EXPRESS OR IMPLIED,
(0019) // WITH REGARD TO THIS MATERIAL, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
(0020) // WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
(0021) // Cypress reserves the right to make changes without further notice to the
(0022) // materials described herein. Cypress does not assume any liability arising
(0023) // out of the application or use of any product or circuit described herein.
(0024) // Cypress does not authorize its products for use as critical components in
(0025) // life-support systems where a malfunction or failure may reasonably be
(0026) // expected to result in significant injury to the user. The inclusion of
(0027) // Cypress' product in a life-support systems application implies that the
(0028) // manufacturer assumes all risk of such use and in doing so indemnifies
(0029) // Cypress against all charges.
(0030) //
(0031) // Use may be limited by and subject to the applicable Cypress software
(0032) // license agreement.
(0033) //
(0034) //--------------------------------------------------------------------------
(0035) //*****************************************************************************
(0036) //*****************************************************************************
(0037) //  FILENAME: main.c
(0038) //   Version: 1.0, Updated on 21 November 2008
(0039) //	Revision 1.0, Updated on 02 August 2012
(0040) //  DESCRIPTION: Main file of the Example_Measure_5V Project.
(0041) //
(0042) //-----------------------------------------------------------------------------
(0043) //  Copyright (c) Cypress MicroSystems 2000-2003. All Rights Reserved.
(0044) //*****************************************************************************
(0045) //*****************************************************************************
(0046) //*****************************************************************************
(0047) // 
(0048) //Project Objective
(0049) //	    To measure a 0-5V input voltage using ADCINCVR and display it on LCD
(0050) //
(0051) //Overview
(0052) //  A 0 to 5V input voltage applied to P0[1] is measured using an ADCINCVR configured 
(0053) //  with 12 bit resolution.  The ADC value is converted into a floating point value that 
(0054) //  represents the input voltage and then is displayed on the LCD.  
(0055) //
(0056) //	The following changes were made to the default settings in the Device Editor:
(0057) // 
(0058) //	Add a PGA UM in the project which is available under Amplifiers section
(0059) //	place it in ACB00 and rename it as PGA
(0060) //
(0061) //	Add ADCINCVR UM available under ADC section
(0062) //	Place it in ASC10 and rename it to ADC
(0063) //
(0064) //	Place a LCD UM which is avilable under Misc Digital section
(0065) //	Rename it to LCD
(0066) //
(0067) //	Set the global resources and UM parameters in the Device Editor as shown under 
(0068) // 	"Project Settings" ahead.
(0069) //
(0070) //	// Circuit Connections
(0071) // 	This example can be tested using the CY3210 PSoC Eval1 board.  The following connections
(0072) // 	are to be made.  
(0073) // 
(0074) // 	PSoC
(0075) // 	--------
(0076) //	P0[1] - PGA Input.  Connect VR signal from J5 to P0[1] on J6
(0077) //
(0078) //	Following are the connections with LCD
(0079) //	P2[0] - DB4 Data Bit 0
(0080) //	P2[1] - DB5 Data Bit 1
(0081) //	P2[2] - DB6 Data Bit 2
(0082) //	P2[3] - DB7 Data Bit 3
(0083) //	P2[4] - E LCD Enable
(0084) //	P2[5] - RS Register Select
(0085) //	P2[6] - R/W Read/ Not Write
(0086) //	LCD (Connect LCD on J9 on CY3210 kit.
(0087) //
(0088) //Project Settings
(0089) //
(0090) //    Global Resources 
(0091) //      CPU_Clock      	= SysClk/2
(0092) //		VC1 `			= 6
(0093) //		Analog Power 	= SC On/ Ref High
(0094) //		Ref Mux			= [Vdd/2] +/- [Vdd/2]
(0095) // 	 
(0096) //User Module Parameters
(0097) //	  PGA
(0098) //		Gain 			= 1.000
(0099) //		Input 			= AnalogColumn_InputMux_0
(0100) //		Reference 		- Vss
(0101) //		AnalogBus		= Disable
(0102) //
(0103) //	  ADC
(0104) //		Input 			= ACB00
(0105) //		ClockPhase 		= Norm
(0106) //		Clock 			= VC1
(0107) //		ADC Resolution 	= 12 Bit
(0108) //		Calc Time		= 10
(0109) //		DataFormat		= Unsigned
(0110) //
(0111) //	  LCD
(0112) //		LCD Port 		= Port_2
(0113) //		BarGraph		= Disable
(0114) //
(0115) // 	Note: For more information on above parameters please refer UM module datasheets 
(0116) //			of these User Modules
(0117) // 	Operation
(0118) // 	On reset, device configuration is loaded and then code in main.c is executed.
(0119) // 	Following are the operations performed by firmware:
(0120) //	•	PGA is started in HIGHPOWER mode.
(0121) //	•	LCD is started.
(0122) //	•	On LCD at location 0,0 “MEASURED VOLTAGE” is printed.
(0123) //	•	Then global interrupts are enabled.
(0124) //	•	ADC is started in HIGHPOWER mode and the conversion is started in continuous 
(0125) //		sampling mode.
(0126) //	•	The scale factor to convert the ADC counts to voltage is calculated and stored 
(0127) //		in variable fScaleFactor.  The scale factor is calculated as Volts / Count.  
(0128) //		The input voltage range is 5V and the number of ADC counts is 4096.  So, the 
(0129) //		scale factor is 5V / 4096
(0130) //	•	In an infinite loop following operations are performed:
(0131) //		o	Wait until ADC data is available.
(0132) //		o	Read ADC Data into variable iData and clear ADC flag. 
(0133) //		o	Multiply the ADC result by fScaleFactor to get the value of input voltage.  
(0134) //			In the multiplication, the variable iData is typecast into a float.
(0135) //		o	Convert this float value in ASCII string using function ftoa. The function 
(0136) //			returns a pointer to the string that holds the converted ASCII value.  
(0137) //			To use this function stdlib.h header file is included in project. 
(0138) //		o	Display this ASCII string on LCD at location row 1 column 0 followed by string “V”.
(0139) //	To test the project, vary the input voltage on P0[1] and observe the value displayed on the LCD. 
(0140) //
(0141) //Note: When varying the input voltage from 0 to 5V, it will be observed that the display will not vary exactly from 0V to 5V.  Instead the display will vary from a few tens of millivolts above zero to a few tens of millivolts below 5V.  This is because the output of the PGA is not rail to rail, and is in the range of about (VSS+50mV) to (VDD-50mV).  This is an expected behavior.  
(0142) //*****************************************************************************
(0143) 
(0144) #include <m8c.h>        // part specific constants and macros
(0145) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0146) #include "stdlib.h"		// Add this header to use the ftoa function
(0147) #include "stdio.h"
(0148) #include "math.h"
(0149) 
(0150) #define N_WORDS 8
(0151) #define LEN_L 8
(0152) // #define N_WORDS 8
(0153) int iData;				// Variable that stores the ADC result
(0154) float fVolts;			// Variable that stores the converted voltage value
(0155) float fScaleFactor;		// Variable that stores the volts/count scale factor
(0156) char *pResult;			// Pointer used to store the result returned by ftoa function
(0157) int iStatus;			// Status variable for the ftoa function
(0158) int light_reading;
(0159) char buffer[17];
(0160) 
(0161) // global parameters
(0162) int MIN_LIGHT_READING = 0;
(0163) int MAX_LIGHT_READING = 800;
(0164) BYTE N_LIGHT_BINS = 8;
(0165) //BYTE N_WORDS = 8;
(0166) //int MIN_TEMP_READING = -20;
(0167) //int MAX_TEMP_READING = 100;
(0168) // BYTE N_TEMP_BINS = 8;
(0169) // BYTE LEN_L = 8;
(0170) BYTE len_M = 32;
(0171) BYTE my_vocab_index = 0;
(0172) 
(0173) typedef struct Embedding {
(0174) 	BYTE light_bin;		// 1 byte
(0175) 	//BYTE temp_bin;	// 1 byte
(0176) 	BYTE word;			// 1 byte
(0177) 	BYTE freq;			// 1 byte
(0178) } embedding;
(0179) 
(0180) BYTE i;
(0181) BYTE counter;	// temp variable for counter
(0182) 
(0183) // function protype definitions
(0184) void WaitMs(int);
(0185) void init_my_word_map(BYTE *);
(0186) BYTE get_light_bin(int);
(0187) // BYTE get_temp_bin(int);
(0188) BYTE get_word(BYTE, BYTE);
(0189) void insert_vocab(embedding *,  BYTE *, BYTE, BYTE, BYTE);
(0190) // void reorder(embedding *);
(0191) 
(0192) 
(0193) void WaitMs(int ms) { 
__UserModules_end|__text_start|_WaitMs|_WaitMs:
  i                    --> X+2
  j                    --> X+0
  ms                   --> X-5
    08BA: 10       PUSH  X
    08BB: 4F       MOV   X,SP
    08BC: 38 04    ADD   SP,0x4
(0194) //	ms delay at 3MHz clock
(0195) 	int i, j;
(0196) 	for(i = 0; i < ms; i++)
    08BE: 56 03 00 MOV   [X+3],0x0
    08C1: 56 02 00 MOV   [X+2],0x0
    08C4: 80 1D    JMP   0x08E2
(0197) 		for(j = 0; j < 120; j++);
    08C6: 56 01 00 MOV   [X+1],0x0
    08C9: 56 00 00 MOV   [X+0],0x0
    08CC: 77 01    INC   [X+1]
    08CE: 0F 00 00 ADC   [X+0],0x0
    08D1: 52 01    MOV   A,[X+1]
    08D3: 11 78    SUB   A,0x78
    08D5: 52 00    MOV   A,[X+0]
    08D7: 31 80    XOR   A,0x80
    08D9: 19 80    SBB   A,0x80
    08DB: CF F0    JC    0x08CC
    08DD: 77 03    INC   [X+3]
    08DF: 0F 02 00 ADC   [X+2],0x0
    08E2: 52 03    MOV   A,[X+3]
    08E4: 13 FC    SUB   A,[X-4]
    08E6: 52 FB    MOV   A,[X-5]
    08E8: 31 80    XOR   A,0x80
    08EA: 62 D0 00 MOV   REG[0xD0],0x0
    08ED: 53 34    MOV   [__rX],A
    08EF: 52 02    MOV   A,[X+2]
    08F1: 31 80    XOR   A,0x80
    08F3: 1A 34    SBB   A,[__rX]
    08F5: CF D0    JC    0x08C6
    08F7: 38 FC    ADD   SP,0xFC
    08F9: 20       POP   X
    08FA: 7F       RET   
(0198) }
(0199) 
(0200) void init_my_word_map(BYTE *my_word_map) {
_init_my_word_map:
  i                    --> X+0
  my_word_map          --> X-5
    08FB: 10       PUSH  X
    08FC: 4F       MOV   X,SP
    08FD: 38 01    ADD   SP,0x1
(0201) 	BYTE i;
(0202) 	// N_WORDS = 16;
(0203) 	for (i = 0; i < N_WORDS; i++) my_word_map[i] = LEN_L;		// initializing to default index
    08FF: 56 00 00 MOV   [X+0],0x0
    0902: 80 1D    JMP   0x0920
    0904: 62 D0 00 MOV   REG[0xD0],0x0
    0907: 52 00    MOV   A,[X+0]
    0909: 53 3B    MOV   [__r1],A
    090B: 55 3C 00 MOV   [__r0],0x0
    090E: 52 FC    MOV   A,[X-4]
    0910: 04 3B    ADD   [__r1],A
    0912: 52 FB    MOV   A,[X-5]
    0914: 0C 3C    ADC   [__r0],A
    0916: 51 3C    MOV   A,[__r0]
    0918: 60 D5    MOV   REG[0xD5],A
    091A: 50 08    MOV   A,0x8
    091C: 3F 3B    MVI   [__r1],A
    091E: 77 00    INC   [X+0]
    0920: 3D 00 08 CMP   [X+0],0x8
    0923: CF E0    JC    0x0904
    0925: 38 FF    ADD   SP,0xFF
    0927: 20       POP   X
    0928: 7F       RET   
(0204) }
(0205) 
(0206) BYTE get_light_bin(int light_reading) {
_get_light_bin:
  bin                  --> X+4
  step_size            --> X+0
  light_reading        --> X-5
    0929: 10       PUSH  X
    092A: 4F       MOV   X,SP
    092B: 38 07    ADD   SP,0x7
(0207) // @param: light_reading: current light reading
(0208) 	float step_size = (MAX_LIGHT_READING - MIN_LIGHT_READING) / N_LIGHT_BINS;
    092D: 62 D0 00 MOV   REG[0xD0],0x0
    0930: 51 56    MOV   A,[N_LIGHT_BINS]
    0932: 62 D0 00 MOV   REG[0xD0],0x0
    0935: 53 3B    MOV   [__r1],A
    0937: 62 D0 00 MOV   REG[0xD0],0x0
    093A: 51 4C    MOV   A,[MAX_LIGHT_READING+1]
    093C: 62 D0 00 MOV   REG[0xD0],0x0
    093F: 12 4E    SUB   A,[MIN_LIGHT_READING+1]
    0941: 62 D0 00 MOV   REG[0xD0],0x0
    0944: 53 39    MOV   [__r3],A
    0946: 62 D0 00 MOV   REG[0xD0],0x0
    0949: 51 4B    MOV   A,[MAX_LIGHT_READING]
    094B: 62 D0 00 MOV   REG[0xD0],0x0
    094E: 1A 4D    SBB   A,[MIN_LIGHT_READING]
    0950: 62 D0 00 MOV   REG[0xD0],0x0
    0953: 53 3A    MOV   [__r2],A
    0955: 50 00    MOV   A,0x0
    0957: 08       PUSH  A
    0958: 51 3B    MOV   A,[__r1]
    095A: 08       PUSH  A
    095B: 51 3A    MOV   A,[__r2]
    095D: 08       PUSH  A
    095E: 51 39    MOV   A,[__r3]
    0960: 08       PUSH  A
    0961: 7C 0E AA LCALL 0x0EAA
    0964: 18       POP   A
    0965: 53 3B    MOV   [__r1],A
    0967: 18       POP   A
    0968: 53 3C    MOV   [__r0],A
    096A: 38 FE    ADD   SP,0xFE
    096C: 51 3B    MOV   A,[__r1]
    096E: 54 03    MOV   [X+3],A
    0970: 51 3C    MOV   A,[__r0]
    0972: 54 02    MOV   [X+2],A
    0974: 48 02 80 TST   [X+2],0x80
    0977: A0 09    JZ    0x0981
    0979: 56 01 FF MOV   [X+1],0xFF
    097C: 56 00 FF MOV   [X+0],0xFF
    097F: 80 07    JMP   0x0987
    0981: 56 01 00 MOV   [X+1],0x0
    0984: 56 00 00 MOV   [X+0],0x0
    0987: 52 00    MOV   A,[X+0]
    0989: 08       PUSH  A
    098A: 52 01    MOV   A,[X+1]
    098C: 08       PUSH  A
    098D: 52 02    MOV   A,[X+2]
    098F: 08       PUSH  A
    0990: 52 03    MOV   A,[X+3]
    0992: 08       PUSH  A
    0993: 62 D0 00 MOV   REG[0xD0],0x0
    0996: 7C 13 F5 LCALL 0x13F5
    0999: 18       POP   A
    099A: 54 03    MOV   [X+3],A
    099C: 18       POP   A
    099D: 54 02    MOV   [X+2],A
    099F: 18       POP   A
    09A0: 54 01    MOV   [X+1],A
    09A2: 18       POP   A
    09A3: 54 00    MOV   [X+0],A
(0209) 	BYTE bin = (BYTE)ceil((light_reading - MIN_LIGHT_READING)/ step_size);
    09A5: 62 D0 00 MOV   REG[0xD0],0x0
FILE: C:\Users\student\DOCUME~1\PSOCDE~1.4PR\CE5428~1.ARC\CE54287\CE54287\main.c
(0210) 	return bin;
    0ABE: 52 04    MOV   A,[X+4]
    0AC0: 38 F9    ADD   SP,0xF9
    0AC2: 20       POP   X
    0AC3: 7F       RET   
(0211) }
(0212) 
(0213) BYTE get_word(BYTE light_bin, BYTE temp_bin) {
_get_word:
  temp_bin             --> X-5
  light_bin            --> X-4
    0AC4: 10       PUSH  X
    0AC5: 4F       MOV   X,SP
(0214) 	// @param:  light_bin, temp_bin: light & temperature bins
(0215) 	// returns encoded light and temperature bins using a hash function
(0216) 	// return 1 + (light_bin - 1) * KEY + (temp_bin - 1);
(0217)     return light_bin;
    0AC6: 52 FC    MOV   A,[X-4]
    0AC8: 62 D0 00 MOV   REG[0xD0],0x0
    0ACB: 20       POP   X
    0ACC: 7F       RET   
(0218) }
(0219) 
(0220) void insert_vocab(embedding *vocab, BYTE *my_word_map, BYTE light_bin, BYTE temp_bin, BYTE word) {
_insert_vocab:
  index                --> X+0
  word                 --> X-10
  temp_bin             --> X-9
  light_bin            --> X-8
  my_word_map          --> X-7
  vocab                --> X-5
    0ACD: 10       PUSH  X
    0ACE: 4F       MOV   X,SP
    0ACF: 38 01    ADD   SP,0x1
(0221) 	// if (my_vocab_index == SIZE(vocab))
(0222) 	// !!!!!
(0223) 	BYTE index = my_word_map[word - 1];		// word is 1 ... N_WORDS
    0AD1: 62 D0 00 MOV   REG[0xD0],0x0
    0AD4: 52 F6    MOV   A,[X-10]
    0AD6: 53 3B    MOV   [__r1],A
    0AD8: 55 3C 00 MOV   [__r0],0x0
    0ADB: 16 3B 01 SUB   [__r1],0x1
    0ADE: 1E 3C 00 SBB   [__r0],0x0
    0AE1: 52 FA    MOV   A,[X-6]
    0AE3: 04 3B    ADD   [__r1],A
    0AE5: 52 F9    MOV   A,[X-7]
    0AE7: 0C 3C    ADC   [__r0],A
    0AE9: 51 3C    MOV   A,[__r0]
    0AEB: 60 D4    MOV   REG[0xD4],A
    0AED: 3E 3B    MVI   A,[__r1]
    0AEF: 54 00    MOV   [X+0],A
(0224) 	if (index == LEN_L) {
    0AF1: 3D 00 08 CMP   [X+0],0x8
    0AF4: B0 D0    JNZ   0x0BC5
(0225) 		// insert
(0226) 		vocab[my_vocab_index].light_bin = light_bin;
    0AF6: 62 D0 00 MOV   REG[0xD0],0x0
    0AF9: 51 54    MOV   A,[my_vocab_index]
    0AFB: 62 D0 00 MOV   REG[0xD0],0x0
    0AFE: 53 3B    MOV   [__r1],A
    0B00: 50 00    MOV   A,0x0
    0B02: 08       PUSH  A
    0B03: 51 3B    MOV   A,[__r1]
    0B05: 08       PUSH  A
    0B06: 50 00    MOV   A,0x0
    0B08: 08       PUSH  A
    0B09: 50 03    MOV   A,0x3
    0B0B: 08       PUSH  A
    0B0C: 7C 14 60 LCALL 0x1460
    0B0F: 38 FC    ADD   SP,0xFC
    0B11: 51 34    MOV   A,[__rX]
    0B13: 53 3B    MOV   [__r1],A
    0B15: 51 33    MOV   A,[__rY]
    0B17: 53 3C    MOV   [__r0],A
    0B19: 52 FC    MOV   A,[X-4]
    0B1B: 04 3B    ADD   [__r1],A
    0B1D: 52 FB    MOV   A,[X-5]
    0B1F: 0C 3C    ADC   [__r0],A
    0B21: 51 3C    MOV   A,[__r0]
    0B23: 60 D5    MOV   REG[0xD5],A
    0B25: 52 F8    MOV   A,[X-8]
    0B27: 3F 3B    MVI   [__r1],A
(0227) 		// vocab[my_vocab_index].temp_bin = temp_bin;
(0228) 		vocab[my_vocab_index].word = word;
    0B29: 62 D0 00 MOV   REG[0xD0],0x0
    0B2C: 51 54    MOV   A,[my_vocab_index]
    0B2E: 62 D0 00 MOV   REG[0xD0],0x0
    0B31: 53 3B    MOV   [__r1],A
    0B33: 50 00    MOV   A,0x0
    0B35: 08       PUSH  A
    0B36: 51 3B    MOV   A,[__r1]
    0B38: 08       PUSH  A
    0B39: 50 00    MOV   A,0x0
    0B3B: 08       PUSH  A
    0B3C: 50 03    MOV   A,0x3
    0B3E: 08       PUSH  A
    0B3F: 7C 14 60 LCALL 0x1460
    0B42: 38 FC    ADD   SP,0xFC
    0B44: 51 34    MOV   A,[__rX]
    0B46: 53 3B    MOV   [__r1],A
    0B48: 51 33    MOV   A,[__rY]
    0B4A: 53 3C    MOV   [__r0],A
    0B4C: 52 FC    MOV   A,[X-4]
    0B4E: 04 3B    ADD   [__r1],A
    0B50: 52 FB    MOV   A,[X-5]
    0B52: 0C 3C    ADC   [__r0],A
    0B54: 06 3B 01 ADD   [__r1],0x1
    0B57: 0E 3C 00 ADC   [__r0],0x0
    0B5A: 51 3C    MOV   A,[__r0]
    0B5C: 60 D5    MOV   REG[0xD5],A
    0B5E: 52 F6    MOV   A,[X-10]
    0B60: 3F 3B    MVI   [__r1],A
(0229) 		vocab[my_vocab_index].freq = 1;
    0B62: 62 D0 00 MOV   REG[0xD0],0x0
    0B65: 51 54    MOV   A,[my_vocab_index]
    0B67: 62 D0 00 MOV   REG[0xD0],0x0
    0B6A: 53 3B    MOV   [__r1],A
    0B6C: 50 00    MOV   A,0x0
    0B6E: 08       PUSH  A
    0B6F: 51 3B    MOV   A,[__r1]
    0B71: 08       PUSH  A
    0B72: 50 00    MOV   A,0x0
    0B74: 08       PUSH  A
    0B75: 50 03    MOV   A,0x3
    0B77: 08       PUSH  A
    0B78: 7C 14 60 LCALL 0x1460
    0B7B: 38 FC    ADD   SP,0xFC
    0B7D: 51 34    MOV   A,[__rX]
    0B7F: 53 3B    MOV   [__r1],A
    0B81: 51 33    MOV   A,[__rY]
    0B83: 53 3C    MOV   [__r0],A
    0B85: 52 FC    MOV   A,[X-4]
    0B87: 04 3B    ADD   [__r1],A
    0B89: 52 FB    MOV   A,[X-5]
    0B8B: 0C 3C    ADC   [__r0],A
    0B8D: 06 3B 02 ADD   [__r1],0x2
    0B90: 0E 3C 00 ADC   [__r0],0x0
    0B93: 51 3C    MOV   A,[__r0]
    0B95: 60 D5    MOV   REG[0xD5],A
    0B97: 50 01    MOV   A,0x1
    0B99: 3F 3B    MVI   [__r1],A
(0230) 		my_word_map[word - 1] = my_vocab_index;
    0B9B: 52 F6    MOV   A,[X-10]
    0B9D: 53 3B    MOV   [__r1],A
    0B9F: 55 3C 00 MOV   [__r0],0x0
    0BA2: 16 3B 01 SUB   [__r1],0x1
    0BA5: 1E 3C 00 SBB   [__r0],0x0
    0BA8: 52 FA    MOV   A,[X-6]
    0BAA: 04 3B    ADD   [__r1],A
    0BAC: 52 F9    MOV   A,[X-7]
    0BAE: 0C 3C    ADC   [__r0],A
    0BB0: 51 3C    MOV   A,[__r0]
    0BB2: 60 D5    MOV   REG[0xD5],A
    0BB4: 62 D0 00 MOV   REG[0xD0],0x0
    0BB7: 51 54    MOV   A,[my_vocab_index]
    0BB9: 62 D0 00 MOV   REG[0xD0],0x0
    0BBC: 3F 3B    MVI   [__r1],A
(0231) 		my_vocab_index++;	// move to the next index
    0BBE: 62 D0 00 MOV   REG[0xD0],0x0
    0BC1: 76 54    INC   [my_vocab_index]
(0232) 	}
    0BC3: 80 44    JMP   0x0C08
(0233) 	else {
(0234) 		vocab[index].freq++;
    0BC5: 62 D0 00 MOV   REG[0xD0],0x0
    0BC8: 52 00    MOV   A,[X+0]
    0BCA: 53 3B    MOV   [__r1],A
    0BCC: 50 00    MOV   A,0x0
    0BCE: 08       PUSH  A
    0BCF: 51 3B    MOV   A,[__r1]
    0BD1: 08       PUSH  A
    0BD2: 50 00    MOV   A,0x0
    0BD4: 08       PUSH  A
    0BD5: 50 03    MOV   A,0x3
    0BD7: 08       PUSH  A
    0BD8: 7C 14 60 LCALL 0x1460
    0BDB: 38 FC    ADD   SP,0xFC
    0BDD: 51 34    MOV   A,[__rX]
    0BDF: 53 3B    MOV   [__r1],A
    0BE1: 51 33    MOV   A,[__rY]
    0BE3: 53 3C    MOV   [__r0],A
    0BE5: 52 FC    MOV   A,[X-4]
    0BE7: 04 3B    ADD   [__r1],A
    0BE9: 52 FB    MOV   A,[X-5]
    0BEB: 0C 3C    ADC   [__r0],A
    0BED: 06 3B 02 ADD   [__r1],0x2
    0BF0: 0E 3C 00 ADC   [__r0],0x0
    0BF3: 51 3C    MOV   A,[__r0]
    0BF5: 60 D4    MOV   REG[0xD4],A
    0BF7: 3E 3B    MVI   A,[__r1]
    0BF9: 7A 3B    DEC   [__r1]
    0BFB: 53 3A    MOV   [__r2],A
    0BFD: 06 3A 01 ADD   [__r2],0x1
    0C00: 51 3C    MOV   A,[__r0]
    0C02: 60 D5    MOV   REG[0xD5],A
    0C04: 51 3A    MOV   A,[__r2]
    0C06: 3F 3B    MVI   [__r1],A
(0235) 	}
    0C08: 38 FF    ADD   SP,0xFF
    0C0A: 20       POP   X
    0C0B: 7F       RET   
(0236) }
(0237) 
(0238) void main(void) {
_main:
  my_vocab             --> X+10
  my_word_map          --> X+2
  light_bin            --> X+1
  word                 --> X+0
    0C0C: 10       PUSH  X
    0C0D: 4F       MOV   X,SP
    0C0E: 38 22    ADD   SP,0x22
(0239) 
(0240) /*#############################################################################*/
(0241)     embedding my_vocab[LEN_L];             // table to store the current vocab for L seconds. N_WORDS = 16
(0242) 	//embedding sensed_vocab[16];       // table to store the sensed vocab for M seconds
(0243) 	BYTE my_word_map[N_WORDS];
(0244) 	BYTE light_bin;
(0245) 	// BYTE temp_bin;
(0246) 	BYTE word;
(0247)     init_my_word_map(my_word_map);      // initialize the word-> index map to get index of word in my_vocab
    0C10: 62 D0 00 MOV   REG[0xD0],0x0
    0C13: 5A 3B    MOV   [__r1],X
    0C15: 06 3B 02 ADD   [__r1],0x2
    0C18: 50 07    MOV   A,0x7
    0C1A: 08       PUSH  A
    0C1B: 51 3B    MOV   A,[__r1]
    0C1D: 08       PUSH  A
    0C1E: 9C DB    CALL  _init_my_word_map
    0C20: 38 FE    ADD   SP,0xFE
(0248) /*#############################################################################*/
(0249) 
(0250)     PGA_Start(PGA_HIGHPOWER); 			// Start PGA with Highpower
    0C22: 10       PUSH  X
    0C23: 50 03    MOV   A,0x3
    0C25: 7C 05 87 LCALL _PGA_SetPower|PGA_Start|_PGA_Start
(0251) 	LCD_Start();						// Start LCD
    0C28: 7C 06 D9 LCALL _LCD_Init|LCD_Start|_LCD_Start
    0C2B: 20       POP   X
(0252) 	//LCD_Position(0,0);				// Set LCD position to row 0 column 0
(0253) 	//LCD_PrCString("Light = ");		// Print string "MEASURED VOLTAGE" on LCD
(0254) 	M8C_EnableGInt; 					// Enable Global Interrupts
    0C2C: 71 01    OR    F,0x1
(0255) 	ADC_Start(ADC_HIGHPOWER); 			// Start ADC by powering SC block at High Power
    0C2E: 10       PUSH  X
    0C2F: 50 03    MOV   A,0x3
    0C31: 7C 07 FB LCALL _ADC_Start|ADC_SetPower|_ADC_SetPower
(0256) 	ADC_GetSamples(0); 					// Have ADC run continuously
    0C34: 50 00    MOV   A,0x0
    0C36: 7C 08 1F LCALL _ADC_GetSamples
    0C39: 20       POP   X
(0257) 	fScaleFactor = (float)5/(float)4096;// Calculate Scale Factor.
    0C3A: 62 D0 00 MOV   REG[0xD0],0x0
    0C3D: 55 41 3A MOV   [fScaleFactor],0x3A
    0C40: 55 42 A0 MOV   [fScaleFactor+1],0xA0
    0C43: 55 43 00 MOV   [fScaleFactor+2],0x0
    0C46: 55 44 00 MOV   [fScaleFactor+3],0x0
    0C49: 82 59    JMP   0x0EA3
(0258) 	//for(counter = 0; counter < 15; counter++)								// Infinite loop
(0259) 	while (1)
(0260) 	{
(0261) 		while(ADC_fIsDataAvailable() == 0); // Loop until value ready
    0C4B: 10       PUSH  X
    0C4C: 7C 08 65 LCALL ADC_fIsData|_ADC_fIsDataAvailable|_ADC_fIsData|ADC_fIsDataAvailable
    0C4F: 20       POP   X
    0C50: 62 D0 00 MOV   REG[0xD0],0x0
    0C53: 39 00    CMP   A,0x0
    0C55: AF F5    JZ    0x0C4B
(0262) 		iData=ADC_iGetData();				// Read ADC result
    0C57: 10       PUSH  X
    0C58: 7C 08 78 LCALL _ADC_iGetData
    0C5B: 62 D0 00 MOV   REG[0xD0],0x0
    0C5E: 5A 3C    MOV   [__r0],X
    0C60: 20       POP   X
    0C61: 08       PUSH  A
    0C62: 51 3C    MOV   A,[__r0]
    0C64: 62 D0 00 MOV   REG[0xD0],0x0
    0C67: 53 45    MOV   [iData],A
    0C69: 18       POP   A
    0C6A: 53 46    MOV   [iData+1],A
(0263) 		ADC_ClearFlag(); 					// Clear ADC flag
    0C6C: 10       PUSH  X
    0C6D: 7C 08 80 LCALL _ADC_ClearFlag
    0C70: 20       POP   X
(0264) 		fVolts = fScaleFactor*(float)iData;	// Calculate voltage using ADC result and scale factor
    0C71: 62 D0 00 MOV   REG[0xD0],0x0
    0C74: 51 46    MOV   A,[iData+1]
    0C76: 62 D0 00 MOV   REG[0xD0],0x0
    0C79: 53 39    MOV   [__r3],A
    0C7B: 62 D0 00 MOV   REG[0xD0],0x0
    0C7E: 51 45    MOV   A,[iData]
    0C80: 62 D0 00 MOV   REG[0xD0],0x0
    0C83: 53 3A    MOV   [__r2],A
    0C85: 47 3A 80 TST   [__r2],0x80
    0C88: A0 09    JZ    0x0C92
    0C8A: 55 3B FF MOV   [__r1],0xFF
    0C8D: 55 3C FF MOV   [__r0],0xFF
    0C90: 80 0A    JMP   0x0C9B
    0C92: 62 D0 00 MOV   REG[0xD0],0x0
    0C95: 55 3B 00 MOV   [__r1],0x0
    0C98: 55 3C 00 MOV   [__r0],0x0
    0C9B: 62 D0 00 MOV   REG[0xD0],0x0
    0C9E: 51 3C    MOV   A,[__r0]
    0CA0: 08       PUSH  A
    0CA1: 51 3B    MOV   A,[__r1]
    0CA3: 08       PUSH  A
    0CA4: 51 3A    MOV   A,[__r2]
    0CA6: 08       PUSH  A
    0CA7: 51 39    MOV   A,[__r3]
    0CA9: 08       PUSH  A
    0CAA: 7C 13 F5 LCALL 0x13F5
    0CAD: 18       POP   A
    0CAE: 53 39    MOV   [__r3],A
    0CB0: 18       POP   A
    0CB1: 53 3A    MOV   [__r2],A
    0CB3: 18       POP   A
    0CB4: 53 3B    MOV   [__r1],A
    0CB6: 18       POP   A
    0CB7: 08       PUSH  A
    0CB8: 51 3B    MOV   A,[__r1]
    0CBA: 08       PUSH  A
    0CBB: 51 3A    MOV   A,[__r2]
    0CBD: 08       PUSH  A
    0CBE: 51 39    MOV   A,[__r3]
    0CC0: 08       PUSH  A
    0CC1: 62 D0 00 MOV   REG[0xD0],0x0
    0CC4: 51 41    MOV   A,[fScaleFactor]
    0CC6: 08       PUSH  A
    0CC7: 51 42    MOV   A,[fScaleFactor+1]
    0CC9: 08       PUSH  A
    0CCA: 51 43    MOV   A,[fScaleFactor+2]
    0CCC: 08       PUSH  A
    0CCD: 51 44    MOV   A,[fScaleFactor+3]
    0CCF: 08       PUSH  A
    0CD0: 62 D0 00 MOV   REG[0xD0],0x0
    0CD3: 7C 12 54 LCALL 0x1254
    0CD6: 18       POP   A
    0CD7: 62 D0 00 MOV   REG[0xD0],0x0
    0CDA: 53 40    MOV   [fVolts+3],A
    0CDC: 18       POP   A
    0CDD: 53 3F    MOV   [fVolts+2],A
    0CDF: 18       POP   A
    0CE0: 53 3E    MOV   [fVolts+1],A
    0CE2: 18       POP   A
    0CE3: 53 3D    MOV   [fVolts],A
    0CE5: 38 FC    ADD   SP,0xFC
(0265) 		//pResult = ftoa(fVolts,&iStatus );	// Convernt Float value of voltage into ASCII string
(0266) 		light_reading = (int)( (fVolts / 3.7)*800 );
    0CE7: 50 40    MOV   A,0x40
    0CE9: 08       PUSH  A
    0CEA: 50 6C    MOV   A,0x6C
    0CEC: 08       PUSH  A
    0CED: 50 CC    MOV   A,0xCC
    0CEF: 08       PUSH  A
    0CF0: 50 CD    MOV   A,0xCD
    0CF2: 08       PUSH  A
    0CF3: 51 3D    MOV   A,[fVolts]
    0CF5: 08       PUSH  A
    0CF6: 51 3E    MOV   A,[fVolts+1]
    0CF8: 08       PUSH  A
    0CF9: 51 3F    MOV   A,[fVolts+2]
    0CFB: 08       PUSH  A
    0CFC: 51 40    MOV   A,[fVolts+3]
    0CFE: 08       PUSH  A
    0CFF: 62 D0 00 MOV   REG[0xD0],0x0
    0D02: 7C 11 71 LCALL 0x1171
    0D05: 18       POP   A
    0D06: 53 39    MOV   [__r3],A
    0D08: 18       POP   A
    0D09: 53 3A    MOV   [__r2],A
    0D0B: 18       POP   A
    0D0C: 53 3B    MOV   [__r1],A
    0D0E: 18       POP   A
    0D0F: 38 FC    ADD   SP,0xFC
    0D11: 08       PUSH  A
    0D12: 51 3B    MOV   A,[__r1]
    0D14: 08       PUSH  A
    0D15: 51 3A    MOV   A,[__r2]
    0D17: 08       PUSH  A
    0D18: 51 39    MOV   A,[__r3]
    0D1A: 08       PUSH  A
    0D1B: 50 44    MOV   A,0x44
    0D1D: 08       PUSH  A
    0D1E: 50 48    MOV   A,0x48
    0D20: 08       PUSH  A
    0D21: 50 00    MOV   A,0x0
    0D23: 08       PUSH  A
    0D24: 08       PUSH  A
    0D25: 7C 12 54 LCALL 0x1254
    0D28: 18       POP   A
    0D29: 53 39    MOV   [__r3],A
    0D2B: 18       POP   A
    0D2C: 53 3A    MOV   [__r2],A
    0D2E: 18       POP   A
    0D2F: 53 3B    MOV   [__r1],A
    0D31: 18       POP   A
    0D32: 38 FC    ADD   SP,0xFC
    0D34: 08       PUSH  A
    0D35: 51 3B    MOV   A,[__r1]
    0D37: 08       PUSH  A
    0D38: 51 3A    MOV   A,[__r2]
    0D3A: 08       PUSH  A
    0D3B: 51 39    MOV   A,[__r3]
    0D3D: 08       PUSH  A
    0D3E: 7C 0F 03 LCALL 0x0F03
    0D41: 18       POP   A
    0D42: 62 D0 00 MOV   REG[0xD0],0x0
    0D45: 53 50    MOV   [light_reading+1],A
    0D47: 18       POP   A
    0D48: 53 4F    MOV   [light_reading],A
    0D4A: 38 FE    ADD   SP,0xFE
(0267) 		csprintf(buffer, "%d", light_reading);
    0D4C: 51 4F    MOV   A,[light_reading]
    0D4E: 08       PUSH  A
    0D4F: 51 50    MOV   A,[light_reading+1]
    0D51: 08       PUSH  A
    0D52: 50 01    MOV   A,0x1
    0D54: 08       PUSH  A
    0D55: 50 A0    MOV   A,0xA0
    0D57: 08       PUSH  A
    0D58: 50 00    MOV   A,0x0
    0D5A: 08       PUSH  A
    0D5B: 50 21    MOV   A,0x21
    0D5D: 08       PUSH  A
    0D5E: 7C 19 B9 LCALL _csprintf
    0D61: 38 FA    ADD   SP,0xFA
(0268) 		
(0269) 		LCD_Position(0,0);					// Set LCD position to row 1 column 0
    0D63: 10       PUSH  X
    0D64: 50 00    MOV   A,0x0
    0D66: 57 00    MOV   X,0x0
    0D68: 7C 07 4C LCALL _LCD_Position
(0270) 											// Print voltage value on LCD
(0271) 		LCD_PrString(buffer);
    0D6B: 50 00    MOV   A,0x0
    0D6D: 08       PUSH  A
    0D6E: 50 21    MOV   A,0x21
    0D70: 5C       MOV   X,A
    0D71: 18       POP   A
    0D72: 7C 06 03 LCALL _LCD_PrString
(0272) 		LCD_Position(0,5);
    0D75: 57 05    MOV   X,0x5
    0D77: 50 00    MOV   A,0x0
    0D79: 7C 07 4C LCALL _LCD_Position
(0273) 		LCD_PrHexInt(light_reading);
    0D7C: 62 D0 00 MOV   REG[0xD0],0x0
    0D7F: 51 4F    MOV   A,[light_reading]
    0D81: 08       PUSH  A
    0D82: 51 50    MOV   A,[light_reading+1]
    0D84: 20       POP   X
    0D85: 7C 05 FC LCALL _LCD_PrHexInt
    0D88: 20       POP   X
(0274) 		//LCD_PrCString(" Lux");				// Print string " V" on LCD after voltage value
(0275) 		
(0276) 		i = 0;
    0D89: 62 D0 00 MOV   REG[0xD0],0x0
    0D8C: 55 57 00 MOV   [i],0x0
(0277) 		//light_bin =  light_reading/100;
(0278) 		light_bin = get_light_bin(light_reading);
    0D8F: 62 D0 00 MOV   REG[0xD0],0x0
    0D92: 51 4F    MOV   A,[light_reading]
    0D94: 08       PUSH  A
    0D95: 51 50    MOV   A,[light_reading+1]
    0D97: 08       PUSH  A
    0D98: 9B 8F    CALL  _get_light_bin
    0D9A: 38 FE    ADD   SP,0xFE
    0D9C: 62 D0 00 MOV   REG[0xD0],0x0
    0D9F: 54 01    MOV   [X+1],A
(0279)         word = get_word(light_bin, 1);
    0DA1: 50 01    MOV   A,0x1
    0DA3: 08       PUSH  A
    0DA4: 52 01    MOV   A,[X+1]
    0DA6: 08       PUSH  A
    0DA7: 9D 1B    CALL  _get_word
    0DA9: 62 D0 00 MOV   REG[0xD0],0x0
    0DAC: 54 00    MOV   [X+0],A
(0280)         insert_vocab(my_vocab, my_word_map, light_bin, 1, word);	// temp_bin hard coded to 1
    0DAE: 52 00    MOV   A,[X+0]
    0DB0: 08       PUSH  A
    0DB1: 50 01    MOV   A,0x1
    0DB3: 08       PUSH  A
    0DB4: 52 01    MOV   A,[X+1]
    0DB6: 08       PUSH  A
    0DB7: 5A 3B    MOV   [__r1],X
    0DB9: 06 3B 02 ADD   [__r1],0x2
    0DBC: 50 07    MOV   A,0x7
    0DBE: 08       PUSH  A
    0DBF: 51 3B    MOV   A,[__r1]
    0DC1: 08       PUSH  A
    0DC2: 5A 3B    MOV   [__r1],X
    0DC4: 06 3B 0A ADD   [__r1],0xA
    0DC7: 50 07    MOV   A,0x7
    0DC9: 08       PUSH  A
    0DCA: 51 3B    MOV   A,[__r1]
    0DCC: 08       PUSH  A
    0DCD: 9C FE    CALL  _insert_vocab
    0DCF: 38 F7    ADD   SP,0xF7
(0281) 		
(0282) 		LCD_Position(1,0);
    0DD1: 10       PUSH  X
    0DD2: 57 00    MOV   X,0x0
    0DD4: 50 01    MOV   A,0x1
    0DD6: 7C 07 4C LCALL _LCD_Position
    0DD9: 20       POP   X
(0283) 		LCD_PrHexInt(word);					// dispay light_bin number		
    0DDA: 62 D0 00 MOV   REG[0xD0],0x0
    0DDD: 52 00    MOV   A,[X+0]
    0DDF: 53 3B    MOV   [__r1],A
    0DE1: 10       PUSH  X
    0DE2: 50 00    MOV   A,0x0
    0DE4: 08       PUSH  A
    0DE5: 51 3B    MOV   A,[__r1]
    0DE7: 20       POP   X
    0DE8: 7C 05 FC LCALL _LCD_PrHexInt
(0284) 		LCD_Position(1,5);
    0DEB: 57 05    MOV   X,0x5
    0DED: 50 01    MOV   A,0x1
    0DEF: 7C 07 4C LCALL _LCD_Position
    0DF2: 20       POP   X
(0285) 		LCD_PrHexInt(my_vocab[my_word_map[word - 1]].freq);
    0DF3: 62 D0 00 MOV   REG[0xD0],0x0
    0DF6: 55 3C 07 MOV   [__r0],0x7
    0DF9: 5A 3B    MOV   [__r1],X
    0DFB: 06 3B 01 ADD   [__r1],0x1
    0DFE: 52 00    MOV   A,[X+0]
    0E00: 02 3B    ADD   A,[__r1]
    0E02: 53 3B    MOV   [__r1],A
    0E04: 50 00    MOV   A,0x0
    0E06: 0A 3C    ADC   A,[__r0]
    0E08: 60 D4    MOV   REG[0xD4],A
    0E0A: 3E 3B    MVI   A,[__r1]
    0E0C: 53 3B    MOV   [__r1],A
    0E0E: 50 00    MOV   A,0x0
    0E10: 08       PUSH  A
    0E11: 51 3B    MOV   A,[__r1]
    0E13: 08       PUSH  A
    0E14: 50 00    MOV   A,0x0
    0E16: 08       PUSH  A
    0E17: 50 03    MOV   A,0x3
    0E19: 08       PUSH  A
    0E1A: 7C 14 60 LCALL 0x1460
    0E1D: 38 FC    ADD   SP,0xFC
    0E1F: 51 34    MOV   A,[__rX]
    0E21: 53 3B    MOV   [__r1],A
    0E23: 51 33    MOV   A,[__rY]
    0E25: 53 3C    MOV   [__r0],A
    0E27: 5A 39    MOV   [__r3],X
    0E29: 06 39 0C ADD   [__r3],0xC
    0E2C: 51 39    MOV   A,[__r3]
    0E2E: 04 3B    ADD   [__r1],A
    0E30: 0E 3C 07 ADC   [__r0],0x7
    0E33: 51 3C    MOV   A,[__r0]
    0E35: 60 D4    MOV   REG[0xD4],A
    0E37: 3E 3B    MVI   A,[__r1]
    0E39: 53 3B    MOV   [__r1],A
    0E3B: 10       PUSH  X
    0E3C: 50 00    MOV   A,0x0
    0E3E: 08       PUSH  A
    0E3F: 51 3B    MOV   A,[__r1]
    0E41: 20       POP   X
    0E42: 7C 05 FC LCALL _LCD_PrHexInt
    0E45: 20       POP   X
    0E46: 80 24    JMP   0x0E6B
(0286) 		while (i < word)						// broadcast light_bin number 
(0287) 		{ 
(0288) 			PWM8_Speaker_Start();				// Loud bit
    0E48: 10       PUSH  X
    0E49: 7C 05 49 LCALL _PWM8_Speaker_Start
    0E4C: 20       POP   X
(0289) 			WaitMs(200);
    0E4D: 50 00    MOV   A,0x0
    0E4F: 08       PUSH  A
    0E50: 50 C8    MOV   A,0xC8
    0E52: 08       PUSH  A
    0E53: 9A 65    CALL  __UserModules_end|__text_start|_WaitMs|_WaitMs
    0E55: 38 FE    ADD   SP,0xFE
(0290) 			PWM8_Speaker_Stop();				// Silent bit (loud parser) 
    0E57: 10       PUSH  X
    0E58: 7C 05 4D LCALL _PWM8_Speaker_Stop
    0E5B: 20       POP   X
(0291) 			WaitMs(200);
    0E5C: 50 00    MOV   A,0x0
    0E5E: 08       PUSH  A
    0E5F: 50 C8    MOV   A,0xC8
    0E61: 08       PUSH  A
    0E62: 9A 56    CALL  __UserModules_end|__text_start|_WaitMs|_WaitMs
    0E64: 38 FE    ADD   SP,0xFE
(0292) 			i++;
    0E66: 62 D0 00 MOV   REG[0xD0],0x0
    0E69: 76 57    INC   [i]
(0293) 		}
    0E6B: 62 D0 00 MOV   REG[0xD0],0x0
    0E6E: 51 57    MOV   A,[i]
    0E70: 3B 00    CMP   A,[X+0]
    0E72: CF D5    JC    0x0E48
(0294) 		i = 0;
    0E74: 62 D0 00 MOV   REG[0xD0],0x0
    0E77: 55 57 00 MOV   [i],0x0
    0E7A: 80 10    JMP   0x0E8B
(0295) 		while (i < ( N_LIGHT_BINS - light_bin) )	// broadcast leftout light_bin Empty field silent bits
(0296) 		{
(0297) 			WaitMs(400);
    0E7C: 50 01    MOV   A,0x1
    0E7E: 08       PUSH  A
    0E7F: 50 90    MOV   A,0x90
    0E81: 08       PUSH  A
    0E82: 9A 36    CALL  __UserModules_end|__text_start|_WaitMs|_WaitMs
    0E84: 38 FE    ADD   SP,0xFE
(0298) 			i++;
    0E86: 62 D0 00 MOV   REG[0xD0],0x0
    0E89: 76 57    INC   [i]
(0299) 		} 
    0E8B: 62 D0 00 MOV   REG[0xD0],0x0
    0E8E: 51 56    MOV   A,[N_LIGHT_BINS]
    0E90: 13 01    SUB   A,[X+1]
    0E92: 62 D0 00 MOV   REG[0xD0],0x0
    0E95: 53 3C    MOV   [__r0],A
    0E97: 62 D0 00 MOV   REG[0xD0],0x0
    0E9A: 51 57    MOV   A,[i]
    0E9C: 62 D0 00 MOV   REG[0xD0],0x0
    0E9F: 3A 3C    CMP   A,[__r0]
    0EA1: CF DA    JC    0x0E7C
(0300) 		//WaitMs(2000);
(0301) 		
(0302) 	}
    0EA3: 8D A7    JMP   0x0C4B
(0303) }    0EA5: 38 DE    ADD   SP,0xDE
    0EA7: 20       POP   X
    0EA8: 8F FF    JMP   0x0EA8
__plcall:
    149E: 53 34    MOV   [__rX],A
    14A0: 28       ROMX  
    14A1: 08       PUSH  A
    14A2: 51 34    MOV   A,[__rX]
    14A4: 75       INC   X
    14A5: 09 00    ADC   A,0x0
    14A7: 28       ROMX  
    14A8: 08       PUSH  A
    14A9: 7F       RET   
_itoa:
    14AA: 10       PUSH  X
    14AB: 4F       MOV   X,SP
    14AC: 38 09    ADD   SP,0x9
    14AE: 52 FA    MOV   A,[X-6]
    14B0: 54 03    MOV   [X+3],A
    14B2: 52 F9    MOV   A,[X-7]
    14B4: 54 02    MOV   [X+2],A
    14B6: 3D F9 00 CMP   [X-7],0x0
    14B9: B0 2F    JNZ   0x14E9
    14BB: 3D FA 00 CMP   [X-6],0x0
    14BE: B0 2A    JNZ   0x14E9
    14C0: 62 D0 00 MOV   REG[0xD0],0x0
    14C3: 52 FC    MOV   A,[X-4]
    14C5: 53 3B    MOV   [__r1],A
    14C7: 52 FB    MOV   A,[X-5]
    14C9: 60 D5    MOV   REG[0xD5],A
    14CB: 50 30    MOV   A,0x30
    14CD: 3F 3B    MVI   [__r1],A
    14CF: 52 FC    MOV   A,[X-4]
    14D1: 01 01    ADD   A,0x1
    14D3: 53 3B    MOV   [__r1],A
    14D5: 52 FB    MOV   A,[X-5]
    14D7: 09 00    ADC   A,0x0
    14D9: 60 D5    MOV   REG[0xD5],A
    14DB: 50 00    MOV   A,0x0
    14DD: 3F 3B    MVI   [__r1],A
    14DF: 52 FC    MOV   A,[X-4]
    14E1: 53 3B    MOV   [__r1],A
    14E3: 52 FB    MOV   A,[X-5]
    14E5: 53 3C    MOV   [__r0],A
    14E7: 81 97    JMP   0x167F
    14E9: 52 FA    MOV   A,[X-6]
    14EB: 11 00    SUB   A,0x0
    14ED: 52 F9    MOV   A,[X-7]
    14EF: 31 80    XOR   A,0x80
    14F1: 19 80    SBB   A,0x80
    14F3: D0 29    JNC   0x151D
    14F5: 3D F7 00 CMP   [X-9],0x0
    14F8: B0 24    JNZ   0x151D
    14FA: 3D F8 0A CMP   [X-8],0xA
    14FD: B0 1F    JNZ   0x151D
    14FF: 56 06 01 MOV   [X+6],0x1
    1502: 62 D0 00 MOV   REG[0xD0],0x0
    1505: 52 03    MOV   A,[X+3]
    1507: 73       CPL   A
    1508: 53 3B    MOV   [__r1],A
    150A: 52 02    MOV   A,[X+2]
    150C: 73       CPL   A
    150D: 53 3C    MOV   [__r0],A
    150F: 51 3B    MOV   A,[__r1]
    1511: 01 01    ADD   A,0x1
    1513: 54 03    MOV   [X+3],A
    1515: 51 3C    MOV   A,[__r0]
    1517: 09 00    ADC   A,0x0
    1519: 54 02    MOV   [X+2],A
    151B: 80 04    JMP   0x1520
    151D: 56 06 00 MOV   [X+6],0x0
    1520: 52 FC    MOV   A,[X-4]
    1522: 54 01    MOV   [X+1],A
    1524: 52 FB    MOV   A,[X-5]
    1526: 54 00    MOV   [X+0],A
    1528: 62 D0 00 MOV   REG[0xD0],0x0
    152B: 52 F7    MOV   A,[X-9]
    152D: 08       PUSH  A
    152E: 52 F8    MOV   A,[X-8]
    1530: 08       PUSH  A
    1531: 52 02    MOV   A,[X+2]
    1533: 08       PUSH  A
    1534: 52 03    MOV   A,[X+3]
    1536: 08       PUSH  A
    1537: 7C 0E F8 LCALL 0x0EF8
    153A: 38 FE    ADD   SP,0xFE
    153C: 18       POP   A
    153D: 53 3B    MOV   [__r1],A
    153F: 18       POP   A
    1540: 53 3C    MOV   [__r0],A
    1542: 51 3B    MOV   A,[__r1]
    1544: 54 08    MOV   [X+8],A
    1546: 51 3C    MOV   A,[__r0]
    1548: 54 07    MOV   [X+7],A
    154A: 50 09    MOV   A,0x9
    154C: 13 08    SUB   A,[X+8]
    154E: 52 07    MOV   A,[X+7]
    1550: 31 80    XOR   A,0x80
    1552: 53 34    MOV   [__rX],A
    1554: 50 80    MOV   A,0x80
    1556: 1A 34    SBB   A,[__rX]
    1558: C0 28    JC    0x1581
    155A: 62 D0 00 MOV   REG[0xD0],0x0
    155D: 52 01    MOV   A,[X+1]
    155F: 53 3B    MOV   [__r1],A
    1561: 52 00    MOV   A,[X+0]
    1563: 53 3C    MOV   [__r0],A
    1565: 51 3B    MOV   A,[__r1]
    1567: 01 01    ADD   A,0x1
    1569: 54 01    MOV   [X+1],A
    156B: 51 3C    MOV   A,[__r0]
    156D: 09 00    ADC   A,0x0
    156F: 54 00    MOV   [X+0],A
    1571: 52 08    MOV   A,[X+8]
    1573: 01 30    ADD   A,0x30
    1575: 53 3A    MOV   [__r2],A
    1577: 51 3C    MOV   A,[__r0]
    1579: 60 D5    MOV   REG[0xD5],A
    157B: 51 3A    MOV   A,[__r2]
    157D: 3F 3B    MVI   [__r1],A
    157F: 80 26    JMP   0x15A6
    1581: 62 D0 00 MOV   REG[0xD0],0x0
    1584: 52 01    MOV   A,[X+1]
    1586: 53 3B    MOV   [__r1],A
    1588: 52 00    MOV   A,[X+0]
    158A: 53 3C    MOV   [__r0],A
    158C: 51 3B    MOV   A,[__r1]
    158E: 01 01    ADD   A,0x1
    1590: 54 01    MOV   [X+1],A
    1592: 51 3C    MOV   A,[__r0]
    1594: 09 00    ADC   A,0x0
    1596: 54 00    MOV   [X+0],A
    1598: 52 08    MOV   A,[X+8]
    159A: 01 57    ADD   A,0x57
    159C: 53 3A    MOV   [__r2],A
    159E: 51 3C    MOV   A,[__r0]
    15A0: 60 D5    MOV   REG[0xD5],A
    15A2: 51 3A    MOV   A,[__r2]
    15A4: 3F 3B    MVI   [__r1],A
    15A6: 52 F7    MOV   A,[X-9]
    15A8: 08       PUSH  A
    15A9: 52 F8    MOV   A,[X-8]
    15AB: 08       PUSH  A
    15AC: 52 02    MOV   A,[X+2]
    15AE: 08       PUSH  A
    15AF: 52 03    MOV   A,[X+3]
    15B1: 08       PUSH  A
    15B2: 62 D0 00 MOV   REG[0xD0],0x0
    15B5: 7C 0E F8 LCALL 0x0EF8
    15B8: 18       POP   A
    15B9: 54 03    MOV   [X+3],A
    15BB: 18       POP   A
    15BC: 54 02    MOV   [X+2],A
    15BE: 38 FE    ADD   SP,0xFE
    15C0: 3D 02 00 CMP   [X+2],0x0
    15C3: BF 64    JNZ   0x1528
    15C5: 3D 03 00 CMP   [X+3],0x0
    15C8: BF 5F    JNZ   0x1528
    15CA: 3D 06 00 CMP   [X+6],0x0
    15CD: A0 20    JZ    0x15EE
    15CF: 62 D0 00 MOV   REG[0xD0],0x0
    15D2: 52 01    MOV   A,[X+1]
    15D4: 53 3B    MOV   [__r1],A
    15D6: 52 00    MOV   A,[X+0]
    15D8: 53 3C    MOV   [__r0],A
    15DA: 51 3B    MOV   A,[__r1]
    15DC: 01 01    ADD   A,0x1
    15DE: 54 01    MOV   [X+1],A
    15E0: 51 3C    MOV   A,[__r0]
    15E2: 09 00    ADC   A,0x0
    15E4: 54 00    MOV   [X+0],A
    15E6: 51 3C    MOV   A,[__r0]
    15E8: 60 D5    MOV   REG[0xD5],A
    15EA: 50 2D    MOV   A,0x2D
    15EC: 3F 3B    MVI   [__r1],A
    15EE: 62 D0 00 MOV   REG[0xD0],0x0
    15F1: 52 01    MOV   A,[X+1]
    15F3: 53 3B    MOV   [__r1],A
    15F5: 52 00    MOV   A,[X+0]
    15F7: 53 3C    MOV   [__r0],A
    15F9: 51 3B    MOV   A,[__r1]
    15FB: 01 FF    ADD   A,0xFF
    15FD: 54 01    MOV   [X+1],A
    15FF: 51 3C    MOV   A,[__r0]
    1601: 09 FF    ADC   A,0xFF
    1603: 54 00    MOV   [X+0],A
    1605: 51 3C    MOV   A,[__r0]
    1607: 60 D5    MOV   REG[0xD5],A
    1609: 50 00    MOV   A,0x0
    160B: 3F 3B    MVI   [__r1],A
    160D: 52 FC    MOV   A,[X-4]
    160F: 54 05    MOV   [X+5],A
    1611: 52 FB    MOV   A,[X-5]
    1613: 54 04    MOV   [X+4],A
    1615: 80 54    JMP   0x166A
    1617: 62 D0 00 MOV   REG[0xD0],0x0
    161A: 52 05    MOV   A,[X+5]
    161C: 53 3B    MOV   [__r1],A
    161E: 52 04    MOV   A,[X+4]
    1620: 60 D4    MOV   REG[0xD4],A
    1622: 3E 3B    MVI   A,[__r1]
    1624: 54 06    MOV   [X+6],A
    1626: 52 05    MOV   A,[X+5]
    1628: 53 3B    MOV   [__r1],A
    162A: 52 04    MOV   A,[X+4]
    162C: 53 3C    MOV   [__r0],A
    162E: 51 3B    MOV   A,[__r1]
    1630: 01 01    ADD   A,0x1
    1632: 54 05    MOV   [X+5],A
    1634: 51 3C    MOV   A,[__r0]
    1636: 09 00    ADC   A,0x0
    1638: 54 04    MOV   [X+4],A
    163A: 52 01    MOV   A,[X+1]
    163C: 53 39    MOV   [__r3],A
    163E: 52 00    MOV   A,[X+0]
    1640: 60 D4    MOV   REG[0xD4],A
    1642: 3E 39    MVI   A,[__r3]
    1644: 53 3A    MOV   [__r2],A
    1646: 51 3C    MOV   A,[__r0]
    1648: 60 D5    MOV   REG[0xD5],A
    164A: 51 3A    MOV   A,[__r2]
    164C: 3F 3B    MVI   [__r1],A
    164E: 52 01    MOV   A,[X+1]
    1650: 53 3B    MOV   [__r1],A
    1652: 52 00    MOV   A,[X+0]
    1654: 53 3C    MOV   [__r0],A
    1656: 51 3B    MOV   A,[__r1]
    1658: 01 FF    ADD   A,0xFF
    165A: 54 01    MOV   [X+1],A
    165C: 51 3C    MOV   A,[__r0]
    165E: 09 FF    ADC   A,0xFF
    1660: 54 00    MOV   [X+0],A
    1662: 51 3C    MOV   A,[__r0]
    1664: 60 D5    MOV   REG[0xD5],A
    1666: 52 06    MOV   A,[X+6]
    1668: 3F 3B    MVI   [__r1],A
    166A: 52 05    MOV   A,[X+5]
    166C: 13 01    SUB   A,[X+1]
    166E: 52 04    MOV   A,[X+4]
    1670: 1B 00    SBB   A,[X+0]
    1672: CF A4    JC    0x1617
    1674: 62 D0 00 MOV   REG[0xD0],0x0
    1677: 52 FC    MOV   A,[X-4]
    1679: 53 3B    MOV   [__r1],A
    167B: 52 FB    MOV   A,[X-5]
    167D: 53 3C    MOV   [__r0],A
    167F: 38 F7    ADD   SP,0xF7
    1681: 20       POP   X
    1682: 7F       RET   
_utoa:
    1683: 10       PUSH  X
    1684: 4F       MOV   X,SP
    1685: 38 07    ADD   SP,0x7
    1687: 52 FC    MOV   A,[X-4]
    1689: 54 01    MOV   [X+1],A
    168B: 52 FB    MOV   A,[X-5]
    168D: 54 00    MOV   [X+0],A
    168F: 62 D0 00 MOV   REG[0xD0],0x0
    1692: 52 F7    MOV   A,[X-9]
    1694: 08       PUSH  A
    1695: 52 F8    MOV   A,[X-8]
    1697: 08       PUSH  A
    1698: 52 F9    MOV   A,[X-7]
    169A: 08       PUSH  A
    169B: 52 FA    MOV   A,[X-6]
    169D: 08       PUSH  A
    169E: 7C 0E F8 LCALL 0x0EF8
    16A1: 38 FE    ADD   SP,0xFE
    16A3: 18       POP   A
    16A4: 53 3B    MOV   [__r1],A
    16A6: 18       POP   A
    16A7: 53 3C    MOV   [__r0],A
    16A9: 51 3B    MOV   A,[__r1]
    16AB: 54 06    MOV   [X+6],A
    16AD: 51 3C    MOV   A,[__r0]
    16AF: 54 05    MOV   [X+5],A
    16B1: 50 09    MOV   A,0x9
    16B3: 13 06    SUB   A,[X+6]
    16B5: 52 05    MOV   A,[X+5]
    16B7: 31 80    XOR   A,0x80
    16B9: 53 34    MOV   [__rX],A
    16BB: 50 80    MOV   A,0x80
    16BD: 1A 34    SBB   A,[__rX]
    16BF: C0 28    JC    0x16E8
    16C1: 62 D0 00 MOV   REG[0xD0],0x0
    16C4: 52 01    MOV   A,[X+1]
    16C6: 53 3B    MOV   [__r1],A
    16C8: 52 00    MOV   A,[X+0]
    16CA: 53 3C    MOV   [__r0],A
    16CC: 51 3B    MOV   A,[__r1]
    16CE: 01 01    ADD   A,0x1
    16D0: 54 01    MOV   [X+1],A
    16D2: 51 3C    MOV   A,[__r0]
    16D4: 09 00    ADC   A,0x0
    16D6: 54 00    MOV   [X+0],A
    16D8: 52 06    MOV   A,[X+6]
    16DA: 01 30    ADD   A,0x30
    16DC: 53 3A    MOV   [__r2],A
    16DE: 51 3C    MOV   A,[__r0]
    16E0: 60 D5    MOV   REG[0xD5],A
    16E2: 51 3A    MOV   A,[__r2]
    16E4: 3F 3B    MVI   [__r1],A
    16E6: 80 26    JMP   0x170D
    16E8: 62 D0 00 MOV   REG[0xD0],0x0
    16EB: 52 01    MOV   A,[X+1]
    16ED: 53 3B    MOV   [__r1],A
    16EF: 52 00    MOV   A,[X+0]
    16F1: 53 3C    MOV   [__r0],A
    16F3: 51 3B    MOV   A,[__r1]
    16F5: 01 01    ADD   A,0x1
    16F7: 54 01    MOV   [X+1],A
    16F9: 51 3C    MOV   A,[__r0]
    16FB: 09 00    ADC   A,0x0
    16FD: 54 00    MOV   [X+0],A
    16FF: 52 06    MOV   A,[X+6]
    1701: 01 57    ADD   A,0x57
    1703: 53 3A    MOV   [__r2],A
    1705: 51 3C    MOV   A,[__r0]
    1707: 60 D5    MOV   REG[0xD5],A
    1709: 51 3A    MOV   A,[__r2]
    170B: 3F 3B    MVI   [__r1],A
    170D: 52 F7    MOV   A,[X-9]
    170F: 08       PUSH  A
    1710: 52 F8    MOV   A,[X-8]
    1712: 08       PUSH  A
    1713: 52 F9    MOV   A,[X-7]
    1715: 08       PUSH  A
    1716: 52 FA    MOV   A,[X-6]
    1718: 08       PUSH  A
    1719: 62 D0 00 MOV   REG[0xD0],0x0
    171C: 7C 0E F8 LCALL 0x0EF8
    171F: 18       POP   A
    1720: 54 FA    MOV   [X-6],A
    1722: 18       POP   A
    1723: 54 F9    MOV   [X-7],A
    1725: 38 FE    ADD   SP,0xFE
    1727: 3D F9 00 CMP   [X-7],0x0
    172A: BF 64    JNZ   0x168F
    172C: 3D FA 00 CMP   [X-6],0x0
    172F: BF 5F    JNZ   0x168F
    1731: 62 D0 00 MOV   REG[0xD0],0x0
    1734: 52 01    MOV   A,[X+1]
    1736: 53 3B    MOV   [__r1],A
    1738: 52 00    MOV   A,[X+0]
    173A: 53 3C    MOV   [__r0],A
    173C: 51 3B    MOV   A,[__r1]
    173E: 01 FF    ADD   A,0xFF
    1740: 54 01    MOV   [X+1],A
    1742: 51 3C    MOV   A,[__r0]
    1744: 09 FF    ADC   A,0xFF
    1746: 54 00    MOV   [X+0],A
    1748: 51 3C    MOV   A,[__r0]
    174A: 60 D5    MOV   REG[0xD5],A
    174C: 50 00    MOV   A,0x0
    174E: 3F 3B    MVI   [__r1],A
    1750: 52 FC    MOV   A,[X-4]
    1752: 54 03    MOV   [X+3],A
    1754: 52 FB    MOV   A,[X-5]
    1756: 54 02    MOV   [X+2],A
    1758: 80 54    JMP   0x17AD
    175A: 62 D0 00 MOV   REG[0xD0],0x0
    175D: 52 03    MOV   A,[X+3]
    175F: 53 3B    MOV   [__r1],A
    1761: 52 02    MOV   A,[X+2]
    1763: 60 D4    MOV   REG[0xD4],A
    1765: 3E 3B    MVI   A,[__r1]
    1767: 54 04    MOV   [X+4],A
    1769: 52 03    MOV   A,[X+3]
    176B: 53 3B    MOV   [__r1],A
    176D: 52 02    MOV   A,[X+2]
    176F: 53 3C    MOV   [__r0],A
    1771: 51 3B    MOV   A,[__r1]
    1773: 01 01    ADD   A,0x1
    1775: 54 03    MOV   [X+3],A
    1777: 51 3C    MOV   A,[__r0]
    1779: 09 00    ADC   A,0x0
    177B: 54 02    MOV   [X+2],A
    177D: 52 01    MOV   A,[X+1]
    177F: 53 39    MOV   [__r3],A
    1781: 52 00    MOV   A,[X+0]
    1783: 60 D4    MOV   REG[0xD4],A
    1785: 3E 39    MVI   A,[__r3]
    1787: 53 3A    MOV   [__r2],A
    1789: 51 3C    MOV   A,[__r0]
    178B: 60 D5    MOV   REG[0xD5],A
    178D: 51 3A    MOV   A,[__r2]
    178F: 3F 3B    MVI   [__r1],A
    1791: 52 01    MOV   A,[X+1]
    1793: 53 3B    MOV   [__r1],A
    1795: 52 00    MOV   A,[X+0]
    1797: 53 3C    MOV   [__r0],A
    1799: 51 3B    MOV   A,[__r1]
    179B: 01 FF    ADD   A,0xFF
    179D: 54 01    MOV   [X+1],A
    179F: 51 3C    MOV   A,[__r0]
    17A1: 09 FF    ADC   A,0xFF
    17A3: 54 00    MOV   [X+0],A
    17A5: 51 3C    MOV   A,[__r0]
    17A7: 60 D5    MOV   REG[0xD5],A
    17A9: 52 04    MOV   A,[X+4]
    17AB: 3F 3B    MVI   [__r1],A
    17AD: 52 03    MOV   A,[X+3]
    17AF: 13 01    SUB   A,[X+1]
    17B1: 52 02    MOV   A,[X+2]
    17B3: 1B 00    SBB   A,[X+0]
    17B5: CF A4    JC    0x175A
    17B7: 62 D0 00 MOV   REG[0xD0],0x0
    17BA: 52 FC    MOV   A,[X-4]
    17BC: 53 3B    MOV   [__r1],A
    17BE: 52 FB    MOV   A,[X-5]
    17C0: 53 3C    MOV   [__r0],A
    17C2: 38 F9    ADD   SP,0xF9
    17C4: 20       POP   X
    17C5: 7F       RET   
_isdigit:
    17C6: 10       PUSH  X
    17C7: 4F       MOV   X,SP
    17C8: 62 D0 00 MOV   REG[0xD0],0x0
    17CB: 52 FC    MOV   A,[X-4]
    17CD: 01 58    ADD   A,0x58
    17CF: 53 3B    MOV   [__r1],A
    17D1: 52 FB    MOV   A,[X-5]
    17D3: 09 02    ADC   A,0x2
    17D5: 10       PUSH  X
    17D6: 58 3B    MOV   X,[__r1]
    17D8: 28       ROMX  
    17D9: 20       POP   X
    17DA: 53 3B    MOV   [__r1],A
    17DC: 55 3C 00 MOV   [__r0],0x0
    17DF: 26 3B 04 AND   [__r1],0x4
    17E2: 26 3C 00 AND   [__r0],0x0
    17E5: 20       POP   X
    17E6: 7F       RET   
_islower:
    17E7: 10       PUSH  X
    17E8: 4F       MOV   X,SP
    17E9: 62 D0 00 MOV   REG[0xD0],0x0
    17EC: 52 FC    MOV   A,[X-4]
    17EE: 01 58    ADD   A,0x58
    17F0: 53 3B    MOV   [__r1],A
    17F2: 52 FB    MOV   A,[X-5]
    17F4: 09 02    ADC   A,0x2
    17F6: 10       PUSH  X
    17F7: 58 3B    MOV   X,[__r1]
    17F9: 28       ROMX  
    17FA: 20       POP   X
    17FB: 53 3B    MOV   [__r1],A
    17FD: 55 3C 00 MOV   [__r0],0x0
    1800: 26 3B 02 AND   [__r1],0x2
    1803: 26 3C 00 AND   [__r0],0x0
    1806: 20       POP   X
    1807: 7F       RET   
_isspace:
    1808: 10       PUSH  X
    1809: 4F       MOV   X,SP
    180A: 62 D0 00 MOV   REG[0xD0],0x0
    180D: 52 FC    MOV   A,[X-4]
    180F: 01 58    ADD   A,0x58
    1811: 53 3B    MOV   [__r1],A
    1813: 52 FB    MOV   A,[X-5]
    1815: 09 02    ADC   A,0x2
    1817: 10       PUSH  X
    1818: 58 3B    MOV   X,[__r1]
    181A: 28       ROMX  
    181B: 20       POP   X
    181C: 53 3B    MOV   [__r1],A
    181E: 55 3C 00 MOV   [__r0],0x0
    1821: 26 3B 10 AND   [__r1],0x10
    1824: 26 3C 00 AND   [__r0],0x0
    1827: 20       POP   X
    1828: 7F       RET   
_toupper:
    1829: 10       PUSH  X
    182A: 4F       MOV   X,SP
    182B: 52 FB    MOV   A,[X-5]
    182D: 08       PUSH  A
    182E: 52 FC    MOV   A,[X-4]
    1830: 08       PUSH  A
    1831: 7C 17 E7 LCALL _islower
    1834: 38 FE    ADD   SP,0xFE
    1836: 62 D0 00 MOV   REG[0xD0],0x0
    1839: 3C 3C 00 CMP   [__r0],0x0
    183C: B0 06    JNZ   0x1843
    183E: 3C 3B 00 CMP   [__r1],0x0
    1841: A0 18    JZ    0x185A
    1843: 62 D0 00 MOV   REG[0xD0],0x0
    1846: 52 FC    MOV   A,[X-4]
    1848: 11 61    SUB   A,0x61
    184A: 53 3B    MOV   [__r1],A
    184C: 52 FB    MOV   A,[X-5]
    184E: 19 00    SBB   A,0x0
    1850: 53 3C    MOV   [__r0],A
    1852: 06 3B 41 ADD   [__r1],0x41
    1855: 0E 3C 00 ADC   [__r0],0x0
    1858: 80 0C    JMP   0x1865
    185A: 62 D0 00 MOV   REG[0xD0],0x0
    185D: 52 FC    MOV   A,[X-4]
    185F: 53 3B    MOV   [__r1],A
    1861: 52 FB    MOV   A,[X-5]
    1863: 53 3C    MOV   [__r0],A
    1865: 20       POP   X
    1866: 7F       RET   
_ceilf:
    1867: 10       PUSH  X
    1868: 4F       MOV   X,SP
    1869: 38 08    ADD   SP,0x8
    186B: 52 F9    MOV   A,[X-7]
    186D: 54 04    MOV   [X+4],A
    186F: 52 FA    MOV   A,[X-6]
    1871: 54 05    MOV   [X+5],A
    1873: 52 FB    MOV   A,[X-5]
    1875: 54 06    MOV   [X+6],A
    1877: 52 FC    MOV   A,[X-4]
    1879: 54 07    MOV   [X+7],A
    187B: 52 F9    MOV   A,[X-7]
    187D: 08       PUSH  A
    187E: 52 FA    MOV   A,[X-6]
    1880: 08       PUSH  A
    1881: 52 FB    MOV   A,[X-5]
    1883: 08       PUSH  A
    1884: 52 FC    MOV   A,[X-4]
    1886: 08       PUSH  A
    1887: 62 D0 00 MOV   REG[0xD0],0x0
    188A: 7C 0F 03 LCALL 0x0F03
    188D: 18       POP   A
    188E: 54 03    MOV   [X+3],A
    1890: 18       POP   A
    1891: 54 02    MOV   [X+2],A
    1893: 18       POP   A
    1894: 54 01    MOV   [X+1],A
    1896: 18       POP   A
    1897: 54 00    MOV   [X+0],A
    1899: 52 00    MOV   A,[X+0]
    189B: 08       PUSH  A
    189C: 52 01    MOV   A,[X+1]
    189E: 08       PUSH  A
    189F: 52 02    MOV   A,[X+2]
    18A1: 08       PUSH  A
    18A2: 52 03    MOV   A,[X+3]
    18A4: 08       PUSH  A
    18A5: 7C 13 F5 LCALL 0x13F5
    18A8: 18       POP   A
    18A9: 53 39    MOV   [__r3],A
    18AB: 18       POP   A
    18AC: 53 3A    MOV   [__r2],A
    18AE: 18       POP   A
    18AF: 53 3B    MOV   [__r1],A
    18B1: 18       POP   A
    18B2: 53 3C    MOV   [__r0],A
    18B4: 52 F9    MOV   A,[X-7]
    18B6: 08       PUSH  A
    18B7: 52 FA    MOV   A,[X-6]
    18B9: 08       PUSH  A
    18BA: 52 FB    MOV   A,[X-5]
    18BC: 08       PUSH  A
    18BD: 52 FC    MOV   A,[X-4]
    18BF: 08       PUSH  A
    18C0: 51 3C    MOV   A,[__r0]
    18C2: 08       PUSH  A
    18C3: 51 3B    MOV   A,[__r1]
    18C5: 08       PUSH  A
    18C6: 51 3A    MOV   A,[__r2]
    18C8: 08       PUSH  A
    18C9: 51 39    MOV   A,[__r3]
    18CB: 08       PUSH  A
    18CC: 7C 11 14 LCALL 0x1114
    18CF: 38 F8    ADD   SP,0xF8
    18D1: 39 00    CMP   A,0x0
    18D3: A0 17    JZ    0x18EB
    18D5: 52 05    MOV   A,[X+5]
    18D7: 21 80    AND   A,0x80
    18D9: 53 3B    MOV   [__r1],A
    18DB: 52 04    MOV   A,[X+4]
    18DD: 21 7F    AND   A,0x7F
    18DF: 53 3C    MOV   [__r0],A
    18E1: 51 3B    MOV   A,[__r1]
    18E3: 11 80    SUB   A,0x80
    18E5: 51 3C    MOV   A,[__r0]
    18E7: 19 4B    SBB   A,0x4B
    18E9: C0 16    JC    0x1900
    18EB: 62 D0 00 MOV   REG[0xD0],0x0
    18EE: 52 F9    MOV   A,[X-7]
    18F0: 53 3C    MOV   [__r0],A
    18F2: 52 FA    MOV   A,[X-6]
    18F4: 53 3B    MOV   [__r1],A
    18F6: 52 FB    MOV   A,[X-5]
    18F8: 53 3A    MOV   [__r2],A
    18FA: 52 FC    MOV   A,[X-4]
    18FC: 53 39    MOV   [__r3],A
    18FE: 80 84    JMP   0x1983
    1900: 50 00    MOV   A,0x0
    1902: 08       PUSH  A
    1903: 08       PUSH  A
    1904: 08       PUSH  A
    1905: 08       PUSH  A
    1906: 52 F9    MOV   A,[X-7]
    1908: 08       PUSH  A
    1909: 52 FA    MOV   A,[X-6]
    190B: 08       PUSH  A
    190C: 52 FB    MOV   A,[X-5]
    190E: 08       PUSH  A
    190F: 52 FC    MOV   A,[X-4]
    1911: 08       PUSH  A
    1912: 62 D0 00 MOV   REG[0xD0],0x0
    1915: 7C 11 14 LCALL 0x1114
    1918: 38 F8    ADD   SP,0xF8
    191A: 39 00    CMP   A,0x0
    191C: A0 48    JZ    0x1965
    191E: 39 01    CMP   A,0x1
    1920: B0 44    JNZ   0x1965
    1922: 52 03    MOV   A,[X+3]
    1924: 01 01    ADD   A,0x1
    1926: 53 39    MOV   [__r3],A
    1928: 52 02    MOV   A,[X+2]
    192A: 09 00    ADC   A,0x0
    192C: 53 3A    MOV   [__r2],A
    192E: 52 01    MOV   A,[X+1]
    1930: 09 00    ADC   A,0x0
    1932: 53 3B    MOV   [__r1],A
    1934: 52 00    MOV   A,[X+0]
    1936: 09 00    ADC   A,0x0
    1938: 53 3C    MOV   [__r0],A
    193A: 54 00    MOV   [X+0],A
    193C: 51 3B    MOV   A,[__r1]
    193E: 54 01    MOV   [X+1],A
    1940: 51 3A    MOV   A,[__r2]
    1942: 54 02    MOV   [X+2],A
    1944: 51 39    MOV   A,[__r3]
    1946: 54 03    MOV   [X+3],A
    1948: 51 3C    MOV   A,[__r0]
    194A: 08       PUSH  A
    194B: 51 3B    MOV   A,[__r1]
    194D: 08       PUSH  A
    194E: 51 3A    MOV   A,[__r2]
    1950: 08       PUSH  A
    1951: 51 39    MOV   A,[__r3]
    1953: 08       PUSH  A
    1954: 7C 13 F5 LCALL 0x13F5
    1957: 18       POP   A
    1958: 53 39    MOV   [__r3],A
    195A: 18       POP   A
    195B: 53 3A    MOV   [__r2],A
    195D: 18       POP   A
    195E: 53 3B    MOV   [__r1],A
    1960: 18       POP   A
    1961: 53 3C    MOV   [__r0],A
    1963: 80 1F    JMP   0x1983
    1965: 62 D0 00 MOV   REG[0xD0],0x0
    1968: 52 00    MOV   A,[X+0]
    196A: 08       PUSH  A
    196B: 52 01    MOV   A,[X+1]
    196D: 08       PUSH  A
    196E: 52 02    MOV   A,[X+2]
    1970: 08       PUSH  A
    1971: 52 03    MOV   A,[X+3]
    1973: 08       PUSH  A
    1974: 7C 13 F5 LCALL 0x13F5
    1977: 18       POP   A
    1978: 53 39    MOV   [__r3],A
    197A: 18       POP   A
    197B: 53 3A    MOV   [__r2],A
    197D: 18       POP   A
    197E: 53 3B    MOV   [__r1],A
    1980: 18       POP   A
    1981: 53 3C    MOV   [__r0],A
    1983: 38 F8    ADD   SP,0xF8
    1985: 20       POP   X
    1986: 7F       RET   
__csdepi:
    1987: 10       PUSH  X
    1988: 4F       MOV   X,SP
    1989: 62 D0 00 MOV   REG[0xD0],0x0
    198C: 51 48    MOV   A,[iData+3]
    198E: 08       PUSH  A
    198F: 51 47    MOV   A,[iData+2]
    1991: 62 D0 00 MOV   REG[0xD0],0x0
    1994: 53 3C    MOV   [__r0],A
    1996: 18       POP   A
    1997: 53 3B    MOV   [__r1],A
    1999: 01 01    ADD   A,0x1
    199B: 62 D0 00 MOV   REG[0xD0],0x0
    199E: 53 48    MOV   [iData+3],A
    19A0: 62 D0 00 MOV   REG[0xD0],0x0
    19A3: 51 3C    MOV   A,[__r0]
    19A5: 09 00    ADC   A,0x0
    19A7: 62 D0 00 MOV   REG[0xD0],0x0
    19AA: 53 47    MOV   [iData+2],A
    19AC: 62 D0 00 MOV   REG[0xD0],0x0
    19AF: 51 3C    MOV   A,[__r0]
    19B1: 60 D5    MOV   REG[0xD5],A
    19B3: 52 FC    MOV   A,[X-4]
    19B5: 3F 3B    MVI   [__r1],A
    19B7: 20       POP   X
    19B8: 7F       RET   
_csprintf:
    19B9: 10       PUSH  X
    19BA: 4F       MOV   X,SP
    19BB: 38 02    ADD   SP,0x2
    19BD: 62 D0 00 MOV   REG[0xD0],0x0
    19C0: 52 FC    MOV   A,[X-4]
    19C2: 53 48    MOV   [iData+3],A
    19C4: 52 FB    MOV   A,[X-5]
    19C6: 53 47    MOV   [iData+2],A
    19C8: 62 D0 00 MOV   REG[0xD0],0x0
    19CB: 5A 3B    MOV   [__r1],X
    19CD: 16 3B 07 SUB   [__r1],0x7
    19D0: 51 3B    MOV   A,[__r1]
    19D2: 54 01    MOV   [X+1],A
    19D4: 56 00 07 MOV   [X+0],0x7
    19D7: 52 00    MOV   A,[X+0]
    19D9: 08       PUSH  A
    19DA: 52 01    MOV   A,[X+1]
    19DC: 08       PUSH  A
    19DD: 52 F9    MOV   A,[X-7]
    19DF: 08       PUSH  A
    19E0: 52 FA    MOV   A,[X-6]
    19E2: 08       PUSH  A
    19E3: 50 03    MOV   A,0x3
    19E5: 08       PUSH  A
    19E6: 50 CE    MOV   A,0xCE
    19E8: 08       PUSH  A
    19E9: 7C 1A 22 LCALL __cprint
    19EC: 38 FA    ADD   SP,0xFA
    19EE: 62 D0 00 MOV   REG[0xD0],0x0
    19F1: 51 48    MOV   A,[iData+3]
    19F3: 08       PUSH  A
    19F4: 51 47    MOV   A,[iData+2]
    19F6: 62 D0 00 MOV   REG[0xD0],0x0
    19F9: 53 3C    MOV   [__r0],A
    19FB: 18       POP   A
    19FC: 53 3B    MOV   [__r1],A
    19FE: 51 3C    MOV   A,[__r0]
    1A00: 60 D5    MOV   REG[0xD5],A
    1A02: 50 00    MOV   A,0x0
    1A04: 3F 3B    MVI   [__r1],A
    1A06: 62 D0 00 MOV   REG[0xD0],0x0
    1A09: 51 48    MOV   A,[iData+3]
    1A0B: 13 FC    SUB   A,[X-4]
    1A0D: 62 D0 00 MOV   REG[0xD0],0x0
    1A10: 53 3B    MOV   [__r1],A
    1A12: 62 D0 00 MOV   REG[0xD0],0x0
    1A15: 51 47    MOV   A,[iData+2]
    1A17: 1B FB    SBB   A,[X-5]
    1A19: 62 D0 00 MOV   REG[0xD0],0x0
    1A1C: 53 3C    MOV   [__r0],A
    1A1E: 38 FE    ADD   SP,0xFE
    1A20: 20       POP   X
    1A21: 7F       RET   
__cprint:
    1A22: 10       PUSH  X
    1A23: 4F       MOV   X,SP
    1A24: 38 11    ADD   SP,0x11
    1A26: 56 05 00 MOV   [X+5],0x0
    1A29: 56 04 00 MOV   [X+4],0x0
    1A2C: 83 C7    JMP   0x1DF4
    1A2E: 62 D0 00 MOV   REG[0xD0],0x0
    1A31: 52 FA    MOV   A,[X-6]
    1A33: 53 3B    MOV   [__r1],A
    1A35: 52 F9    MOV   A,[X-7]
    1A37: 10       PUSH  X
    1A38: 58 3B    MOV   X,[__r1]
    1A3A: 28       ROMX  
    1A3B: 20       POP   X
    1A3C: 39 25    CMP   A,0x25
    1A3E: A0 23    JZ    0x1A62
    1A40: 52 FA    MOV   A,[X-6]
    1A42: 53 3B    MOV   [__r1],A
    1A44: 52 F9    MOV   A,[X-7]
    1A46: 10       PUSH  X
    1A47: 58 3B    MOV   X,[__r1]
    1A49: 28       ROMX  
    1A4A: 20       POP   X
    1A4B: 10       PUSH  X
    1A4C: 08       PUSH  A
    1A4D: 52 FC    MOV   A,[X-4]
    1A4F: 53 3B    MOV   [__r1],A
    1A51: 52 FB    MOV   A,[X-5]
    1A53: 58 3B    MOV   X,[__r1]
    1A55: 7C 14 9E LCALL __plcall
    1A58: 38 FF    ADD   SP,0xFF
    1A5A: 20       POP   X
    1A5B: 77 05    INC   [X+5]
    1A5D: 0F 04 00 ADC   [X+4],0x0
    1A60: 83 8E    JMP   0x1DEF
    1A62: 56 0A 00 MOV   [X+10],0x0
    1A65: 56 09 00 MOV   [X+9],0x0
    1A68: 56 07 08 MOV   [X+7],0x8
    1A6B: 56 06 00 MOV   [X+6],0x0
    1A6E: 56 08 20 MOV   [X+8],0x20
    1A71: 77 FA    INC   [X-6]
    1A73: 0F F9 00 ADC   [X-7],0x0
    1A76: 62 D0 00 MOV   REG[0xD0],0x0
    1A79: 52 FA    MOV   A,[X-6]
    1A7B: 53 3B    MOV   [__r1],A
    1A7D: 52 F9    MOV   A,[X-7]
    1A7F: 10       PUSH  X
    1A80: 58 3B    MOV   X,[__r1]
    1A82: 28       ROMX  
    1A83: 20       POP   X
    1A84: 54 10    MOV   [X+16],A
    1A86: 56 0F 00 MOV   [X+15],0x0
    1A89: 52 10    MOV   A,[X+16]
    1A8B: 11 58    SUB   A,0x58
    1A8D: 53 33    MOV   [__rY],A
    1A8F: 52 0F    MOV   A,[X+15]
    1A91: 31 80    XOR   A,0x80
    1A93: 19 80    SBB   A,0x80
    1A95: 2A 33    OR    A,[__rY]
    1A97: A0 ED    JZ    0x1B85
    1A99: D0 22    JNC   0x1ABC
    1A9B: 52 10    MOV   A,[X+16]
    1A9D: 11 45    SUB   A,0x45
    1A9F: 62 D0 00 MOV   REG[0xD0],0x0
    1AA2: 53 33    MOV   [__rY],A
    1AA4: 52 0F    MOV   A,[X+15]
    1AA6: 31 80    XOR   A,0x80
    1AA8: 19 80    SBB   A,0x80
    1AAA: C0 83    JC    0x1B2E
    1AAC: 2A 33    OR    A,[__rY]
    1AAE: A3 38    JZ    0x1DE7
    1AB0: 3D 0F 00 CMP   [X+15],0x0
    1AB3: B0 06    JNZ   0x1ABA
    1AB5: 3D 10 53 CMP   [X+16],0x53
    1AB8: A2 32    JZ    0x1CEB
    1ABA: 80 73    JMP   0x1B2E
    1ABC: 3D 0F 00 CMP   [X+15],0x0
    1ABF: B0 06    JNZ   0x1AC6
    1AC1: 3D 10 63 CMP   [X+16],0x63
    1AC4: A1 F6    JZ    0x1CBB
    1AC6: 3D 0F 00 CMP   [X+15],0x0
    1AC9: B0 06    JNZ   0x1AD0
    1ACB: 3D 10 64 CMP   [X+16],0x64
    1ACE: A0 84    JZ    0x1B53
    1AD0: 3D 0F 00 CMP   [X+15],0x0
    1AD3: B0 06    JNZ   0x1ADA
    1AD5: 3D 10 65 CMP   [X+16],0x65
    1AD8: A3 0E    JZ    0x1DE7
    1ADA: 3D 0F 00 CMP   [X+15],0x0
    1ADD: B0 06    JNZ   0x1AE4
    1ADF: 3D 10 66 CMP   [X+16],0x66
    1AE2: A3 04    JZ    0x1DE7
    1AE4: 3D 0F 00 CMP   [X+15],0x0
    1AE7: B0 06    JNZ   0x1AEE
    1AE9: 3D 10 69 CMP   [X+16],0x69
    1AEC: A0 66    JZ    0x1B53
    1AEE: 3D 0F 00 CMP   [X+15],0x0
    1AF1: B0 06    JNZ   0x1AF8
    1AF3: 3D 10 6F CMP   [X+16],0x6F
    1AF6: A0 8E    JZ    0x1B85
    1AF8: 3D 0F 00 CMP   [X+15],0x0
    1AFB: B0 06    JNZ   0x1B02
    1AFD: 3D 10 70 CMP   [X+16],0x70
    1B00: A0 84    JZ    0x1B85
    1B02: 52 10    MOV   A,[X+16]
    1B04: 11 63    SUB   A,0x63
    1B06: 52 0F    MOV   A,[X+15]
    1B08: 31 80    XOR   A,0x80
    1B0A: 19 80    SBB   A,0x80
    1B0C: C0 21    JC    0x1B2E
    1B0E: 3D 0F 00 CMP   [X+15],0x0
    1B11: B0 06    JNZ   0x1B18
    1B13: 3D 10 73 CMP   [X+16],0x73
    1B16: A2 4A    JZ    0x1D61
    1B18: 3D 0F 00 CMP   [X+15],0x0
    1B1B: B0 06    JNZ   0x1B22
    1B1D: 3D 10 75 CMP   [X+16],0x75
    1B20: A0 64    JZ    0x1B85
    1B22: 3D 0F 00 CMP   [X+15],0x0
    1B25: B0 06    JNZ   0x1B2C
    1B27: 3D 10 78 CMP   [X+16],0x78
    1B2A: A0 5A    JZ    0x1B85
    1B2C: 80 01    JMP   0x1B2E
    1B2E: 62 D0 00 MOV   REG[0xD0],0x0
    1B31: 52 FA    MOV   A,[X-6]
    1B33: 53 3B    MOV   [__r1],A
    1B35: 52 F9    MOV   A,[X-7]
    1B37: 10       PUSH  X
    1B38: 58 3B    MOV   X,[__r1]
    1B3A: 28       ROMX  
    1B3B: 20       POP   X
    1B3C: 10       PUSH  X
    1B3D: 08       PUSH  A
    1B3E: 52 FC    MOV   A,[X-4]
    1B40: 53 3B    MOV   [__r1],A
    1B42: 52 FB    MOV   A,[X-5]
    1B44: 58 3B    MOV   X,[__r1]
    1B46: 7C 14 9E LCALL __plcall
    1B49: 38 FF    ADD   SP,0xFF
    1B4B: 20       POP   X
    1B4C: 77 05    INC   [X+5]
    1B4E: 0F 04 00 ADC   [X+4],0x0
    1B51: 82 9D    JMP   0x1DEF
    1B53: 07 F8 FE ADD   [X-8],0xFE
    1B56: 0F F7 FF ADC   [X-9],0xFF
    1B59: 62 D0 00 MOV   REG[0xD0],0x0
    1B5C: 52 F8    MOV   A,[X-8]
    1B5E: 53 3B    MOV   [__r1],A
    1B60: 52 F7    MOV   A,[X-9]
    1B62: 60 D4    MOV   REG[0xD4],A
    1B64: 3E 3B    MVI   A,[__r1]
    1B66: 54 0B    MOV   [X+11],A
    1B68: 3E 3B    MVI   A,[__r1]
    1B6A: 54 0C    MOV   [X+12],A
    1B6C: 50 00    MOV   A,0x0
    1B6E: 08       PUSH  A
    1B6F: 50 0A    MOV   A,0xA
    1B71: 08       PUSH  A
    1B72: 52 0B    MOV   A,[X+11]
    1B74: 08       PUSH  A
    1B75: 52 0C    MOV   A,[X+12]
    1B77: 08       PUSH  A
    1B78: 52 06    MOV   A,[X+6]
    1B7A: 08       PUSH  A
    1B7B: 52 07    MOV   A,[X+7]
    1B7D: 08       PUSH  A
    1B7E: 7C 14 AA LCALL _itoa
    1B81: 38 FA    ADD   SP,0xFA
    1B83: 81 2F    JMP   0x1CB3
    1B85: 07 F8 FE ADD   [X-8],0xFE
    1B88: 0F F7 FF ADC   [X-9],0xFF
    1B8B: 62 D0 00 MOV   REG[0xD0],0x0
    1B8E: 52 F8    MOV   A,[X-8]
    1B90: 53 3B    MOV   [__r1],A
    1B92: 52 F7    MOV   A,[X-9]
    1B94: 60 D4    MOV   REG[0xD4],A
    1B96: 3E 3B    MVI   A,[__r1]
    1B98: 53 3C    MOV   [__r0],A
    1B9A: 3E 3B    MVI   A,[__r1]
    1B9C: 54 0C    MOV   [X+12],A
    1B9E: 51 3C    MOV   A,[__r0]
    1BA0: 54 0B    MOV   [X+11],A
    1BA2: 52 FA    MOV   A,[X-6]
    1BA4: 53 3B    MOV   [__r1],A
    1BA6: 52 F9    MOV   A,[X-7]
    1BA8: 10       PUSH  X
    1BA9: 58 3B    MOV   X,[__r1]
    1BAB: 28       ROMX  
    1BAC: 20       POP   X
    1BAD: 39 75    CMP   A,0x75
    1BAF: B0 1A    JNZ   0x1BCA
    1BB1: 50 00    MOV   A,0x0
    1BB3: 08       PUSH  A
    1BB4: 50 0A    MOV   A,0xA
    1BB6: 08       PUSH  A
    1BB7: 52 0B    MOV   A,[X+11]
    1BB9: 08       PUSH  A
    1BBA: 52 0C    MOV   A,[X+12]
    1BBC: 08       PUSH  A
    1BBD: 52 06    MOV   A,[X+6]
    1BBF: 08       PUSH  A
    1BC0: 52 07    MOV   A,[X+7]
    1BC2: 08       PUSH  A
    1BC3: 7C 16 83 LCALL _utoa
    1BC6: 38 FA    ADD   SP,0xFA
    1BC8: 80 EA    JMP   0x1CB3
    1BCA: 62 D0 00 MOV   REG[0xD0],0x0
    1BCD: 52 FA    MOV   A,[X-6]
    1BCF: 53 3B    MOV   [__r1],A
    1BD1: 52 F9    MOV   A,[X-7]
    1BD3: 10       PUSH  X
    1BD4: 58 3B    MOV   X,[__r1]
    1BD6: 28       ROMX  
    1BD7: 20       POP   X
    1BD8: 39 6F    CMP   A,0x6F
    1BDA: B0 1A    JNZ   0x1BF5
    1BDC: 50 00    MOV   A,0x0
    1BDE: 08       PUSH  A
    1BDF: 50 08    MOV   A,0x8
    1BE1: 08       PUSH  A
    1BE2: 52 0B    MOV   A,[X+11]
    1BE4: 08       PUSH  A
    1BE5: 52 0C    MOV   A,[X+12]
    1BE7: 08       PUSH  A
    1BE8: 52 06    MOV   A,[X+6]
    1BEA: 08       PUSH  A
    1BEB: 52 07    MOV   A,[X+7]
    1BED: 08       PUSH  A
    1BEE: 7C 16 83 LCALL _utoa
    1BF1: 38 FA    ADD   SP,0xFA
    1BF3: 80 BF    JMP   0x1CB3
    1BF5: 62 D0 00 MOV   REG[0xD0],0x0
    1BF8: 52 FA    MOV   A,[X-6]
    1BFA: 53 3B    MOV   [__r1],A
    1BFC: 52 F9    MOV   A,[X-7]
    1BFE: 10       PUSH  X
    1BFF: 58 3B    MOV   X,[__r1]
    1C01: 28       ROMX  
    1C02: 20       POP   X
    1C03: 39 70    CMP   A,0x70
    1C05: B0 39    JNZ   0x1C3F
    1C07: 52 07    MOV   A,[X+7]
    1C09: 53 3B    MOV   [__r1],A
    1C0B: 52 06    MOV   A,[X+6]
    1C0D: 53 3C    MOV   [__r0],A
    1C0F: 51 3B    MOV   A,[__r1]
    1C11: 01 01    ADD   A,0x1
    1C13: 54 07    MOV   [X+7],A
    1C15: 51 3C    MOV   A,[__r0]
    1C17: 09 00    ADC   A,0x0
    1C19: 54 06    MOV   [X+6],A
    1C1B: 51 3C    MOV   A,[__r0]
    1C1D: 60 D5    MOV   REG[0xD5],A
    1C1F: 50 30    MOV   A,0x30
    1C21: 3F 3B    MVI   [__r1],A
    1C23: 52 07    MOV   A,[X+7]
    1C25: 53 3B    MOV   [__r1],A
    1C27: 52 06    MOV   A,[X+6]
    1C29: 53 3C    MOV   [__r0],A
    1C2B: 51 3B    MOV   A,[__r1]
    1C2D: 01 01    ADD   A,0x1
    1C2F: 54 07    MOV   [X+7],A
    1C31: 51 3C    MOV   A,[__r0]
    1C33: 09 00    ADC   A,0x0
    1C35: 54 06    MOV   [X+6],A
    1C37: 51 3C    MOV   A,[__r0]
    1C39: 60 D5    MOV   REG[0xD5],A
    1C3B: 50 78    MOV   A,0x78
    1C3D: 3F 3B    MVI   [__r1],A
    1C3F: 50 00    MOV   A,0x0
    1C41: 08       PUSH  A
    1C42: 50 10    MOV   A,0x10
    1C44: 08       PUSH  A
    1C45: 52 0B    MOV   A,[X+11]
    1C47: 08       PUSH  A
    1C48: 52 0C    MOV   A,[X+12]
    1C4A: 08       PUSH  A
    1C4B: 52 06    MOV   A,[X+6]
    1C4D: 08       PUSH  A
    1C4E: 52 07    MOV   A,[X+7]
    1C50: 08       PUSH  A
    1C51: 7C 16 83 LCALL _utoa
    1C54: 38 FA    ADD   SP,0xFA
    1C56: 62 D0 00 MOV   REG[0xD0],0x0
    1C59: 52 FA    MOV   A,[X-6]
    1C5B: 53 3B    MOV   [__r1],A
    1C5D: 52 F9    MOV   A,[X-7]
    1C5F: 10       PUSH  X
    1C60: 58 3B    MOV   X,[__r1]
    1C62: 28       ROMX  
    1C63: 20       POP   X
    1C64: 39 58    CMP   A,0x58
    1C66: B0 4C    JNZ   0x1CB3
    1C68: 56 01 08 MOV   [X+1],0x8
    1C6B: 56 00 00 MOV   [X+0],0x0
    1C6E: 80 33    JMP   0x1CA2
    1C70: 62 D0 00 MOV   REG[0xD0],0x0
    1C73: 52 01    MOV   A,[X+1]
    1C75: 53 3B    MOV   [__r1],A
    1C77: 52 00    MOV   A,[X+0]
    1C79: 60 D4    MOV   REG[0xD4],A
    1C7B: 3E 3B    MVI   A,[__r1]
    1C7D: 53 3B    MOV   [__r1],A
    1C7F: 50 00    MOV   A,0x0
    1C81: 08       PUSH  A
    1C82: 51 3B    MOV   A,[__r1]
    1C84: 08       PUSH  A
    1C85: 7C 18 29 LCALL _toupper
    1C88: 38 FE    ADD   SP,0xFE
    1C8A: 62 D0 00 MOV   REG[0xD0],0x0
    1C8D: 51 3B    MOV   A,[__r1]
    1C8F: 53 3C    MOV   [__r0],A
    1C91: 52 01    MOV   A,[X+1]
    1C93: 53 39    MOV   [__r3],A
    1C95: 52 00    MOV   A,[X+0]
    1C97: 60 D5    MOV   REG[0xD5],A
    1C99: 51 3C    MOV   A,[__r0]
    1C9B: 3F 39    MVI   [__r3],A
    1C9D: 77 01    INC   [X+1]
    1C9F: 0F 00 00 ADC   [X+0],0x0
    1CA2: 62 D0 00 MOV   REG[0xD0],0x0
    1CA5: 52 01    MOV   A,[X+1]
    1CA7: 53 3B    MOV   [__r1],A
    1CA9: 52 00    MOV   A,[X+0]
    1CAB: 60 D4    MOV   REG[0xD4],A
    1CAD: 3E 3B    MVI   A,[__r1]
    1CAF: 39 00    CMP   A,0x0
    1CB1: BF BE    JNZ   0x1C70
    1CB3: 56 01 08 MOV   [X+1],0x8
    1CB6: 56 00 00 MOV   [X+0],0x0
    1CB9: 80 D2    JMP   0x1D8C
    1CBB: 07 F8 FE ADD   [X-8],0xFE
    1CBE: 0F F7 FF ADC   [X-9],0xFF
    1CC1: 62 D0 00 MOV   REG[0xD0],0x0
    1CC4: 52 F8    MOV   A,[X-8]
    1CC6: 53 3B    MOV   [__r1],A
    1CC8: 52 F7    MOV   A,[X-9]
    1CCA: 60 D4    MOV   REG[0xD4],A
    1CCC: 3E 3B    MVI   A,[__r1]
    1CCE: 3E 3B    MVI   A,[__r1]
    1CD0: 54 0D    MOV   [X+13],A
    1CD2: 10       PUSH  X
    1CD3: 52 0D    MOV   A,[X+13]
    1CD5: 08       PUSH  A
    1CD6: 52 FC    MOV   A,[X-4]
    1CD8: 53 3B    MOV   [__r1],A
    1CDA: 52 FB    MOV   A,[X-5]
    1CDC: 58 3B    MOV   X,[__r1]
    1CDE: 7C 14 9E LCALL __plcall
    1CE1: 38 FF    ADD   SP,0xFF
    1CE3: 20       POP   X
    1CE4: 77 05    INC   [X+5]
    1CE6: 0F 04 00 ADC   [X+4],0x0
    1CE9: 81 05    JMP   0x1DEF
    1CEB: 07 F8 FE ADD   [X-8],0xFE
    1CEE: 0F F7 FF ADC   [X-9],0xFF
    1CF1: 62 D0 00 MOV   REG[0xD0],0x0
    1CF4: 52 F8    MOV   A,[X-8]
    1CF6: 53 3B    MOV   [__r1],A
    1CF8: 52 F7    MOV   A,[X-9]
    1CFA: 60 D4    MOV   REG[0xD4],A
    1CFC: 3E 3B    MVI   A,[__r1]
    1CFE: 54 02    MOV   [X+2],A
    1D00: 3E 3B    MVI   A,[__r1]
    1D02: 54 03    MOV   [X+3],A
    1D04: 3D 08 2D CMP   [X+8],0x2D
    1D07: B0 45    JNZ   0x1D4D
    1D09: 10       PUSH  X
    1D0A: 50 2D    MOV   A,0x2D
    1D0C: 08       PUSH  A
    1D0D: 62 D0 00 MOV   REG[0xD0],0x0
    1D10: 52 FC    MOV   A,[X-4]
    1D12: 53 3B    MOV   [__r1],A
    1D14: 52 FB    MOV   A,[X-5]
    1D16: 58 3B    MOV   X,[__r1]
    1D18: 7C 14 9E LCALL __plcall
    1D1B: 38 FF    ADD   SP,0xFF
    1D1D: 20       POP   X
    1D1E: 77 05    INC   [X+5]
    1D20: 0F 04 00 ADC   [X+4],0x0
    1D23: 80 29    JMP   0x1D4D
    1D25: 62 D0 00 MOV   REG[0xD0],0x0
    1D28: 52 03    MOV   A,[X+3]
    1D2A: 53 3B    MOV   [__r1],A
    1D2C: 52 02    MOV   A,[X+2]
    1D2E: 10       PUSH  X
    1D2F: 58 3B    MOV   X,[__r1]
    1D31: 28       ROMX  
    1D32: 20       POP   X
    1D33: 10       PUSH  X
    1D34: 08       PUSH  A
    1D35: 52 FC    MOV   A,[X-4]
    1D37: 53 3B    MOV   [__r1],A
    1D39: 52 FB    MOV   A,[X-5]
    1D3B: 58 3B    MOV   X,[__r1]
    1D3D: 7C 14 9E LCALL __plcall
    1D40: 38 FF    ADD   SP,0xFF
    1D42: 20       POP   X
    1D43: 77 05    INC   [X+5]
    1D45: 0F 04 00 ADC   [X+4],0x0
    1D48: 77 03    INC   [X+3]
    1D4A: 0F 02 00 ADC   [X+2],0x0
    1D4D: 62 D0 00 MOV   REG[0xD0],0x0
    1D50: 52 03    MOV   A,[X+3]
    1D52: 53 3B    MOV   [__r1],A
    1D54: 52 02    MOV   A,[X+2]
    1D56: 10       PUSH  X
    1D57: 58 3B    MOV   X,[__r1]
    1D59: 28       ROMX  
    1D5A: 20       POP   X
    1D5B: 39 00    CMP   A,0x0
    1D5D: BF C7    JNZ   0x1D25
    1D5F: 80 8F    JMP   0x1DEF
    1D61: 07 F8 FE ADD   [X-8],0xFE
    1D64: 0F F7 FF ADC   [X-9],0xFF
    1D67: 62 D0 00 MOV   REG[0xD0],0x0
    1D6A: 52 F8    MOV   A,[X-8]
    1D6C: 53 3B    MOV   [__r1],A
    1D6E: 52 F7    MOV   A,[X-9]
    1D70: 60 D4    MOV   REG[0xD4],A
    1D72: 3E 3B    MVI   A,[__r1]
    1D74: 54 00    MOV   [X+0],A
    1D76: 3E 3B    MVI   A,[__r1]
    1D78: 54 01    MOV   [X+1],A
    1D7A: 3D 00 00 CMP   [X+0],0x0
    1D7D: B0 0E    JNZ   0x1D8C
    1D7F: 3D 01 00 CMP   [X+1],0x0
    1D82: B0 09    JNZ   0x1D8C
    1D84: 56 03 58 MOV   [X+3],0x58
    1D87: 56 02 03 MOV   [X+2],0x3
    1D8A: 8F 79    JMP   0x1D04
    1D8C: 3D 08 2D CMP   [X+8],0x2D
    1D8F: B0 44    JNZ   0x1DD4
    1D91: 10       PUSH  X
    1D92: 50 2D    MOV   A,0x2D
    1D94: 08       PUSH  A
    1D95: 62 D0 00 MOV   REG[0xD0],0x0
    1D98: 52 FC    MOV   A,[X-4]
    1D9A: 53 3B    MOV   [__r1],A
    1D9C: 52 FB    MOV   A,[X-5]
    1D9E: 58 3B    MOV   X,[__r1]
    1DA0: 7C 14 9E LCALL __plcall
    1DA3: 38 FF    ADD   SP,0xFF
    1DA5: 20       POP   X
    1DA6: 77 05    INC   [X+5]
    1DA8: 0F 04 00 ADC   [X+4],0x0
    1DAB: 80 28    JMP   0x1DD4
    1DAD: 62 D0 00 MOV   REG[0xD0],0x0
    1DB0: 52 01    MOV   A,[X+1]
    1DB2: 53 3B    MOV   [__r1],A
    1DB4: 52 00    MOV   A,[X+0]
    1DB6: 60 D4    MOV   REG[0xD4],A
    1DB8: 3E 3B    MVI   A,[__r1]
    1DBA: 10       PUSH  X
    1DBB: 08       PUSH  A
    1DBC: 52 FC    MOV   A,[X-4]
    1DBE: 53 3B    MOV   [__r1],A
    1DC0: 52 FB    MOV   A,[X-5]
    1DC2: 58 3B    MOV   X,[__r1]
    1DC4: 7C 14 9E LCALL __plcall
    1DC7: 38 FF    ADD   SP,0xFF
    1DC9: 20       POP   X
    1DCA: 77 05    INC   [X+5]
    1DCC: 0F 04 00 ADC   [X+4],0x0
    1DCF: 77 01    INC   [X+1]
    1DD1: 0F 00 00 ADC   [X+0],0x0
    1DD4: 62 D0 00 MOV   REG[0xD0],0x0
    1DD7: 52 01    MOV   A,[X+1]
    1DD9: 53 3B    MOV   [__r1],A
    1DDB: 52 00    MOV   A,[X+0]
    1DDD: 60 D4    MOV   REG[0xD4],A
    1DDF: 3E 3B    MVI   A,[__r1]
    1DE1: 39 00    CMP   A,0x0
    1DE3: BF C9    JNZ   0x1DAD
    1DE5: 80 09    JMP   0x1DEF
    1DE7: 56 03 6A MOV   [X+3],0x6A
    1DEA: 56 02 03 MOV   [X+2],0x3
    1DED: 8F 16    JMP   0x1D04
    1DEF: 77 FA    INC   [X-6]
    1DF1: 0F F9 00 ADC   [X-7],0x0
    1DF4: 62 D0 00 MOV   REG[0xD0],0x0
    1DF7: 52 FA    MOV   A,[X-6]
    1DF9: 53 3B    MOV   [__r1],A
    1DFB: 52 F9    MOV   A,[X-7]
    1DFD: 10       PUSH  X
    1DFE: 58 3B    MOV   X,[__r1]
    1E00: 28       ROMX  
    1E01: 20       POP   X
    1E02: 39 00    CMP   A,0x0
    1E04: BC 29    JNZ   0x1A2E
    1E06: 52 05    MOV   A,[X+5]
    1E08: 53 3B    MOV   [__r1],A
    1E0A: 52 04    MOV   A,[X+4]
    1E0C: 53 3C    MOV   [__r0],A
    1E0E: 38 EF    ADD   SP,0xEF
    1E10: 20       POP   X
    1E11: 7F       RET   
    1E12: 10       PUSH  X
    1E13: 4F       MOV   X,SP
    1E14: 38 04    ADD   SP,0x4
    1E16: 80 06    JMP   0x1E1D
    1E18: 77 FC    INC   [X-4]
    1E1A: 0F FB 00 ADC   [X-5],0x0
    1E1D: 62 D0 00 MOV   REG[0xD0],0x0
    1E20: 52 FC    MOV   A,[X-4]
    1E22: 53 3B    MOV   [__r1],A
    1E24: 52 FB    MOV   A,[X-5]
    1E26: 10       PUSH  X
    1E27: 58 3B    MOV   X,[__r1]
    1E29: 28       ROMX  
    1E2A: 20       POP   X
    1E2B: 53 3B    MOV   [__r1],A
    1E2D: 50 00    MOV   A,0x0
    1E2F: 08       PUSH  A
    1E30: 51 3B    MOV   A,[__r1]
    1E32: 08       PUSH  A
    1E33: 7C 18 08 LCALL _isspace
    1E36: 38 FE    ADD   SP,0xFE
    1E38: 62 D0 00 MOV   REG[0xD0],0x0
    1E3B: 3C 3C 00 CMP   [__r0],0x0
    1E3E: BF D9    JNZ   0x1E18
    1E40: 3C 3B 00 CMP   [__r1],0x0
    1E43: BF D4    JNZ   0x1E18
    1E45: 56 03 00 MOV   [X+3],0x0
    1E48: 56 02 00 MOV   [X+2],0x0
    1E4B: 62 D0 00 MOV   REG[0xD0],0x0
    1E4E: 52 FC    MOV   A,[X-4]
    1E50: 53 3B    MOV   [__r1],A
    1E52: 52 FB    MOV   A,[X-5]
    1E54: 10       PUSH  X
    1E55: 58 3B    MOV   X,[__r1]
    1E57: 28       ROMX  
    1E58: 20       POP   X
    1E59: 39 2D    CMP   A,0x2D
    1E5B: B0 0E    JNZ   0x1E6A
    1E5D: 56 03 01 MOV   [X+3],0x1
    1E60: 56 02 00 MOV   [X+2],0x0
    1E63: 77 FC    INC   [X-4]
    1E65: 0F FB 00 ADC   [X-5],0x0
    1E68: 80 18    JMP   0x1E81
    1E6A: 62 D0 00 MOV   REG[0xD0],0x0
    1E6D: 52 FC    MOV   A,[X-4]
    1E6F: 53 3B    MOV   [__r1],A
    1E71: 52 FB    MOV   A,[X-5]
    1E73: 10       PUSH  X
    1E74: 58 3B    MOV   X,[__r1]
    1E76: 28       ROMX  
    1E77: 20       POP   X
    1E78: 39 2B    CMP   A,0x2B
    1E7A: B0 06    JNZ   0x1E81
    1E7C: 77 FC    INC   [X-4]
    1E7E: 0F FB 00 ADC   [X-5],0x0
    1E81: 56 01 00 MOV   [X+1],0x0
    1E84: 56 00 00 MOV   [X+0],0x0
    1E87: 80 7C    JMP   0x1F04
    1E89: 62 D0 00 MOV   REG[0xD0],0x0
    1E8C: 52 FC    MOV   A,[X-4]
    1E8E: 53 3B    MOV   [__r1],A
    1E90: 52 FB    MOV   A,[X-5]
    1E92: 53 3C    MOV   [__r0],A
    1E94: 51 3B    MOV   A,[__r1]
    1E96: 01 01    ADD   A,0x1
    1E98: 54 FC    MOV   [X-4],A
    1E9A: 51 3C    MOV   A,[__r0]
    1E9C: 09 00    ADC   A,0x0
    1E9E: 54 FB    MOV   [X-5],A
    1EA0: 52 01    MOV   A,[X+1]
    1EA2: 53 39    MOV   [__r3],A
    1EA4: 52 00    MOV   A,[X+0]
    1EA6: 53 3A    MOV   [__r2],A
    1EA8: 55 37 0A MOV   [__r5],0xA
    1EAB: 55 38 00 MOV   [__r4],0x0
    1EAE: 55 34 00 MOV   [__rX],0x0
    1EB1: 55 33 00 MOV   [__rY],0x0
    1EB4: 3C 38 00 CMP   [__r4],0x0
    1EB7: B0 06    JNZ   0x1EBE
    1EB9: 3C 37 00 CMP   [__r5],0x0
    1EBC: A0 1A    JZ    0x1ED7
    1EBE: 70 FB    AND   F,0xFB
    1EC0: 6E 38    RRC   [__r4]
    1EC2: 6E 37    RRC   [__r5]
    1EC4: D0 0C    JNC   0x1ED1
    1EC6: 62 D0 00 MOV   REG[0xD0],0x0
    1EC9: 51 39    MOV   A,[__r3]
    1ECB: 04 34    ADD   [__rX],A
    1ECD: 51 3A    MOV   A,[__r2]
    1ECF: 0C 33    ADC   [__rY],A
    1ED1: 65 39    ASL   [__r3]
    1ED3: 6B 3A    RLC   [__r2]
    1ED5: 8F DE    JMP   0x1EB4
    1ED7: 5F 39 34 MOV   [__r3],[__rX]
    1EDA: 5F 3A 33 MOV   [__r2],[__rY]
    1EDD: 62 D0 00 MOV   REG[0xD0],0x0
    1EE0: 51 3C    MOV   A,[__r0]
    1EE2: 10       PUSH  X
    1EE3: 58 3B    MOV   X,[__r1]
    1EE5: 28       ROMX  
    1EE6: 20       POP   X
    1EE7: 53 3B    MOV   [__r1],A
    1EE9: 55 3C 00 MOV   [__r0],0x0
    1EEC: 51 39    MOV   A,[__r3]
    1EEE: 02 3B    ADD   A,[__r1]
    1EF0: 53 3B    MOV   [__r1],A
    1EF2: 51 3A    MOV   A,[__r2]
    1EF4: 0A 3C    ADC   A,[__r0]
    1EF6: 53 3C    MOV   [__r0],A
    1EF8: 51 3B    MOV   A,[__r1]
    1EFA: 11 30    SUB   A,0x30
    1EFC: 54 01    MOV   [X+1],A
    1EFE: 51 3C    MOV   A,[__r0]
    1F00: 19 00    SBB   A,0x0
    1F02: 54 00    MOV   [X+0],A
    1F04: 62 D0 00 MOV   REG[0xD0],0x0
    1F07: 52 FC    MOV   A,[X-4]
    1F09: 53 3B    MOV   [__r1],A
    1F0B: 52 FB    MOV   A,[X-5]
    1F0D: 10       PUSH  X
    1F0E: 58 3B    MOV   X,[__r1]
    1F10: 28       ROMX  
    1F11: 20       POP   X
    1F12: 53 3B    MOV   [__r1],A
    1F14: 50 00    MOV   A,0x0
    1F16: 08       PUSH  A
    1F17: 51 3B    MOV   A,[__r1]
    1F19: 08       PUSH  A
    1F1A: 7C 17 C6 LCALL _isdigit
    1F1D: 38 FE    ADD   SP,0xFE
    1F1F: 62 D0 00 MOV   REG[0xD0],0x0
    1F22: 3C 3C 00 CMP   [__r0],0x0
    1F25: BF 63    JNZ   0x1E89
    1F27: 3C 3B 00 CMP   [__r1],0x0
    1F2A: BF 5E    JNZ   0x1E89
    1F2C: 3D 02 00 CMP   [X+2],0x0
    1F2F: B0 06    JNZ   0x1F36
    1F31: 3D 03 00 CMP   [X+3],0x0
    1F34: A0 14    JZ    0x1F49
    1F36: 62 D0 00 MOV   REG[0xD0],0x0
    1F39: 52 01    MOV   A,[X+1]
    1F3B: 73       CPL   A
    1F3C: 11 FF    SUB   A,0xFF
    1F3E: 53 3B    MOV   [__r1],A
    1F40: 52 00    MOV   A,[X+0]
    1F42: 73       CPL   A
    1F43: 19 FF    SBB   A,0xFF
    1F45: 53 3C    MOV   [__r0],A
    1F47: 80 0C    JMP   0x1F54
    1F49: 62 D0 00 MOV   REG[0xD0],0x0
    1F4C: 52 01    MOV   A,[X+1]
    1F4E: 53 3B    MOV   [__r1],A
    1F50: 52 00    MOV   A,[X+0]
    1F52: 53 3C    MOV   [__r0],A
    1F54: 38 FC    ADD   SP,0xFC
    1F56: 20       POP   X
    1F57: 7F       RET   
