//*****************************************************************************
//*****************************************************************************
//  FILENAME:  ADC.h
//  Version: 4.00, Updated on 2015/3/4 at 22:21:28
//  Generated by PSoC Designer 5.4.3191
//
//  DESCRIPTION:  ADCINCVR User Module C Language interface file.
//-----------------------------------------------------------------------------
//      Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
//*****************************************************************************
//*****************************************************************************
#ifndef ADC_INCLUDE
#define ADC_INCLUDE

#include <m8C.h>

//-------------------------------------------------
// Defines for ADC API's.
//-------------------------------------------------

// Power Setting Constants
#define ADC_OFF            0
#define ADC_LOWPOWER       1
#define ADC_MEDPOWER       2
#define ADC_HIGHPOWER      3

// Function Fastcall Pragmas
#pragma fastcall16 ADC_Start
#pragma fastcall16 ADC_SetPower
#pragma fastcall16 ADC_GetSamples
#pragma fastcall16 ADC_StopAD
#pragma fastcall16 ADC_Stop
#pragma fastcall16 ADC_fIsData
#pragma fastcall16 ADC_fIsDataAvailable
#pragma fastcall16 ADC_iGetData
#pragma fastcall16 ADC_iGetDataClearFlag
#pragma fastcall16 ADC_ClearFlag
#pragma fastcall16 ADC_SetResolution

//-------------------------------------------------
// Prototypes of the ADC API.
//-------------------------------------------------

extern void ADC_Start(BYTE bPower);
extern void ADC_SetPower(BYTE bPower);
extern void ADC_GetSamples(BYTE bNumSamples);
extern void ADC_StopAD(void);
extern void ADC_Stop(void);
extern CHAR ADC_fIsData(void);
extern CHAR ADC_fIsDataAvailable(void);
extern INT  ADC_iGetData(void);
extern INT  ADC_iGetDataClearFlag(void);
extern void ADC_ClearFlag(void);

extern void ADC_SetResolution(BYTE bResolution);

#define ADC_bNUMBITS  0x0c

//-------------------------------------------------
// Hardware Register Definitions
//-------------------------------------------------

// Integrator Block Register Definitions
#pragma ioport  ADC_bfAtoDcr0:  0x080
BYTE            ADC_bfAtoDcr0;
#pragma ioport  ADC_bfAtoDcr1:  0x081
BYTE            ADC_bfAtoDcr1;
#pragma ioport  ADC_bfAtoDcr2:  0x082
BYTE            ADC_bfAtoDcr2;
#pragma ioport  ADC_bfAtoDcr3:  0x083
BYTE            ADC_bfAtoDcr3;

// Counter Block Register Definitions
#pragma ioport  ADC_fCounterFN: 0x120
BYTE            ADC_fCounterFN;
#pragma ioport  ADC_fCounterSL: 0x121
BYTE            ADC_fCounterSL;
#pragma ioport  ADC_fCounterOS: 0x122
BYTE            ADC_fCounterOS;
#pragma ioport  ADC_bCount: 0x020
BYTE            ADC_bCount;
#pragma ioport  ADC_bPeriod:    0x021
BYTE            ADC_bPeriod;
#pragma ioport  ADC_bCompare:   0x022
BYTE            ADC_bCompare;
#pragma ioport  ADC_bCounter_CR0:   0x023
BYTE            ADC_bCounter_CR0;


// PWM16 Block Register Definitions
#pragma ioport  ADC_bfPWM_LSB_FN:   0x124
BYTE            ADC_bfPWM_LSB_FN;
#pragma ioport  ADC_bfPWM_MSB_FN:   0x128
BYTE            ADC_bfPWM_MSB_FN;
#pragma ioport  ADC_fPWM_LSB_CR0:   0x027
BYTE            ADC_fPWM_LSB_CR0;
#pragma ioport  ADC_fPWM_MSB_CR0:   0x02b
BYTE            ADC_fPWM_MSB_CR0;
#pragma ioport  ADC_bPWM_Count_MSB: 0x028
BYTE            ADC_bPWM_Count_MSB;
#pragma ioport  ADC_bPWM_Count_LSB: 0x024
BYTE            ADC_bPWM_Count_LSB;
#pragma ioport  ADC_bPWM_Period_MSB:    0x029
BYTE            ADC_bPWM_Period_MSB;
#pragma ioport  ADC_bPWM_Period_LSB:    0x025
BYTE            ADC_bPWM_Period_LSB;
#pragma ioport  ADC_bPWM_IntTime_MSB:   0x02a
BYTE            ADC_bPWM_IntTime_MSB;
#pragma ioport  ADC_bPWM_IntTime_LSB:   0x026
BYTE            ADC_bPWM_IntTime_LSB;
#pragma ioport  ADC_bfPWM_LSB_FN:   0x124
BYTE            ADC_bfPWM_LSB_FN;
#pragma ioport  ADC_bfPWM_MSB_FN:   0x128
BYTE            ADC_bfPWM_MSB_FN;

#endif
// end of file ADC.h
