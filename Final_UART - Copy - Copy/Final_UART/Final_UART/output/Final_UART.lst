FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 0E 4D LJMP  _ADC_CNT_ISR       (0149)     ljmp	_ADC_CNT_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 0E 50 LJMP  _ADC_PWM16_ISR     (0157)     ljmp	_ADC_PWM16_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 08 25 LJMP  _PWM8_Speaker_ISR  (0161)     ljmp	_PWM8_Speaker_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 18 7E LJMP  _Timer_ISR         (0177)     ljmp _Timer_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
0048: 7D 05 C6 LJMP  _UART_TX_ISR       (0189)     ljmp	_UART_TX_ISR
004B: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
004C: 7D 05 C7 LJMP  _UART_RX_ISR       (0193)     ljmp	_UART_RX_ISR
004F: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
0060: 7D 0C 82 LJMP  _I2CHW_ISR         (0213)     ljmp	_I2CHW_ISR
0063: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [fScaleFactor+5],0x0(0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [fScaleFactor+6],0x0(0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 05 5B LCALL 0x055B             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 01 MOV   REG[0xD0],0x1      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 04    MOV   A,0x4              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 52    MOV   X,0x52             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 89    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 89    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 89    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 88    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 89    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 89 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 88    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 88    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 89    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 89 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 88    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 18 FD LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0456: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_example_adc_lcd_Bank1
                                        (0019) export LoadConfigTBL_example_adc_lcd_Bank0
                                        (0020) export LoadConfigTBL_example_adc_lcd_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_example_adc_lcd_Bank0:
                                        (0023) ;  Instance name ADC, User Module ADCINCVR
                                        (0024) ;       Instance name ADC, Block Name ADC(ASC10)
                                        (0025) 	db		80h, 90h		;ADC_bfAtoDcr0       (ASC10CR0)
                                        (0026) 	db		81h, 00h		;ADC_bfAtoDcr1       (ASC10CR1)
                                        (0027) 	db		82h, 61h		;ADC_bfAtoDcr2       (ASC10CR2)
                                        (0028) 	db		83h, f0h		;ADC_bfAtoDcr3       (ASC10CR3)
                                        (0029) ;       Instance name ADC, Block Name CNT(DBB00)
                                        (0030) 	db		23h, 00h		;ADC_bCounter_CR0    (DBB00CR0)
                                        (0031) 	db		21h, 00h		;ADC_bPeriod         (DBB00DR1)
                                        (0032) 	db		22h, 00h		;ADC_bCompare        (DBB00DR2)
                                        (0033) ;       Instance name ADC, Block Name PWM16_LSB(DBB01)
                                        (0034) 	db		27h, 00h		;ADC_fPWM_LSB_CR0    (DBB01CR0)
                                        (0035) 	db		25h, 00h		;ADC_bPWM_Period_LSB (DBB01DR1)
                                        (0036) 	db		26h, 00h		;ADC_bPWM_IntTime_LSB(DBB01DR2)
                                        (0037) ;       Instance name ADC, Block Name PWM16_MSB(DCB02)
                                        (0038) 	db		2bh, 00h		;ADC_fPWM_MSB_CR0    (DCB02CR0)
                                        (0039) 	db		29h, 00h		;ADC_bPWM_Period_MSB (DCB02DR1)
                                        (0040) 	db		2ah, 00h		;ADC_bPWM_IntTime_MSB(DCB02DR2)
                                        (0041) ;  Instance name I2CHW, User Module I2CHW
                                        (0042) ;  Instance name LCD, User Module LCD
                                        (0043) ;  Instance name PGA, User Module PGA
                                        (0044) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0045) 	db		71h, feh		;PGA_GAIN_CR0(ACB00CR0)
                                        (0046) 	db		72h, 21h		;PGA_GAIN_CR1(ACB00CR1)
                                        (0047) 	db		73h, 20h		;PGA_GAIN_CR2(ACB00CR2)
                                        (0048) 	db		70h, 00h		;PGA_GAIN_CR3(ACB00CR3)
                                        (0049) ;  Instance name PWM8_Speaker, User Module PWM8
                                        (0050) ;       Instance name PWM8_Speaker, Block Name PWM8(DCB03)
                                        (0051) 	db		2fh, 00h		;PWM8_Speaker_CONTROL_REG(DCB03CR0)
                                        (0052) 	db		2dh, ffh		;PWM8_Speaker_PERIOD_REG(DCB03DR1)
                                        (0053) 	db		2eh, 28h		;PWM8_Speaker_COMPARE_REG(DCB03DR2)
                                        (0054) ;  Instance name Timer32_1, User Module Timer32
                                        (0055) ;       Instance name Timer32_1, Block Name TIMER32_ISB1(DBB11)
                                        (0056) 	db		37h, 00h		;Timer32_1_CONTROL_ISB1_REG(DBB11CR0)
                                        (0057) 	db		35h, 8ch		;Timer32_1_PERIOD_ISB1_REG(DBB11DR1)
                                        (0058) 	db		36h, 46h		;Timer32_1_COMPARE_ISB1_REG(DBB11DR2)
                                        (0059) ;       Instance name Timer32_1, Block Name TIMER32_ISB2(DCB12)
                                        (0060) 	db		3bh, 00h		;Timer32_1_CONTROL_ISB2_REG(DCB12CR0)
                                        (0061) 	db		39h, 86h		;Timer32_1_PERIOD_ISB2_REG(DCB12DR1)
                                        (0062) 	db		3ah, c3h		;Timer32_1_COMPARE_ISB2_REG(DCB12DR2)
                                        (0063) ;       Instance name Timer32_1, Block Name TIMER32_LSB(DBB10)
                                        (0064) 	db		33h, 00h		;Timer32_1_CONTROL_LSB_REG(DBB10CR0)
                                        (0065) 	db		31h, 00h		;Timer32_1_PERIOD_LSB_REG(DBB10DR1)
                                        (0066) 	db		32h, 00h		;Timer32_1_COMPARE_LSB_REG(DBB10DR2)
                                        (0067) ;       Instance name Timer32_1, Block Name TIMER32_MSB(DCB13)
                                        (0068) 	db		3fh, 04h		;Timer32_1_CONTROL_MSB_REG(DCB13CR0)
                                        (0069) 	db		3dh, 47h		;Timer32_1_PERIOD_MSB_REG(DCB13DR1)
                                        (0070) 	db		3eh, 23h		;Timer32_1_COMPARE_MSB_REG(DCB13DR2)
                                        (0071) ;  Instance name UART, User Module UART
                                        (0072) ;       Instance name UART, Block Name RX(DCB23)
                                        (0073) 	db		4fh, 00h		;UART_RX_CONTROL_REG(DCB23CR0)
                                        (0074) 	db		4dh, 00h		;UART_(DCB23DR1)
                                        (0075) 	db		4eh, 00h		;UART_RX_BUFFER_REG (DCB23DR2)
                                        (0076) ;       Instance name UART, Block Name TX(DCB22)
                                        (0077) 	db		4bh, 00h		;UART_TX_CONTROL_REG(DCB22CR0)
                                        (0078) 	db		49h, 00h		;UART_TX_BUFFER_REG (DCB22DR1)
                                        (0079) 	db		4ah, 00h		;UART_(DCB22DR2)
                                        (0080) ;  Global Register values Bank 0
                                        (0081) 	db		60h, 29h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0082) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0083) 	db		63h, 17h		; AnalogReferenceControl register (ARF_CR)
                                        (0084) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0085) 	db		e6h, 10h		; DecimatorControl_0 register (DEC_CR0)
                                        (0086) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0087) 	db		d6h, 04h		; I2CConfig register (I2C_CFG)
                                        (0088) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0089) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0090) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0091) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0092) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0093) 	db		b5h, 10h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0094) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0095) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0096) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0097) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0098) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0099) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0100) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0101) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0102) 	db		c0h, 01h		; Row_2_InputMux register (RDI2RI)
                                        (0103) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0104) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0105) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0106) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0107) 	db		c5h, 20h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0108) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0109) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0110) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0111) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0112) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0113) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0114) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0115) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0116) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0117) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0118) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0119) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0120) 	db		ffh
                                        (0121) LoadConfigTBL_example_adc_lcd_Bank1:
                                        (0122) ;  Instance name ADC, User Module ADCINCVR
                                        (0123) ;       Instance name ADC, Block Name ADC(ASC10)
                                        (0124) ;       Instance name ADC, Block Name CNT(DBB00)
                                        (0125) 	db		20h, 21h		;ADC_fCounterFN      (DBB00FN)
                                        (0126) 	db		21h, 45h		;ADC_fCounterSL      (DBB00IN)
                                        (0127) 	db		22h, 40h		;ADC_fCounterOS      (DBB00OU)
                                        (0128) ;       Instance name ADC, Block Name PWM16_LSB(DBB01)
                                        (0129) 	db		24h, 01h		;ADC_bfPWM_LSB_FN    (DBB01FN)
                                        (0130) 	db		25h, 15h		;ADC_(DBB01IN)
                                        (0131) 	db		26h, 40h		;ADC_(DBB01OU)
                                        (0132) ;       Instance name ADC, Block Name PWM16_MSB(DCB02)
                                        (0133) 	db		28h, 21h		;ADC_bfPWM_MSB_FN    (DCB02FN)
                                        (0134) 	db		29h, 35h		;ADC_(DCB02IN)
                                        (0135) 	db		2ah, 40h		;ADC_(DCB02OU)
                                        (0136) ;  Instance name I2CHW, User Module I2CHW
                                        (0137) ;  Instance name LCD, User Module LCD
                                        (0138) ;  Instance name PGA, User Module PGA
                                        (0139) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0140) ;  Instance name PWM8_Speaker, User Module PWM8
                                        (0141) ;       Instance name PWM8_Speaker, Block Name PWM8(DCB03)
                                        (0142) 	db		2ch, 31h		;PWM8_Speaker_FUNC_REG(DCB03FN)
                                        (0143) 	db		2dh, 16h		;PWM8_Speaker_INPUT_REG(DCB03IN)
                                        (0144) 	db		2eh, 45h		;PWM8_Speaker_OUTPUT_REG(DCB03OU)
                                        (0145) ;  Instance name Timer32_1, User Module Timer32
                                        (0146) ;       Instance name Timer32_1, Block Name TIMER32_ISB1(DBB11)
                                        (0147) 	db		34h, 00h		;Timer32_1_FUNC_ISB1_REG(DBB11FN)
                                        (0148) 	db		35h, 31h		;Timer32_1_INPUT_ISB1_REG(DBB11IN)
                                        (0149) 	db		36h, c0h		;Timer32_1_OUTPUT_ISB1_REG(DBB11OU)
                                        (0150) ;       Instance name Timer32_1, Block Name TIMER32_ISB2(DCB12)
                                        (0151) 	db		38h, 00h		;Timer32_1_FUNC_ISB2_REG(DCB12FN)
                                        (0152) 	db		39h, 31h		;Timer32_1_INPUT_ISB2_REG(DCB12IN)
                                        (0153) 	db		3ah, c0h		;Timer32_1_OUTPUT_ISB2_REG(DCB12OU)
                                        (0154) ;       Instance name Timer32_1, Block Name TIMER32_LSB(DBB10)
                                        (0155) 	db		30h, 00h		;Timer32_1_FUNC_LSB_REG(DBB10FN)
                                        (0156) 	db		31h, 01h		;Timer32_1_INPUT_LSB_REG(DBB10IN)
                                        (0157) 	db		32h, c0h		;Timer32_1_OUTPUT_LSB_REG(DBB10OU)
                                        (0158) ;       Instance name Timer32_1, Block Name TIMER32_MSB(DCB13)
                                        (0159) 	db		3ch, 20h		;Timer32_1_FUNC_MSB_REG(DCB13FN)
                                        (0160) 	db		3dh, 31h		;Timer32_1_INPUT_MSB_REG(DCB13IN)
                                        (0161) 	db		3eh, c0h		;Timer32_1_OUTPUT_MSB_REG(DCB13OU)
                                        (0162) ;  Instance name UART, User Module UART
                                        (0163) ;       Instance name UART, Block Name RX(DCB23)
                                        (0164) 	db		4ch, 05h		;UART_RX_FUNC_REG   (DCB23FN)
                                        (0165) 	db		4dh, c1h		;UART_RX_INPUT_REG  (DCB23IN)
                                        (0166) 	db		4eh, 40h		;UART_RX_OUTPUT_REG (DCB23OU)
                                        (0167) ;       Instance name UART, Block Name TX(DCB22)
                                        (0168) 	db		48h, 0dh		;UART_TX_FUNC_REG   (DCB22FN)
                                        (0169) 	db		49h, 01h		;UART_TX_INPUT_REG  (DCB22IN)
                                        (0170) 	db		4ah, 45h		;UART_TX_OUTPUT_REG (DCB22OU)
                                        (0171) ;  Global Register values Bank 1
                                        (0172) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0173) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0174) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0175) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0176) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0177) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0178) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0179) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0180) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0181) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0182) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0183) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0184) 	db		e1h, bfh		; OscillatorControl_1 register (OSC_CR1)
                                        (0185) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0186) 	db		dfh, 9bh		; OscillatorControl_3 register (OSC_CR3)
                                        (0187) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0188) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0189) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0190) 	db		ffh
                                        (0191) AREA psoc_config(rom, rel)
                                        (0192) LoadConfigTBL_example_adc_lcd_Ordered:
                                        (0193) ;  Ordered Global Register values
                                        (0194) 	M8C_SetBank0
0458: 62 00 00 MOV   REG[0x0],0x0       (0195) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
045B: 71 10    OR    F,0x10             
                                        (0196) 	M8C_SetBank1
045D: 62 00 22 MOV   REG[0x0],0x22      (0197) 	mov	reg[00h], 22h		; Port_0_DriveMode_0 register (PRT0DM0)
0460: 62 01 DD MOV   REG[0x1],0xDD      (0198) 	mov	reg[01h], ddh		; Port_0_DriveMode_1 register (PRT0DM1)
0463: 70 EF    AND   F,0xEF             
                                        (0199) 	M8C_SetBank0
0465: 62 03 CD MOV   REG[0x3],0xCD      (0200) 	mov	reg[03h], cdh		; Port_0_DriveMode_2 register (PRT0DM2)
0468: 62 02 32 MOV   REG[0x2],0x32      (0201) 	mov	reg[02h], 32h		; Port_0_GlobalSelect register (PRT0GS)
046B: 71 10    OR    F,0x10             
                                        (0202) 	M8C_SetBank1
046D: 62 02 00 MOV   REG[0x2],0x0       (0203) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0470: 62 03 00 MOV   REG[0x3],0x0       (0204) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
0473: 70 EF    AND   F,0xEF             
                                        (0205) 	M8C_SetBank0
0475: 62 01 00 MOV   REG[0x1],0x0       (0206) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0478: 62 04 A0 MOV   REG[0x4],0xA0      (0207) 	mov	reg[04h], a0h		; Port_1_Data register (PRT1DR)
047B: 71 10    OR    F,0x10             
                                        (0208) 	M8C_SetBank1
047D: 62 04 A0 MOV   REG[0x4],0xA0      (0209) 	mov	reg[04h], a0h		; Port_1_DriveMode_0 register (PRT1DM0)
0480: 62 05 FF MOV   REG[0x5],0xFF      (0210) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
0483: 70 EF    AND   F,0xEF             
                                        (0211) 	M8C_SetBank0
0485: 62 07 FF MOV   REG[0x7],0xFF      (0212) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0488: 62 06 00 MOV   REG[0x6],0x0       (0213) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
048B: 71 10    OR    F,0x10             
                                        (0214) 	M8C_SetBank1
048D: 62 06 00 MOV   REG[0x6],0x0       (0215) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0490: 62 07 00 MOV   REG[0x7],0x0       (0216) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0493: 70 EF    AND   F,0xEF             
                                        (0217) 	M8C_SetBank0
0495: 62 05 00 MOV   REG[0x5],0x0       (0218) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0498: 62 08 00 MOV   REG[0x8],0x0       (0219) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
049B: 71 10    OR    F,0x10             
                                        (0220) 	M8C_SetBank1
049D: 62 08 7F MOV   REG[0x8],0x7F      (0221) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
04A0: 62 09 80 MOV   REG[0x9],0x80      (0222) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
04A3: 70 EF    AND   F,0xEF             
                                        (0223) 	M8C_SetBank0
04A5: 62 0B 80 MOV   REG[0xB],0x80      (0224) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
04A8: 62 0A 00 MOV   REG[0xA],0x0       (0225) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
04AB: 71 10    OR    F,0x10             
                                        (0226) 	M8C_SetBank1
04AD: 62 0A 00 MOV   REG[0xA],0x0       (0227) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
04B0: 62 0B 00 MOV   REG[0xB],0x0       (0228) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
04B3: 70 EF    AND   F,0xEF             
                                        (0229) 	M8C_SetBank0
04B5: 62 09 00 MOV   REG[0x9],0x0       (0230) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
04B8: 62 0C 00 MOV   REG[0xC],0x0       (0231) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
04BB: 71 10    OR    F,0x10             
                                        (0232) 	M8C_SetBank1
04BD: 62 0C 00 MOV   REG[0xC],0x0       (0233) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
04C0: 62 0D 00 MOV   REG[0xD],0x0       (0234) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
04C3: 70 EF    AND   F,0xEF             
                                        (0235) 	M8C_SetBank0
04C5: 62 0F 00 MOV   REG[0xF],0x0       (0236) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
04C8: 62 0E 00 MOV   REG[0xE],0x0       (0237) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
04CB: 71 10    OR    F,0x10             
                                        (0238) 	M8C_SetBank1
04CD: 62 0E 00 MOV   REG[0xE],0x0       (0239) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
04D0: 62 0F 00 MOV   REG[0xF],0x0       (0240) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
04D3: 70 EF    AND   F,0xEF             
                                        (0241) 	M8C_SetBank0
04D5: 62 0D 00 MOV   REG[0xD],0x0       (0242) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
04D8: 62 10 00 MOV   REG[0x10],0x0      (0243) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
04DB: 71 10    OR    F,0x10             
                                        (0244) 	M8C_SetBank1
04DD: 62 10 00 MOV   REG[0x10],0x0      (0245) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
04E0: 62 11 00 MOV   REG[0x11],0x0      (0246) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
04E3: 70 EF    AND   F,0xEF             
                                        (0247) 	M8C_SetBank0
04E5: 62 13 00 MOV   REG[0x13],0x0      (0248) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
04E8: 62 12 00 MOV   REG[0x12],0x0      (0249) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
04EB: 71 10    OR    F,0x10             
                                        (0250) 	M8C_SetBank1
04ED: 62 12 00 MOV   REG[0x12],0x0      (0251) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
04F0: 62 13 00 MOV   REG[0x13],0x0      (0252) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
04F3: 70 EF    AND   F,0xEF             
                                        (0253) 	M8C_SetBank0
04F5: 62 11 00 MOV   REG[0x11],0x0      (0254) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
04F8: 62 14 00 MOV   REG[0x14],0x0      (0255) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
04FB: 71 10    OR    F,0x10             
                                        (0256) 	M8C_SetBank1
04FD: 62 14 00 MOV   REG[0x14],0x0      (0257) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0500: 62 15 00 MOV   REG[0x15],0x0      (0258) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0503: 70 EF    AND   F,0xEF             
                                        (0259) 	M8C_SetBank0
0505: 62 17 00 MOV   REG[0x17],0x0      (0260) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
0508: 62 16 00 MOV   REG[0x16],0x0      (0261) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
050B: 71 10    OR    F,0x10             
                                        (0262) 	M8C_SetBank1
050D: 62 16 00 MOV   REG[0x16],0x0      (0263) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0510: 62 17 00 MOV   REG[0x17],0x0      (0264) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0513: 70 EF    AND   F,0xEF             
                                        (0265) 	M8C_SetBank0
0515: 62 15 00 MOV   REG[0x15],0x0      (0266) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
0518: 62 18 00 MOV   REG[0x18],0x0      (0267) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
051B: 71 10    OR    F,0x10             
                                        (0268) 	M8C_SetBank1
051D: 62 18 00 MOV   REG[0x18],0x0      (0269) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
0520: 62 19 00 MOV   REG[0x19],0x0      (0270) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
0523: 70 EF    AND   F,0xEF             
                                        (0271) 	M8C_SetBank0
0525: 62 1B 00 MOV   REG[0x1B],0x0      (0272) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
0528: 62 1A 00 MOV   REG[0x1A],0x0      (0273) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
052B: 71 10    OR    F,0x10             
                                        (0274) 	M8C_SetBank1
052D: 62 1A 00 MOV   REG[0x1A],0x0      (0275) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
0530: 62 1B 00 MOV   REG[0x1B],0x0      (0276) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
0533: 70 EF    AND   F,0xEF             
                                        (0277) 	M8C_SetBank0
0535: 62 19 00 MOV   REG[0x19],0x0      (0278) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
0538: 62 1C 00 MOV   REG[0x1C],0x0      (0279) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
053B: 71 10    OR    F,0x10             
                                        (0280) 	M8C_SetBank1
053D: 62 1C 00 MOV   REG[0x1C],0x0      (0281) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
0540: 62 1D 00 MOV   REG[0x1D],0x0      (0282) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
0543: 70 EF    AND   F,0xEF             
                                        (0283) 	M8C_SetBank0
0545: 62 1F 00 MOV   REG[0x1F],0x0      (0284) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
0548: 62 1E 00 MOV   REG[0x1E],0x0      (0285) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
054B: 71 10    OR    F,0x10             
                                        (0286) 	M8C_SetBank1
054D: 62 1E 00 MOV   REG[0x1E],0x0      (0287) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
0550: 62 1F 00 MOV   REG[0x1F],0x0      (0288) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
0553: 70 EF    AND   F,0xEF             
                                        (0289) 	M8C_SetBank0
0555: 62 1D 00 MOV   REG[0x1D],0x0      (0290) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0558: 70 EF    AND   F,0xEF             
                                        (0291) 	M8C_SetBank0
055A: 7F       RET                      (0292) 	ret
                                        (0293) 
                                        (0294) 
                                        (0295) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_example_adc_lcd
                                        (0026) export _LoadConfig_example_adc_lcd
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
055B: 55 02 00 MOV   [tx_map+2],0x0     (0065) 	mov		[Port_2_Data_SHADE], 0h
055E: 55 03 7F MOV   [tx_map+3],0x7F    (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0561: 55 04 80 MOV   [tx_map+4],0x80    (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
0564: 7C 05 6B LCALL 0x056B             (0069) 	lcall	LoadConfig_example_adc_lcd
0567: 7C 04 56 LCALL 0x0456             (0070) 	lcall	LoadConfigTBL_example_adc_lcd_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
056A: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration example_adc_lcd
                                        (0078) ;
                                        (0079) ;    Load configuration registers for example_adc_lcd.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_example_adc_lcd:
                                        (0096)  LoadConfig_example_adc_lcd:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
056B: 10       PUSH  X                  (0099) 	push	x
056C: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
056E: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
0570: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
0571: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_example_adc_lcd_Bank0
0573: 57 E1    MOV   X,0xE1             (0105)     mov     X, <LoadConfigTBL_example_adc_lcd_Bank0
0575: 7C 05 86 LCALL 0x0586             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0578: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
057A: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
057B: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_example_adc_lcd_Bank1
057D: 57 7C    MOV   X,0x7C             (0112)     mov     X, <LoadConfigTBL_example_adc_lcd_Bank1
057F: 7C 05 86 LCALL 0x0586             (0113)     lcall   LoadConfig              ; Load the bank 1 values
0582: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
0584: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
0585: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0586: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0588: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
0589: 08       PUSH  A                  (0143)     push    A
058A: 4F       MOV   X,SP               (0144)     mov     X, SP
058B: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
058E: D0 04    JNC   0x0593             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0590: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
0593: 18       POP   A                  (0149)     pop     A
0594: 20       POP   X                  (0150)     pop     X
0595: 70 EF    AND   F,0xEF             
0597: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
059A: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
059B: 08       PUSH  A                  (0156)     push    A
059C: 28       ROMX                     (0157)     romx                            ; Load register address from table
059D: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
059F: A0 1F    JZ    0x05BF             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
05A1: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
05A2: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
05A5: A0 03    JZ    0x05A9             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
05A7: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
05A9: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
05AB: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
05AC: 20       POP   X                  (0167)     pop     X
05AD: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
05AE: 09 00    ADC   A,0x0              (0169)     adc     A, 0
05B0: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
05B1: 08       PUSH  A                  (0171)     push    A
05B2: 28       ROMX                     (0172)     romx                            ; load config data from the table
05B3: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
05B4: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
05B6: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
05B8: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
05B9: 20       POP   X                  (0177)     pop     X
05BA: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
05BB: 09 00    ADC   A,0x0              (0179)     adc     A, 0
05BD: 8F D7    JMP   0x0595             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
05BF: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
05C1: 70 3F    AND   F,0x3F             
05C3: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
05C5: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\uartint.asm                   (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   UARTINT.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) 
                                        (0014) include "UART.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "m8c.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _UART_TX_ISR
                                        (0022) export  _UART_RX_ISR
                                        (0023) 
                                        (0024) IF (UART_RXBUF_ENABLE)
                                        (0025) export  UART_aRxBuffer
                                        (0026) export _UART_aRxBuffer
                                        (0027) export  UART_bRxCnt
                                        (0028) export _UART_bRxCnt
                                        (0029) export  UART_fStatus
                                        (0030) export _UART_fStatus
                                        (0031) ENDIF
                                        (0032) 
                                        (0033) 
                                        (0034) ;-----------------------------------------------
                                        (0035) ; Variable Allocation
                                        (0036) ;-----------------------------------------------
                                        (0037) AREA InterruptRAM (RAM, REL, CON)
                                        (0038) 
                                        (0039) IF (UART_RXBUF_ENABLE)
                                        (0040)  UART_fStatus:
                                        (0041) _UART_fStatus:      BLK  1
                                        (0042)  UART_bRxCnt:
                                        (0043) _UART_bRxCnt:       BLK  1
                                        (0044) AREA UART_RAM (RAM, REL, CON)
                                        (0045)  UART_aRxBuffer:
                                        (0046) _UART_aRxBuffer:    BLK UART_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) AREA InterruptRAM (RAM, REL, CON)
                                        (0050) 
                                        (0051) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0052) ;---------------------------------------------------
                                        (0053) ; Insert your custom declarations below this banner
                                        (0054) ;---------------------------------------------------
                                        (0055) 
                                        (0056) ;------------------------
                                        (0057) ;  Includes
                                        (0058) ;------------------------
                                        (0059) 
                                        (0060) 
                                        (0061) ;------------------------
                                        (0062) ;  Constant Definitions
                                        (0063) ;------------------------
                                        (0064) 
                                        (0065) 
                                        (0066) ;------------------------
                                        (0067) ; Variable Allocation
                                        (0068) ;------------------------
                                        (0069) 
                                        (0070) 
                                        (0071) ;---------------------------------------------------
                                        (0072) ; Insert your custom declarations above this banner
                                        (0073) ;---------------------------------------------------
                                        (0074) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0075) 
                                        (0076) 
                                        (0077) AREA UserModules (ROM, REL, CON)
                                        (0078) 
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;  FUNCTION NAME: _UART_TX_ISR
                                        (0081) ;
                                        (0082) ;  DESCRIPTION:
                                        (0083) ;     UART TX interrupt handler for instance UART.
                                        (0084) ;
                                        (0085) ;     This is a place holder function.  If the user requires use of an interrupt
                                        (0086) ;     handler for this function, then place code where specified.
                                        (0087) ;-----------------------------------------------------------------------------
                                        (0088) 
                                        (0089) _UART_TX_ISR:
                                        (0090)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    ;PRESERVE_CPU_CONTEXT
                                        (0107)    ;lcall _My_C_Function
                                        (0108)    ;RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
05C6: 7E       RETI                     (0115)    reti
                                        (0116) 
                                        (0117) 
                                        (0118) ;-----------------------------------------------------------------------------
                                        (0119) ;  FUNCTION NAME: _UART_RX_ISR
                                        (0120) ;
                                        (0121) ;  DESCRIPTION:
                                        (0122) ;     UART RX interrupt handler for instance UART.
                                        (0123) ;     This ISR handles the background processing of received characters if
                                        (0124) ;     the buffer is enabled.
                                        (0125) ;
                                        (0126) ;
                                        (0127) ;  The following assumes that the RX buffer feature has been enabled.
                                        (0128) ;
                                        (0129) ;  SIDE EFFECTS:
                                        (0130) ;     There are 3 posible errors that may occur with the serial port.
                                        (0131) ;      1) Parity Error
                                        (0132) ;      2) Framing Error
                                        (0133) ;      3) OverRun Error
                                        (0134) ;
                                        (0135) ;  This user module check for parity and framing error.  If either of these
                                        (0136) ;  two errors are detected, the data is read and ignored.  When an overRun
                                        (0137) ;  error occurs, the last byte was lost, but the current byte is valid.  For
                                        (0138) ;  this reason this error is ignored at this time.  Code could be added to
                                        (0139) ;  this ISR to set a flag if an error condition occurs.
                                        (0140) ;
                                        (0141) ;  THEORY of OPERATION:
                                        (0142) ;     When using the RX buffer feature, the ISR collects received characters
                                        (0143) ;     in a buffer until the user defined command terminator is detected.  After
                                        (0144) ;     the command terminator is detected, the command bit is set and all other
                                        (0145) ;     characters will be ignored until the command bit is reset.  Up to
                                        (0146) ;     buffer_size - 1 characters will be collected waiting for a command
                                        (0147) ;     terminator.  After that, the characters will be discarded, although
                                        (0148) ;     a command determinator will still cause the command bit to be set.
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) _UART_RX_ISR:
                                        (0152) 
                                        (0153)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0154)    ;---------------------------------------------------
                                        (0155)    ; Insert your custom assembly code below this banner
                                        (0156)    ;---------------------------------------------------
                                        (0157)    ;   NOTE: interrupt service routines must preserve
                                        (0158)    ;   the values of the A and X CPU registers.
                                        (0159)    
                                        (0160)    ;---------------------------------------------------
                                        (0161)    ; Insert your custom assembly code above this banner
                                        (0162)    ;---------------------------------------------------
                                        (0163)    
                                        (0164)    ;---------------------------------------------------
                                        (0165)    ; Insert a lcall to a C function below this banner
                                        (0166)    ; and un-comment the lines between these banners
                                        (0167)    ;---------------------------------------------------
                                        (0168)    
                                        (0169)    ;PRESERVE_CPU_CONTEXT
                                        (0170)    ;lcall _My_C_Function
                                        (0171)    ;RESTORE_CPU_CONTEXT
                                        (0172)    
                                        (0173)    ;---------------------------------------------------
                                        (0174)    ; Insert a lcall to a C function above this banner
                                        (0175)    ; and un-comment the lines between these banners
                                        (0176)    ;---------------------------------------------------
                                        (0177)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0178) 
                                        (0179) IF (UART_RXBUF_ENABLE)
05C7: 08       PUSH  A                  (0180)    push A
05C8: 10       PUSH  X                  (0181)    push X
05C9: 5D D3    MOV   A,REG[0xD3]        
05CB: 08       PUSH  A                  
                                        (0182)    
                                        (0183)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0184)       REG_PRESERVE IDX_PP
                                        (0185)    ENDIF
                                        (0186)    
05CC: 58 01    MOV   X,[tx_map+1]       (0187)    mov  X,[UART_bRxCnt]                                    ; Load X with byte counter
05CE: 5D 4F    MOV   A,REG[0x4F]        (0188)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Read the control register
05D0: 08       PUSH  A                  (0189)    push A                                                  ; Store copy for later test
                                        (0190)                                                            ; IF real RX interrupt
05D1: 21 08    AND   A,0x8              (0191)    and  A,UART_RX_REG_FULL                                 ; Did really really get an IRQ
05D3: B0 04    JNZ   0x05D8             (0192)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
05D5: 18       POP   A                  (0193)    pop  A                                                  ; Restore stack
05D6: 80 5E    JMP   0x0635             (0194)    jmp  .RESTORE_IDX_PP
                                        (0195) 
                                        (0196) .UARTRX_ReadRx:
05D8: 18       POP   A                  (0197)    pop  A                                                  ; Restore status flags
                                        (0198)                                                            ; IF there is no error, get data
                                        (0199)                                                            ; Check for parity or framing error
05D9: 21 E0    AND   A,0xE0             (0200)    and  A,UART_RX_ERROR
05DB: A0 12    JZ    0x05EE             (0201)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0202) 
05DD: 2C 00    OR    [tx_map],A         (0203)    or   [UART_fStatus],A                                   ; Set error flags (parity,framing,overrun) bits
05DF: 49 4E 00 TST   REG[0x4E],0x0      (0204)    tst  REG[UART_RX_BUFFER_REG], 0x00                      ; Read the data buffer to clear it.
05E2: 21 20    AND   A,0x20             (0205)    and  A,UART_RX_FRAMING_ERROR                            ; Check for framing error special case
05E4: A0 50    JZ    0x0635             (0206)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0207) 
                                        (0208)                                                            ; Disable and re-enable RX to reset after
                                        (0209)                                                            ; framing error.
05E6: 41 4F FE AND   REG[0x4F],0xFE     (0210)    and   REG[UART_RX_CONTROL_REG], ~UART_RX_ENABLE         ; Disable RX
05E9: 43 4F 01 OR    REG[0x4F],0x1      (0211)    or    REG[UART_RX_CONTROL_REG],  UART_RX_ENABLE         ; Enable RX
05EC: 80 48    JMP   0x0635             (0212)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0213) 
                                        (0214) 
                                        (0215) .UARTRX_NO_ERROR:
05EE: 5D 4E    MOV   A,REG[0x4E]        (0216)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read the data buffer
                                        (0217) 
                                        (0218)                                                            ; IF buffer not full
05F0: 47 00 01 TST   [tx_map],0x1       (0219)    tst  [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Check for buffer full
05F3: B0 41    JNZ   0x0635             (0220)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0221) 
05F5: 39 0D    CMP   A,0xD              (0222)    cmp  A,UART_CMD_TERM                                    ; Check for End of command
05F7: B0 14    JNZ   0x060C             (0223)    jnz  .UARTRX_CHK_BACKSPACE
05F9: 2E 00 01 OR    [tx_map],0x1       (0224)    or   [UART_fStatus],UART_RX_BUF_CMDTERM                 ; Set command ready bit
05FC: 62 D3 00 MOV   REG[0xD3],0x0      
05FF: 70 3F    AND   F,0x3F             
0601: 71 80    OR    F,0x80             
                                        (0225) 
                                        (0226) 
                                        (0227) 
                                        (0228)    RAM_SETPAGE_IDX >UART_aRxBuffer
                                        (0229)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0603: 56 D3 00 MOV   [X-45],0x0         (0230)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data
0606: 70 3F    AND   F,0x3F             
0608: 71 00    OR    F,0x0              
                                        (0231)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
060A: 80 2A    JMP   0x0635             (0232)    jmp  .RESTORE_IDX_PP
                                        (0233) 
                                        (0234) .UARTRX_CHK_BACKSPACE:                                     ; 
                                        (0235) IF(UART_BACKSPACE_ENABLE)                                  ; Enable if backspace/delete mode
                                        (0236)    cmp  A,UART_BACKSPACE_ENABLE                            ; Check for backspace character
                                        (0237)    jnz  .UARTRX_IGNORE                                     ; If not, skip the backspace stuff
                                        (0238)    cmp  [UART_bRxCnt],00h                                  ; Check if buffer empty
                                        (0239)    jz   .RESTORE_IDX_PP                                    ; 
                                        (0240)    dec  [UART_bRxCnt]                                      ; Decrement buffer count by one.
                                        (0241)    jmp  .RESTORE_IDX_PP
                                        (0242) ENDIF                                                      ; 
                                        (0243) 
                                        (0244) .UARTRX_IGNORE:
                                        (0245) IF(UART_RX_IGNORE_BELOW)                                   ; Ignore charaters below this value
060C: 39 20    CMP   A,0x20             (0246)    cmp  A,UART_RX_IGNORE_BELOW                             ; If ignore char is set to 0x00, do not
060E: C0 26    JC    0x0635             (0247)    jc   .RESTORE_IDX_PP                                    ; ignore any characters.
0610: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0248) ENDIF
                                        (0249) 
                                        (0250) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
                                        (0251) 	
                                        (0252)    RAM_SETPAGE_IDX >UART_aRxBuffer                         ;   using idexed address mode
0613: 3C 01 1F CMP   [tx_map+1],0x1F    (0253)    cmp  [UART_bRxCnt],(UART_RX_BUFFER_SIZE - 1)
0616: C0 11    JC    0x0628             (0254)    jc   .UARTRX_ISR_GETDATA
0618: 70 3F    AND   F,0x3F             
061A: 71 80    OR    F,0x80             
                                        (0255)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
061C: 56 D3 00 MOV   [X-45],0x0         (0256)    mov  [X + UART_aRxBuffer],00h                           ; Zero out last data in the buffer
061F: 70 3F    AND   F,0x3F             
0621: 71 00    OR    F,0x0              
                                        (0257)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0623: 2E 00 10 OR    [tx_map],0x10      (0258)    or   [UART_fStatus],UART_RX_BUF_OVERRUN                 ; Set error flags (parity,framing,overrun) bits
0626: 80 0E    JMP   0x0635             (0259)    jmp  .RESTORE_IDX_PP
0628: 70 3F    AND   F,0x3F             
062A: 71 80    OR    F,0x80             
                                        (0260) 
                                        (0261) .UARTRX_ISR_GETDATA:                                       ; IF input data == "CR", then end of command
                                        (0262)                                                            ; X is already loaded with pointer
                                        (0263)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
062C: 54 D3    MOV   [X-45],A           (0264)    mov  [X+UART_aRxBuffer],A                               ; store data in array
062E: 70 3F    AND   F,0x3F             
0630: 71 00    OR    F,0x0              
                                        (0265)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0632: 75       INC   X                  (0266)    inc  X                                                  ; Inc the pointer
0633: 5A 01    MOV   [tx_map+1],X       (0267)    mov  [UART_bRxCnt],X                                    ; Restore the pointer
0635: 18       POP   A                  
0636: 60 D3    MOV   REG[0xD3],A        
                                        (0268)                                                            ; ENDIF max string size
                                        (0269) .RESTORE_IDX_PP:
                                        (0270)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0271)       REG_RESTORE IDX_PP
                                        (0272)    ENDIF
                                        (0273) 
                                        (0274) .END_UARTRX_ISR:
0638: 20       POP   X                  (0275)    pop  X
0639: 18       POP   A                  (0276)    pop  A
                                        (0277) 
                                        (0278) ENDIF
                                        (0279) 
                                        (0280) UART_RX_ISR_END:
063A: 7E       RETI                     (0281)    reti
                                        (0282) 
                                        (0283) ; end of file UARTINT.asm
                                        (0284) 
FILE: lib\uart.asm                      (0001) ;;*****************************************************************************
063B: 43 DF 04 OR    REG[0xDF],0x4      (0002) ;;*****************************************************************************
063E: 43 DF 08 OR    REG[0xDF],0x8      
                                        (0003) ;;  Filename:   UART.asm
                                        (0004) ;;  Version: 5.3, Updated on 2015/3/4 at 22:27:54
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  UART User Module software implementation file for the
                                        (0008) ;;                22/24/25/26/27xxx families.
                                        (0009) ;;
                                        (0010) ;;
                                        (0011) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0012) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0013) ;;        This means it is the caller's responsibility to preserve any values
                                        (0014) ;;        in the X and A registers that are still needed after the API functions
                                        (0015) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0016) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0017) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0018) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0019) ;;-----------------------------------------------------------------------------
                                        (0020) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0021) ;;*****************************************************************************
                                        (0022) ;;*****************************************************************************
                                        (0023) 
                                        (0024) 
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "UART.inc"
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ;  Global Symbols
                                        (0031) ;-----------------------------------------------
                                        (0032) ;-------------------------------------------------------------------
                                        (0033) ;  Declare the functions global for both assembler and C compiler.
                                        (0034) ;
                                        (0035) ;  Note that there are two names for each API. First name is
                                        (0036) ;  assembler reference. Name with underscore is name refence for
                                        (0037) ;  C compiler.  Calling function in C source code does not require
                                        (0038) ;  the underscore.
                                        (0039) ;-------------------------------------------------------------------
                                        (0040) export  UART_SetTxIntMode
                                        (0041) export _UART_SetTxIntMode
                                        (0042) export  UART_EnableInt
                                        (0043) export _UART_EnableInt
                                        (0044) export  UART_DisableInt
                                        (0045) export _UART_DisableInt
                                        (0046) 
                                        (0047) export  UART_Start
                                        (0048) export _UART_Start
                                        (0049) export  UART_Stop
                                        (0050) export _UART_Stop
                                        (0051) export  UART_SendData
                                        (0052) export _UART_SendData
                                        (0053) export  UART_bReadTxStatus
                                        (0054) export _UART_bReadTxStatus
                                        (0055) export  UART_bReadRxData
                                        (0056) export _UART_bReadRxData
                                        (0057) export  UART_bReadRxStatus
                                        (0058) export _UART_bReadRxStatus
                                        (0059) 
                                        (0060) export  UART_IntCntl
                                        (0061) export _UART_IntCntl
                                        (0062) 
                                        (0063) export  UART_TxIntMode
                                        (0064) export _UART_TxIntMode
                                        (0065) 
                                        (0066) export  UART_PutSHexByte
                                        (0067) export _UART_PutSHexByte
                                        (0068) export  UART_PutSHexInt
                                        (0069) export _UART_PutSHexInt
                                        (0070) 
                                        (0071) export  UART_CPutString
                                        (0072) export _UART_CPutString
                                        (0073) export  UART_PutString
                                        (0074) export _UART_PutString
                                        (0075) export  UART_PutChar
                                        (0076) export _UART_PutChar
                                        (0077) export  UART_Write
                                        (0078) export _UART_Write
                                        (0079) export  UART_CWrite
                                        (0080) export _UART_CWrite
                                        (0081) 
                                        (0082) export  UART_cGetChar
                                        (0083) export _UART_cGetChar
                                        (0084) export  UART_cReadChar
                                        (0085) export _UART_cReadChar
                                        (0086) export  UART_iReadChar
                                        (0087) export _UART_iReadChar
                                        (0088) export  UART_PutCRLF
                                        (0089) export _UART_PutCRLF
                                        (0090) 
                                        (0091) IF (UART_RXBUF_ENABLE)
                                        (0092) export  UART_CmdReset
                                        (0093) export _UART_CmdReset
                                        (0094) export  UART_bCmdCheck
                                        (0095) export _UART_bCmdCheck
                                        (0096) export  UART_bCmdLength
                                        (0097) export _UART_bCmdLength
                                        (0098) export  UART_bErrCheck
                                        (0099) export _UART_bErrCheck
                                        (0100) 
                                        (0101) export  UART_szGetParam
                                        (0102) export _UART_szGetParam
                                        (0103) export  UART_szGetRestOfParams
                                        (0104) export _UART_szGetRestOfParams
                                        (0105) ENDIF
                                        (0106) 
                                        (0107) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0108) ; WARNING WARNING WARNING
                                        (0109) ; The following exports are for backwards compatibility only and should
                                        (0110) ; not be used for new designs. They may be eliminated in a future release.
                                        (0111) ; Their status is "NO FURTHER MAINTENANCE". 
                                        (0112) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0113) export  bUART_ReadTxStatus
                                        (0114) export _bUART_ReadTxStatus
                                        (0115) export  bUART_ReadRxData
                                        (0116) export _bUART_ReadRxData
                                        (0117) export  bUART_ReadRxStatus
                                        (0118) export _bUART_ReadRxStatus
                                        (0119) 	
                                        (0120) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0121) ;             END WARNING
                                        (0122) ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                                        (0123) 
                                        (0124) ;-----------------------------------------------
                                        (0125) ; Variable Allocation
                                        (0126) ;-----------------------------------------------
                                        (0127) IF (UART_RXBUF_ENABLE)
                                        (0128)     
                                        (0129) area UART_RAM (RAM, REL, CON)
                                        (0130)     
                                        (0131)  ptrParam:   BLK  1
                                        (0132) 
                                        (0133) ENDIF
                                        (0134) 
                                        (0135) area text (ROM,REL)
                                        (0136) 
                                        (0137) ;-----------------------------------------------
                                        (0138) ;  EQUATES
                                        (0139) ;-----------------------------------------------
                                        (0140) bfCONTROL_REG_START_BIT:        equ    1    ; Control register start bit
                                        (0141) bfFUNCTION_REG_TX_INT_MODE_BIT: equ 0x10    ; the TX Int Mode bit
                                        (0142) 
                                        (0143) area UserModules (ROM, REL, CON)
                                        (0144) 
                                        (0145) ;=============================================================================
                                        (0146) ;=============================================================================
                                        (0147) ;
                                        (0148) ;     Low-Level Commands
                                        (0149) ;
                                        (0150) ;=============================================================================
                                        (0151) ;=============================================================================
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: UART_EnableInt
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;     Enables this UART's interrupt by setting the interrupt enable mask
                                        (0159) ;     bit associated with this User Module. Remember to call the global
                                        (0160) ;     interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0161) ;-----------------------------------------------------------------------------
                                        (0162) ;
                                        (0163) ;  ARGUMENTS:
                                        (0164) ;     none.
                                        (0165) ;
                                        (0166) ;  RETURNS:
                                        (0167) ;     none.
                                        (0168) ;
                                        (0169) ;  SIDE EFFECTS:
                                        (0170) ;    The A and X registers may be modified by this or future implementations
                                        (0171) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0172) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0173) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0174) ;    functions.
                                        (0175) ;
                                        (0176)  UART_EnableInt:
                                        (0177) _UART_EnableInt:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0179)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0180)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0181)    RAM_EPILOGUE RAM_USE_CLASS_1
0641: 7F       RET                      (0182)    ret
0642: 41 DF FB AND   REG[0xDF],0xFB     
0645: 41 DF F7 AND   REG[0xDF],0xF7     
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185)     
                                        (0186) .SECTION
                                        (0187) ;-----------------------------------------------------------------------------
                                        (0188) ;  FUNCTION NAME: UART_DisableInt
                                        (0189) ;
                                        (0190) ;  DESCRIPTION:
                                        (0191) ;     Disables this UART's interrupt by clearing the interrupt enable mask bit
                                        (0192) ;     associated with this User Module.
                                        (0193) ;-----------------------------------------------------------------------------
                                        (0194) ;
                                        (0195) ;  ARGUMENTS:
                                        (0196) ;     none.
                                        (0197) ;
                                        (0198) ;  RETURNS:
                                        (0199) ;     none.
                                        (0200) ;
                                        (0201) ;  SIDE EFFECTS:
                                        (0202) ;    The A and X registers may be modified by this or future implementations
                                        (0203) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0204) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0205) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0206) ;    functions.
                                        (0207) ;
                                        (0208)  UART_DisableInt:
                                        (0209) _UART_DisableInt:
                                        (0210)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0211)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0212)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0213)    RAM_EPILOGUE RAM_USE_CLASS_1
0648: 7F       RET                      (0214)    ret
0649: 71 10    OR    F,0x10             
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) 
                                        (0218) .SECTION
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;  FUNCTION NAME: UART_SetTxIntMode(BYTE bTxIntMode)
                                        (0221) ;
                                        (0222) ;  DESCRIPTION:
                                        (0223) ;     Sets the Tx Interrupt Mode bit in the Function Register.
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;
                                        (0226) ;  ARGUMENTS:
                                        (0227) ;     BYTE bTxIntMode - The TX Interrupt mode setting. Use defined masks.
                                        (0228) ;        Passed in the A register
                                        (0229) ;
                                        (0230) ;  RETURNS:
                                        (0231) ;     none.
                                        (0232) ;
                                        (0233) ;  SIDE EFFECTS:
                                        (0234) ;    The A and X registers may be modified by this or future implementations
                                        (0235) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0236) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0237) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0238) ;    functions.
                                        (0239) ;
                                        (0240) ;  THEORY of OPERATION OR PROCEDURE:
                                        (0241) ;     Sets the TX interrupt mode bit to define whether the interrupt occurs
                                        (0242) ;     on TX register empty or TX transmit complete
                                        (0243) ;
                                        (0244)  UART_SetTxIntMode:
                                        (0245) _UART_SetTxIntMode:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0247)    M8C_SetBank1
064B: 21 01    AND   A,0x1              (0248)    and   A, UART_INT_MODE_TX_COMPLETE
064D: A0 07    JZ    0x0655             (0249)    jz    .SetModeRegEmpty
064F: 43 48 10 OR    REG[0x48],0x10     (0250)    or    REG[UART_TX_FUNC_REG], bfFUNCTION_REG_TX_INT_MODE_BIT
0652: 70 EF    AND   F,0xEF             
                                        (0251)    M8C_SetBank0
                                        (0252)    RAM_EPILOGUE RAM_USE_CLASS_1
0654: 7F       RET                      (0253)    ret
                                        (0254) 
                                        (0255) .SetModeRegEmpty:
0655: 41 48 EF AND   REG[0x48],0xEF     (0256)    and   REG[UART_TX_FUNC_REG], ~bfFUNCTION_REG_TX_INT_MODE_BIT
0658: 70 EF    AND   F,0xEF             
                                        (0257)    M8C_SetBank0
                                        (0258)    RAM_EPILOGUE RAM_USE_CLASS_1
065A: 7F       RET                      (0259)    ret
                                        (0260) .ENDSECTION
                                        (0261) 
                                        (0262) 
                                        (0263) .SECTION
                                        (0264) ;-----------------------------------------------------------------------------
                                        (0265) ;  FUNCTION NAME: UART_Start(BYTE bParity)
                                        (0266) ;
                                        (0267) ;  DESCRIPTION:
                                        (0268) ;     Sets the start bit and parity in the Control register of this user module.
                                        (0269) ;-----------------------------------------------------------------------------
                                        (0270) ;
                                        (0271) ;  ARGUMENTS:
                                        (0272) ;     BYTE bParity - parity setting for the Transmitter and receiver. Use defined masks.
                                        (0273) ;        Passed in the A register.
                                        (0274) ;
                                        (0275) ;  RETURNS:
                                        (0276) ;     none.
                                        (0277) ;
                                        (0278) ;  SIDE EFFECTS:
                                        (0279) ;    The A and X registers may be modified by this or future implementations
                                        (0280) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0281) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0282) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0283) ;    functions.
                                        (0284) ;
                                        (0285)  UART_Start:
                                        (0286) _UART_Start:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0288)    ; Note, Proxy Class 4 only if receive buffer used; otherwise Proxy Class 1.
                                        (0289) 
065B: 29 01    OR    A,0x1              (0290)    or    A, bfCONTROL_REG_START_BIT
065D: 60 4B    MOV   REG[0x4B],A        (0291)    mov   REG[UART_TX_CONTROL_REG], A
065F: 60 4F    MOV   REG[0x4F],A        (0292)    mov   REG[UART_RX_CONTROL_REG], A
                                        (0293) IF ( UART_RXBUF_ENABLE )
0661: 91 2A    CALL  _UART_CmdReset     (0294)    call  _UART_CmdReset
                                        (0295) ENDIF
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0663: 7F       RET                      (0297)    ret
                                        (0298) .ENDSECTION
                                        (0299) 
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: UART_Stop
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     Disables UART operation.
                                        (0307) ;-----------------------------------------------------------------------------
                                        (0308) ;
                                        (0309) ;  ARGUMENTS:
                                        (0310) ;     none.
                                        (0311) ;
                                        (0312) ;  RETURNS:
                                        (0313) ;     none.
                                        (0314) ;
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;    The A and X registers may be modified by this or future implementations
                                        (0317) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0318) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0319) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0320) ;    functions.
                                        (0321) ;
                                        (0322)  UART_Stop:
                                        (0323) _UART_Stop:
                                        (0324)    RAM_PROLOGUE RAM_USE_CLASS_1
0664: 41 4B FE AND   REG[0x4B],0xFE     (0325)    and   REG[UART_TX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
0667: 41 4F FE AND   REG[0x4F],0xFE     (0326)    and   REG[UART_RX_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0327)    RAM_EPILOGUE RAM_USE_CLASS_1
066A: 7F       RET                      (0328)    ret
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) 
                                        (0332) .SECTION
                                        (0333) ;-----------------------------------------------------------------------------
                                        (0334) ;  FUNCTION NAME: UART_SendData
                                        (0335) ;
                                        (0336) ;  DESCRIPTION:
                                        (0337) ;     Initiates a transmission of data.
                                        (0338) ;-----------------------------------------------------------------------------
                                        (0339) ;
                                        (0340) ;  ARGUMENTS:
                                        (0341) ;     BYTE  TxData - data to transmit. PASSED in A register.
                                        (0342) ;
                                        (0343) ;  RETURNS:
                                        (0344) ;     none.
                                        (0345) ;
                                        (0346) ;  SIDE EFFECTS:
                                        (0347) ;    The A and X registers may be modified by this or future implementations
                                        (0348) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0349) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0350) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0351) ;    functions.
                                        (0352) ;
                                        (0353)  UART_SendData:
                                        (0354) _UART_SendData:
                                        (0355)    RAM_PROLOGUE RAM_USE_CLASS_1
066B: 60 49    MOV   REG[0x49],A        (0356)    mov REG[UART_TX_BUFFER_REG], A
                                        (0357)    RAM_EPILOGUE RAM_USE_CLASS_1
066D: 7F       RET                      (0358)    ret
                                        (0359) .ENDSECTION
                                        (0360) 
                                        (0361) 
                                        (0362) .SECTION
                                        (0363) ;-----------------------------------------------------------------------------
                                        (0364) ;  FUNCTION NAME: UART_bReadTxStatus
                                        (0365) ;
                                        (0366) ;  DESCRIPTION:
                                        (0367) ;     Reads the Tx Status bits in the Control/Status register.
                                        (0368) ;-----------------------------------------------------------------------------
                                        (0369) ;
                                        (0370) ;  ARGUMENTS:
                                        (0371) ;     none.
                                        (0372) ;
                                        (0373) ;  RETURNS:
                                        (0374) ;     BYTE  bTxStatus - transmit status data.  Use defined masks for detecting
                                        (0375) ;           status bits (returned in A)
                                        (0376) ;
                                        (0377) ;  SIDE EFFECTS:
                                        (0378) ;    The A and X registers may be modified by this or future implementations
                                        (0379) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0380) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0381) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0382) ;    functions.
                                        (0383) ;
                                        (0384)  UART_bReadTxStatus:
                                        (0385) _UART_bReadTxStatus:
                                        (0386)  bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0387) _bUART_ReadTxStatus:                             ; For backwards compatibility only
                                        (0388)    RAM_PROLOGUE RAM_USE_CLASS_1
066E: 5D 4B    MOV   A,REG[0x4B]        (0389)    mov A,  REG[UART_TX_CONTROL_REG]
                                        (0390)    RAM_EPILOGUE RAM_USE_CLASS_1
0670: 7F       RET                      (0391)    ret
                                        (0392) .ENDSECTION
                                        (0393) 
                                        (0394) 
                                        (0395) .SECTION
                                        (0396) ;-----------------------------------------------------------------------------
                                        (0397) ;  FUNCTION NAME: UART_bReadRxData
                                        (0398) ;
                                        (0399) ;  DESCRIPTION:
                                        (0400) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0401) ;     sure data is valid.
                                        (0402) ;-----------------------------------------------------------------------------
                                        (0403) ;
                                        (0404) ;  ARGUMENTS:
                                        (0405) ;     none.
                                        (0406) ;
                                        (0407) ;  RETURNS:
                                        (0408) ;     bRxData - returned in A.
                                        (0409) ;
                                        (0410) ;  SIDE EFFECTS:
                                        (0411) ;    The A and X registers may be modified by this or future implementations
                                        (0412) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0413) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0414) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0415) ;    functions.
                                        (0416) ;
                                        (0417)  UART_bReadRxData:
                                        (0418) _UART_bReadRxData:
                                        (0419)  bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0420) _bUART_ReadRxData:                               ; For backwards compatibility only
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0671: 5D 4E    MOV   A,REG[0x4E]        (0422)    mov A, REG[UART_RX_BUFFER_REG]
                                        (0423)    RAM_EPILOGUE RAM_USE_CLASS_1
0673: 7F       RET                      (0424)    ret
                                        (0425) .ENDSECTION
                                        (0426) 
                                        (0427) 
                                        (0428) .SECTION
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;  FUNCTION NAME: UART_bReadRxStatus
                                        (0431) ;
                                        (0432) ;  DESCRIPTION:
                                        (0433) ;     Reads the RX Status bits in the Control/Status register.
                                        (0434) ;-----------------------------------------------------------------------------
                                        (0435) ;
                                        (0436) ;  ARGUMENTS:
                                        (0437) ;     none.
                                        (0438) ;
                                        (0439) ;  RETURNS:
                                        (0440) ;     BYTE  bRXStatus - receive status data.  Use the following defined bits
                                        (0441) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0442) ;           returned in A.
                                        (0443) ;
                                        (0444) ;  SIDE EFFECTS:
                                        (0445) ;    The A and X registers may be modified by this or future implementations
                                        (0446) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0447) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0448) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0449) ;    functions.
                                        (0450) ;
                                        (0451)  UART_bReadRxStatus:
                                        (0452) _UART_bReadRxStatus:
                                        (0453)  bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0454) _bUART_ReadRxStatus:                             ; For backwards compatibility only
                                        (0455)    RAM_PROLOGUE RAM_USE_CLASS_1
0674: 5D 4F    MOV   A,REG[0x4F]        (0456)    mov A,  REG[UART_RX_CONTROL_REG]
                                        (0457)    RAM_EPILOGUE RAM_USE_CLASS_1
0676: 7F       RET                      (0458)    ret
                                        (0459) .ENDSECTION
                                        (0460) 
                                        (0461) 
                                        (0462) .SECTION
                                        (0463) ;-----------------------------------------------------------------------------
                                        (0464) ;  FUNCTION NAME: UART_TxIntMode
                                        (0465) ;
                                        (0466) ;  DESCRIPTION:
                                        (0467) ;     This function is used to change the TX Interrupt mode.
                                        (0468) ;-----------------------------------------------------------------------------
                                        (0469) ;
                                        (0470) ;  ARGUMENTS:
                                        (0471) ;     A => Tx Interrupt mode
                                        (0472) ;             0 => Interrupt on TX_Reg_Empty  (Default)
                                        (0473) ;             1 => Interrupt on TX Complete
                                        (0474) ;
                                        (0475) ;  RETURNS:
                                        (0476) ;     none.
                                        (0477) ;
                                        (0478) ;  SIDE EFFECTS:
                                        (0479) ;    The A and X registers may be modified by this or future implementations
                                        (0480) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0481) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0482) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0483) ;    functions.
                                        (0484) ;
                                        (0485)  UART_TxIntMode:
                                        (0486) _UART_TxIntMode:
                                        (0487)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0488) 
0677: 21 01    AND   A,0x1              (0489)    and  A,UART_INT_MODE_TX_COMPLETE
0679: 71 10    OR    F,0x10             
                                        (0490)    M8C_SetBank1
067B: 39 01    CMP   A,0x1              (0491)    cmp  A,UART_INT_MODE_TX_COMPLETE
067D: A0 06    JZ    0x0684             (0492)    jz   .SetTxCmpMode
                                        (0493) 
067F: 41 48 EF AND   REG[0x48],0xEF     (0494)    and  reg[UART_TX_FUNC_REG],0xEF               ; Set Interrupt on Tx_Reg_Empty
0682: 80 04    JMP   0x0687             (0495)    jmp  .TxIntMode_End
                                        (0496) 
                                        (0497) .SetTxCmpMode:                                       ; Set Interrupt on TX Complete
0684: 43 48 10 OR    REG[0x48],0x10     (0498)    or   reg[UART_TX_FUNC_REG],0x10
0687: 70 EF    AND   F,0xEF             
                                        (0499) 
                                        (0500) .TxIntMode_End:
                                        (0501)    M8C_SetBank0
                                        (0502)    RAM_EPILOGUE RAM_USE_CLASS_1
0689: 7F       RET                      (0503)    ret
                                        (0504) .ENDSECTION
                                        (0505) 
                                        (0506)     
                                        (0507) .SECTION
                                        (0508) ;-----------------------------------------------------------------------------
                                        (0509) ;  FUNCTION NAME: UART_IntCntl
                                        (0510) ;
                                        (0511) ;  DESCRIPTION:
                                        (0512) ;     This function is used to enable/disable the Rx and Tx interrupt.
                                        (0513) ;-----------------------------------------------------------------------------
                                        (0514) ;
                                        (0515) ;  ARGUMENTS:
                                        (0516) ;     A => Interrupt mask
                                        (0517) ;
                                        (0518) ;  RETURNS:
                                        (0519) ;     none.
                                        (0520) ;
                                        (0521) ;  SIDE EFFECTS:
                                        (0522) ;    The A and X registers may be modified by this or future implementations
                                        (0523) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0524) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0525) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0526) ;    functions.
                                        (0527) ;
                                        (0528) ;  THEORY of OPERATION or PROCEDURE:
                                        (0529) ;     Set or Clears the Tx/Rx user module interrupt enable mask bit in the TX
                                        (0530) ;     and RX block.
                                        (0531) ;
                                        (0532)  UART_IntCntl:
                                        (0533) _UART_IntCntl:
                                        (0534)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0535) 
068A: 08       PUSH  A                  (0536)    push A
068B: 21 01    AND   A,0x1              (0537)    and  A,UART_ENABLE_RX_INT
068D: A0 06    JZ    0x0694             (0538)    jz   .DisRxInt
068F: 43 DF 08 OR    REG[0xDF],0x8      
                                        (0539)      ; Enable Rx Interrupt
                                        (0540)    M8C_EnableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
0692: 80 04    JMP   0x0697             (0541)    jmp  .CheckTxInt
0694: 41 DF F7 AND   REG[0xDF],0xF7     
                                        (0542) .DisRxInt:
                                        (0543)      ; Disable Rx Interrupt
                                        (0544)    M8C_DisableIntMask UART_RX_INT_REG, UART_RX_INT_MASK
                                        (0545) 
                                        (0546) .CheckTxInt:
0697: 18       POP   A                  (0547)    pop  A
0698: 21 02    AND   A,0x2              (0548)    and  A,UART_ENABLE_TX_INT
069A: A0 06    JZ    0x06A1             (0549)    jz   .DisTxInt
069C: 43 DF 04 OR    REG[0xDF],0x4      
                                        (0550)      ; Enable Tx Interrupt
                                        (0551)    M8C_EnableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
069F: 80 04    JMP   0x06A4             (0552)    jmp  .End_IntCntl
06A1: 41 DF FB AND   REG[0xDF],0xFB     
                                        (0553) .DisTxInt:
                                        (0554)      ; Disable Tx Interrupt
                                        (0555)    M8C_DisableIntMask UART_TX_INT_REG, UART_TX_INT_MASK
                                        (0556) 
                                        (0557) .End_IntCntl:
                                        (0558)    RAM_EPILOGUE RAM_USE_CLASS_1
06A4: 7F       RET                      (0559)    ret
                                        (0560) .ENDSECTION
                                        (0561) 
                                        (0562) 
                                        (0563) ;=============================================================================
                                        (0564) ;=============================================================================
                                        (0565) ;
                                        (0566) ;     High-Level Commands
                                        (0567) ;
                                        (0568) ;=============================================================================
                                        (0569) ;=============================================================================
                                        (0570) 
                                        (0571) 
                                        (0572) ;-----------------------------------------------------------------------------
                                        (0573) ;  FUNCTION NAME: UART_PutSHexByte
                                        (0574) ;
                                        (0575) ;  DESCRIPTION:
                                        (0576) ;     Print a byte in Hex (two characters) to the UART Tx
                                        (0577) ;-----------------------------------------------------------------------------
                                        (0578) ;
                                        (0579) ;  ARGUMENTS:
                                        (0580) ;     A  => (BYTE) Data/char to be printed
                                        (0581) ;
                                        (0582) ;  RETURNS:
                                        (0583) ;     none.
                                        (0584) ;
                                        (0585) ;  SIDE EFFECTS:
                                        (0586) ;    The A and X registers may be modified by this or future implementations
                                        (0587) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0588) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0589) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0590) ;    functions.
                                        (0591) ;
                                        (0592) .LITERAL
                                        (0593) UART_HEX_STR:
                                        (0594)      DS    "0123456789ABCDEF"
                                        (0595) .ENDLITERAL
                                        (0596) 
                                        (0597) .SECTION
                                        (0598)  UART_PutSHexByte:
                                        (0599) _UART_PutSHexByte:
                                        (0600)    RAM_PROLOGUE RAM_USE_CLASS_1
06B5: 08       PUSH  A                  (0601)    push  A                             ; Save lower nibble
06B6: 67       ASR   A                  (0602)    asr   A                             ; Shift high nibble to right
06B7: 67       ASR   A                  (0603)    asr   A
06B8: 67       ASR   A                  (0604)    asr   A
06B9: 67       ASR   A                  (0605)    asr   A
06BA: 21 0F    AND   A,0xF              (0606)    and   A,0Fh                         ; Mask off nibble
06BC: FF E7    INDEX 0x06A5             (0607)    index UART_HEX_STR                  ; Get Hex value
06BE: 90 0F    CALL  _UART_PutChar      (0608)    call  UART_PutChar                  ; Write data to screen
06C0: 18       POP   A                  (0609)    pop   A                             ; Restore value
06C1: 21 0F    AND   A,0xF              (0610)    and   A,0Fh                         ; Mask off lower nibble
06C3: FF E0    INDEX 0x06A5             (0611)    index UART_HEX_STR                  ; Get Hex value
06C5: 90 08    CALL  _UART_PutChar      (0612)    call  UART_PutChar                  ; Write data to screen
                                        (0613)    RAM_EPILOGUE RAM_USE_CLASS_1
06C7: 7F       RET                      (0614)    ret
                                        (0615) .ENDSECTION
                                        (0616) 
                                        (0617) 
                                        (0618) .SECTION
                                        (0619) ;-----------------------------------------------------------------------------
                                        (0620) ;  FUNCTION NAME: UART_PutSHexInt
                                        (0621) ;
                                        (0622) ;  DESCRIPTION:
                                        (0623) ;     Print an Int in Hex (four characters) to UART Tx
                                        (0624) ;-----------------------------------------------------------------------------
                                        (0625) ;
                                        (0626) ;  ARGUMENTS:
                                        (0627) ;     Pointer to string
                                        (0628) ;     A  => ASB of Int
                                        (0629) ;     X  => MSB of Int
                                        (0630) ;
                                        (0631) ;  RETURNS:
                                        (0632) ;     none.
                                        (0633) ;
                                        (0634) ;  SIDE EFFECTS:
                                        (0635) ;    The A and X registers may be modified by this or future implementations
                                        (0636) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0637) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0638) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0639) ;    functions.
                                        (0640) ;
                                        (0641) 
                                        (0642)  UART_PutSHexInt:
                                        (0643) _UART_PutSHexInt:
                                        (0644)    RAM_PROLOGUE RAM_USE_CLASS_1
06C8: 4B       SWAP  A,X                (0645)    swap  A,X
06C9: 9F EA    CALL  _UART_PutSHexByte  (0646)    call  UART_PutSHexByte              ; Print MSB
06CB: 5B       MOV   A,X                (0647)    mov   A,X                           ; Move LSB into position
06CC: 9F E7    CALL  _UART_PutSHexByte  (0648)    call  UART_PutSHexByte              ; Print LSB
                                        (0649)    RAM_EPILOGUE RAM_USE_CLASS_1
06CE: 7F       RET                      (0650)    ret
06CF: 49 4B 10 TST   REG[0x4B],0x10     
06D2: AF FC    JZ    _UART_PutChar      
06D4: 60 49    MOV   REG[0x49],A        
                                        (0651) .ENDSECTION
                                        (0652) 
                                        (0653) 
                                        (0654) .SECTION
                                        (0655) ;-----------------------------------------------------------------------------
                                        (0656) ;  FUNCTION NAME: UART_PutChar
                                        (0657) ;
                                        (0658) ;  DESCRIPTION:
                                        (0659) ;     Send character out through UART TX port.
                                        (0660) ;-----------------------------------------------------------------------------
                                        (0661) ;
                                        (0662) ;  ARGUMENTS:
                                        (0663) ;     A has Character to send to UART Tx Port
                                        (0664) ;
                                        (0665) ;  RETURNS:
                                        (0666) ;     none
                                        (0667) ;
                                        (0668) ;  SIDE EFFECTS:
                                        (0669) ;    The A and X registers may be modified by this or future implementations
                                        (0670) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0671) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0672) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0673) ;    functions.
                                        (0674) ;
                                        (0675) 
                                        (0676)    macro InLinePutChar( Source )
                                        (0677) .BufEmptyWaitLoop:
                                        (0678)    tst REG[UART_TX_CONTROL_REG], UART_TX_BUFFER_EMPTY     ; Check Tx Status
                                        (0679)    jz  .BufEmptyWaitLoop
                                        (0680)    mov REG[UART_TX_BUFFER_REG], @Source          ; Write data to Tx Port
                                        (0681)    endm
                                        (0682) 
                                        (0683)  UART_PutChar:
                                        (0684) _UART_PutChar:
                                        (0685)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0686)    InLinePutChar A
                                        (0687)    RAM_EPILOGUE RAM_USE_CLASS_1
06D6: 7F       RET                      (0688)    ret
                                        (0689) .ENDSECTION
                                        (0690) 
                                        (0691) 
                                        (0692) .SECTION
                                        (0693) ;-----------------------------------------------------------------------------
                                        (0694) ;  FUNCTION NAME: UART_cGetChar
                                        (0695) ;
                                        (0696) ;  DESCRIPTION:
                                        (0697) ;     Read character from UART RX port.
                                        (0698) ;-----------------------------------------------------------------------------
                                        (0699) ;
                                        (0700) ;  ARGUMENTS:
                                        (0701) ;      none
                                        (0702) ;
                                        (0703) ;  RETURNS:
                                        (0704) ;     char that is returned from UART
                                        (0705) ;
                                        (0706) ;  SIDE EFFECTS:
                                        (0707) ;    The A and X registers may be modified by this or future implementations
                                        (0708) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0709) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0710) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0711) ;    functions.
                                        (0712) ;
                                        (0713) ;    Program flow will stay in this function until a character is received.
                                        (0714) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0715) ;    the delay between characters is less than the watchdog timeout.
                                        (0716) ;
                                        (0717)  UART_cGetChar:
                                        (0718) _UART_cGetChar:
                                        (0719)    RAM_PROLOGUE RAM_USE_CLASS_1
06D7: 49 4F 08 TST   REG[0x4F],0x8      (0720)    tst REG[UART_RX_CONTROL_REG],UART_RX_REG_FULL    ; Check if a character is ready
06DA: AF FC    JZ    _UART_cGetChar     (0721)    jz  UART_cGetChar                             ; If not loop
06DC: 5D 4E    MOV   A,REG[0x4E]        (0722)    mov A, REG[UART_RX_BUFFER_REG]                ; Get character
                                        (0723)    RAM_EPILOGUE RAM_USE_CLASS_1
06DE: 7F       RET                      (0724)    ret
                                        (0725) .ENDSECTION
                                        (0726) 
                                        (0727) 
                                        (0728) .SECTION
                                        (0729) ;-----------------------------------------------------------------------------
                                        (0730) ;  FUNCTION NAME: UART_cReadChar
                                        (0731) ;
                                        (0732) ;  DESCRIPTION:
                                        (0733) ;     Read character from UART RX port.
                                        (0734) ;-----------------------------------------------------------------------------
                                        (0735) ;
                                        (0736) ;  ARGUMENTS:
                                        (0737) ;      none
                                        (0738) ;
                                        (0739) ;  RETURNS:
                                        (0740) ;     char that is returned from UART
                                        (0741) ;
                                        (0742) ;  SIDE EFFECTS:
                                        (0743) ;    The A and X registers may be modified by this or future implementations
                                        (0744) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0745) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0746) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0747) ;    functions.
                                        (0748) ;
                                        (0749) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0750) ;    implies a valid character or an error condition occured.
                                        (0751) ;
                                        (0752)  UART_cReadChar:
                                        (0753) _UART_cReadChar:
                                        (0754)    RAM_PROLOGUE RAM_USE_CLASS_1
06DF: 5D 4F    MOV   A,REG[0x4F]        (0755)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
06E1: 08       PUSH  A                  (0756)    push A
06E2: 21 08    AND   A,0x8              (0757)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
06E4: B0 04    JNZ   0x06E9             (0758)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
06E6: 18       POP   A                  (0759)    pop  A
06E7: 80 0B    JMP   0x06F3             (0760)    jmp  .RX_NO_VALID_CHAR
                                        (0761) 
                                        (0762) .RX_DATA_RDY:
06E9: 5D 4E    MOV   A,REG[0x4E]        (0763)    mov  A,REG[UART_RX_BUFFER_REG ]          
06EB: 4B       SWAP  A,X                (0764)    swap A,X                                                ; determine if data is valid
                                        (0765) 
06EC: 18       POP   A                  (0766)    pop  A                                                  ; Check for errors
06ED: 21 A0    AND   A,0xA0             (0767)    and  A,(UART_RX_PARITY_ERROR | UART_RX_FRAMING_ERROR)
06EF: B0 03    JNZ   0x06F3             (0768)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
06F1: 4B       SWAP  A,X                (0769)    swap A,X                                                ; Put data in A and exit
                                        (0770)    RAM_EPILOGUE RAM_USE_CLASS_1
06F2: 7F       RET                      (0771)    ret
                                        (0772) 
                                        (0773) .RX_NO_VALID_CHAR:
06F3: 50 00    MOV   A,0x0              (0774)    mov A,0x00                                              ; Zero out character
                                        (0775) 
                                        (0776)  End_UART_cReadChar:
                                        (0777)    RAM_EPILOGUE RAM_USE_CLASS_1
06F5: 7F       RET                      (0778)    ret
                                        (0779) .ENDSECTION
                                        (0780) 
                                        (0781) 
                                        (0782) .SECTION
                                        (0783) ;-----------------------------------------------------------------------------
                                        (0784) ;  FUNCTION NAME: UART_iReadChar
                                        (0785) ;
                                        (0786) ;  WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0787) ;  to just set a value in the upper byte if error conditions exists.
                                        (0788) ;
                                        (0789) ;  DESCRIPTION:
                                        (0790) ;     Read character from UART RX port.
                                        (0791) ;-----------------------------------------------------------------------------
                                        (0792) ;
                                        (0793) ;  ARGUMENTS:
                                        (0794) ;      none
                                        (0795) ;
                                        (0796) ;  RETURNS:
                                        (0797) ;     An integer value is returned.  A negative value inplies and error
                                        (0798) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0799) ;
                                        (0800) ;     Error Codes:
                                        (0801) ;        0x80CC    Parity Error
                                        (0802) ;        0x40CC    Overrun Error
                                        (0803) ;        0x20CC    Framing Error
                                        (0804) ;        0x01CC    No Data available
                                        (0805) ;
                                        (0806) ;  SIDE EFFECTS:
                                        (0807) ;    The A and X registers may be modified by this or future implementations
                                        (0808) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0809) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0810) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0811) ;    functions.
                                        (0812) ;
                                        (0813)  UART_iReadChar:
                                        (0814) _UART_iReadChar:
                                        (0815)    RAM_PROLOGUE RAM_USE_CLASS_1
06F6: 5D 4F    MOV   A,REG[0x4F]        (0816)    mov  A,REG[UART_RX_CONTROL_REG]                         ; Get Status of RX
                                        (0817)                                                            ; Mask only errors and data ready
06F8: 21 E8    AND   A,0xE8             (0818)    and  A,(UART_RX_ERROR|UART_RX_REG_FULL)
06FA: 08       PUSH  A                  (0819)    push A
06FB: 21 08    AND   A,0x8              (0820)    and  A,UART_RX_COMPLETE                                 ; Check if a character is ready
06FD: B0 07    JNZ   0x0705             (0821)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
06FF: 18       POP   A                  (0822)    pop  A
0700: 29 01    OR    A,0x1              (0823)    or   A,UART_RX_NO_DATA                                  ; Add no data flag
0702: 4B       SWAP  A,X                (0824)    swap A,X
0703: 80 07    JMP   0x070B             (0825)    jmp  End_UART_iReadChar
                                        (0826) 
                                        (0827) .RX_GET_DATA:
0705: 18       POP   A                  (0828)    pop  A
0706: 21 E0    AND   A,0xE0             (0829)    and  A,UART_RX_ERROR
0708: 4B       SWAP  A,X                (0830)    swap A,X
0709: 5D 4E    MOV   A,REG[0x4E]        (0831)    mov  A,REG[UART_RX_BUFFER_REG ]                         ; Read data first, then
                                        (0832)                                                            ; determine if data is valid
                                        (0833) 
                                        (0834)  End_UART_iReadChar:
                                        (0835)    RAM_EPILOGUE RAM_USE_CLASS_1
070B: 7F       RET                      (0836)    ret
070C: 70 BF    AND   F,0xBF             
070E: 60 D3    MOV   REG[0xD3],A        
                                        (0837) .ENDSECTION
                                        (0838) 
                                        (0839) 
                                        (0840) .SECTION
                                        (0841) ;-----------------------------------------------------------------------------
                                        (0842) ;  FUNCTION NAME: UART_PutString
                                        (0843) ;
                                        (0844) ;  DESCRIPTION:
                                        (0845) ;     Send String out through UART TX port.
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS:
                                        (0849) ;     Pointer to String
                                        (0850) ;     A has MSB of string address
                                        (0851) ;     X has LSB of string address
                                        (0852) ;
                                        (0853) ;  RETURNS:
                                        (0854) ;     none
                                        (0855) ;
                                        (0856) ;  SIDE EFFECTS:
                                        (0857) ;    The A and X registers may be modified by this or future implementations
                                        (0858) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0859) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0860) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0861) ;    functions.
                                        (0862) ;          
                                        (0863) ;    Currently only the page pointer registers listed below are modified: 
                                        (0864) ;          IDX_PP
                                        (0865) ;
                                        (0866)  UART_PutString:
                                        (0867) _UART_PutString:
                                        (0868)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0869)    RAM_SETPAGE_IDX A
                                        (0870) .PutStringLoop:
0710: 52 00    MOV   A,[X+0]            (0871)    mov   A,[X]                                   ; Get value pointed to by X
0712: A0 06    JZ    0x0719             (0872)    jz    End_PutString                           ; Check for end of string
0714: 9F B9    CALL  _UART_PutChar      (0873)    call  UART_PutChar                            ; Send character to Tx port
0716: 75       INC   X                  (0874)    inc   X                                       ; Advance pointer to next character
0717: 8F F8    JMP   0x0710             (0875)    jmp   .PutStringLoop                          ; Get next character
0719: 70 3F    AND   F,0x3F             
071B: 71 C0    OR    F,0xC0             
                                        (0876) 
                                        (0877) End_PutString:
                                        (0878)    RAM_EPILOGUE RAM_USE_CLASS_3
071D: 7F       RET                      (0879)    ret
071E: 70 BF    AND   F,0xBF             
0720: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0880) .ENDSECTION
                                        (0881)     
                                        (0882) .SECTION
                                        (0883) ;-----------------------------------------------------------------------------
                                        (0884) ;  FUNCTION NAME: UART_Write
                                        (0885) ;
                                        (0886) ;  DESCRIPTION:
                                        (0887) ;     Send String of length X to serial port
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;
                                        (0890) ;  ARGUMENTS:
                                        (0891) ;     Pointer to String
                                        (0892) ;     [SP-5] Count of characters to send
                                        (0893) ;     [SP-4] has MSB of string address
                                        (0894) ;     [SP-3] has LSB of string address
                                        (0895) ;
                                        (0896) ;  RETURNS:
                                        (0897) ;     none
                                        (0898) ;
                                        (0899) ;  SIDE EFFECTS:
                                        (0900) ;    The A and X registers may be modified by this or future implementations
                                        (0901) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0902) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0903) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0904) ;    functions.
                                        (0905) ;          
                                        (0906) ;    Currently only the page pointer registers listed below are modified: 
                                        (0907) ;          IDX_PP
                                        (0908) ;
                                        (0909) CNT_LEN:    equ -5                               ; Length of data to send
                                        (0910) STR_MSB:    equ -4                               ; MSB pointer of string 
                                        (0911) STR_LSB:    equ -3                               ; LSB pointer of string 
                                        (0912) 
                                        (0913)  UART_Write:
                                        (0914) _UART_Write:
                                        (0915)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0916)    RAM_SETPAGE_IDX2STK                           ; Refer indexed addrs to the stack
0723: 4F       MOV   X,SP               (0917)    mov   X, SP                                   ; Establish the frame pointer 
                                        (0918) 
                                        (0919) .NextByteLoop:
0724: 52 FB    MOV   A,[X-5]            (0920)    mov   A, [X+CNT_LEN]                          ; End of the string?
0726: A0 1A    JZ    0x0741             (0921)    jz    .End_Write                              ;   Yes, prepare to exit
0728: 7B FB    DEC   [X-5]              (0922)    dec   [X+CNT_LEN]                             ; Decrement counter
                                        (0923) 
                                        (0924)    IF SYSTEM_LARGE_MEMORY_MODEL
072A: 52 FC    MOV   A,[X-4]            (0925)    mov   A, [X+STR_MSB]                          ; Load pointer to char to send
                                        (0926)    ENDIF
                                        (0927) 
072C: 59 FD    MOV   X,[X-3]            (0928)    mov   X, [X+STR_LSB]                          ; Load pointer to char to send
072E: 60 D3    MOV   REG[0xD3],A        
                                        (0929)    RAM_SETPAGE_IDX A                             ; switch index pages
0730: 52 00    MOV   A,[X+0]            (0930)    mov   A, [X]                                  ; Grab the data
0732: 49 4B 10 TST   REG[0x4B],0x10     
0735: AF FC    JZ    0x0732             
0737: 60 49    MOV   REG[0x49],A        
                                        (0931)    InLinePutChar A                               ; Put data in empty TX buf reg
0739: 4F       MOV   X,SP               (0932)    mov   X, SP                                   ; Recover frame pointer
073A: 62 D3 07 MOV   REG[0xD3],0x7      
                                        (0933)    RAM_SETPAGE_IDX2STK                           ; Prepare for stack access
073D: 77 FD    INC   [X-3]              (0934)    inc   [X+STR_LSB]                             ; Point to next byte, but do not
073F: 8F E4    JMP   0x0724             (0935)    jmp   .NextByteLoop                           ;    cross RAM page boundary!
0741: 70 3F    AND   F,0x3F             
0743: 71 C0    OR    F,0xC0             
                                        (0936) 
                                        (0937) .End_Write:
                                        (0938)    RAM_EPILOGUE RAM_USE_CLASS_3
0745: 7F       RET                      (0939)    ret
                                        (0940) .ENDSECTION
                                        (0941)     
                                        (0942) 
                                        (0943) .SECTION
                                        (0944) ;-----------------------------------------------------------------------------
                                        (0945) ;  FUNCTION NAME: UART_CWrite
                                        (0946) ;
                                        (0947) ;             WARNING WARNING NOT COMPLETE
                                        (0948) ;
                                        (0949) ;  DESCRIPTION:
                                        (0950) ;     Send String of length X to serial port
                                        (0951) ;-----------------------------------------------------------------------------
                                        (0952) ;
                                        (0953) ;  ARGUMENTS:
                                        (0954) ;     [SP-4] MSB of Count of character to send
                                        (0955) ;     [SP-3] LSB of Count of character to send
                                        (0956) ;     [SP-2] has MSB of string address
                                        (0957) ;     [SP-1] has LSB of string address
                                        (0958) ;
                                        (0959) ;  RETURNS:
                                        (0960) ;     none
                                        (0961) ;
                                        (0962) ;  SIDE EFFECTS:
                                        (0963) ;    The A and X registers may be modified by this or future implementations
                                        (0964) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0965) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0966) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0967) ;    functions.
                                        (0968) ;
                                        (0969) CLEN_MSB:   equ -6           ; MSB Length of data to send
                                        (0970) CLEN_LSB:   equ -5           ; LSB Length of data to send
                                        (0971) CSTR_MSB:   equ -4           ; MSB pointer of string
                                        (0972) CSTR_LSB:   equ -3           ; LSB pointer of string
                                        (0973) 
                                        (0974)  UART_CWrite:
                                        (0975) _UART_CWrite:
                                        (0976)    RAM_PROLOGUE RAM_USE_CLASS_2
0746: 4F       MOV   X,SP               (0977)    mov   X,SP
                                        (0978) .CW_Loop:
0747: 3D FA 00 CMP   [X-6],0x0          (0979)    cmp   [X+CLEN_MSB],0x00                  ; Check for zero counter
074A: B0 06    JNZ   0x0751             (0980)    jnz   .CW_WRITEIT
074C: 3D FB 00 CMP   [X-5],0x0          (0981)    cmp   [X+CLEN_LSB],0x00
074F: A0 1D    JZ    0x076D             (0982)    jz    .End_CWrite                        ; Leave if done
                                        (0983) 
                                        (0984) .CW_WRITEIT:                                
0751: 10       PUSH  X                  (0985)    push  X                                  ; Save frame pointer
0752: 52 FC    MOV   A,[X-4]            (0986)    mov   A,[X+CSTR_MSB]
0754: 59 FD    MOV   X,[X-3]            (0987)    mov   X,[X+CSTR_LSB]
0756: 28       ROMX                     (0988)    romx                                     ; Get character from ROM
0757: 49 4B 10 TST   REG[0x4B],0x10     
075A: AF FC    JZ    0x0757             
075C: 60 49    MOV   REG[0x49],A        
                                        (0989)    InLinePutChar A                          ; Put data in empty TX buf reg
075E: 20       POP   X                  (0990)    pop   X                                  ; Restore frame pointer
075F: 07 FD 01 ADD   [X-3],0x1          (0991)    add   [X+CSTR_LSB],1                     ; Increment the string pointer
0762: 0F FC 00 ADC   [X-4],0x0          (0992)    adc   [X+CSTR_MSB],0
0765: 17 FB 01 SUB   [X-5],0x1          (0993)    sub   [X+CLEN_LSB],0x01                  ; Dec the counter
0768: 1F FA 00 SBB   [X-6],0x0          (0994)    sbb   [X+CLEN_MSB],0x00
076B: 8F DB    JMP   0x0747             (0995)    jmp   .CW_Loop
076D: 70 3F    AND   F,0x3F             
076F: 71 C0    OR    F,0xC0             
                                        (0996) 
                                        (0997) .End_CWrite:
                                        (0998)    RAM_EPILOGUE RAM_USE_CLASS_2
0771: 7F       RET                      (0999)    ret
                                        (1000) .ENDSECTION
                                        (1001) 
                                        (1002) 
                                        (1003) .SECTION
                                        (1004) ;-----------------------------------------------------------------------------
                                        (1005) ;  FUNCTION NAME: UART_CPutString
                                        (1006) ;
                                        (1007) ;  DESCRIPTION:
                                        (1008) ;     Send String out through UART TX port.
                                        (1009) ;-----------------------------------------------------------------------------
                                        (1010) ;
                                        (1011) ;  ARGUMENTS:
                                        (1012) ;     Pointer to String
                                        (1013) ;     A has MSB of string address
                                        (1014) ;     X has LSB of string address
                                        (1015) ;
                                        (1016) ;  RETURNS:
                                        (1017) ;     none
                                        (1018) ;
                                        (1019) ;  SIDE EFFECTS:
                                        (1020) ;    The A and X registers may be modified by this or future implementations
                                        (1021) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1022) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1023) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1024) ;    functions.
                                        (1025) ;
                                        (1026)  UART_CPutString:
                                        (1027) _UART_CPutString:
                                        (1028)    RAM_PROLOGUE RAM_USE_CLASS_1
0772: 08       PUSH  A                  (1029)    push  A                                       ; Store ROM pointer
0773: 10       PUSH  X                  (1030)    push  X
0774: 28       ROMX                     (1031)    romx                                          ; Get character from ROM
0775: A0 0B    JZ    0x0781             (1032)    jz    .End_CPutString
0777: 9F 56    CALL  _UART_PutChar      (1033)    call  UART_PutChar                            ; Print character
0779: 20       POP   X                  (1034)    pop   X
077A: 18       POP   A                  (1035)    pop   A
077B: 75       INC   X                  (1036)    inc   X                                       ; Inc LSB of pointer
077C: DF F5    JNC   _UART_CPutString   (1037)    jnc   UART_CPutString                         ; Check for carry
077E: 74       INC   A                  (1038)    inc   A                                       ; Inc MSB of pointer
077F: 8F F2    JMP   _UART_CPutString   (1039)    jmp   UART_CPutString
                                        (1040) 
                                        (1041) 
                                        (1042) .End_CPutString:
0781: 38 FE    ADD   SP,0xFE            (1043)    add   SP, -2
                                        (1044)    RAM_EPILOGUE RAM_USE_CLASS_1
0783: 7F       RET                      (1045)    ret
                                        (1046) .ENDSECTION
                                        (1047) 
                                        (1048) 
                                        (1049) .SECTION
                                        (1050) ;-----------------------------------------------------------------------------
                                        (1051) ;  FUNCTION NAME: UART_PutCRLF
                                        (1052) ;
                                        (1053) ;  DESCRIPTION:
                                        (1054) ;     Send a CR and LF
                                        (1055) ;-----------------------------------------------------------------------------
                                        (1056) ;
                                        (1057) ;  ARGUMENTS:
                                        (1058) ;     none.
                                        (1059) ;
                                        (1060) ;  RETURNS:
                                        (1061) ;     none.
                                        (1062) ;
                                        (1063) ;  SIDE EFFECTS:
                                        (1064) ;    The A and X registers may be modified by this or future implementations
                                        (1065) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1066) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1067) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1068) ;    functions.
                                        (1069) ;
                                        (1070)  UART_PutCRLF:
                                        (1071) _UART_PutCRLF:
                                        (1072)    RAM_PROLOGUE RAM_USE_CLASS_1
0784: 50 0D    MOV   A,0xD              (1073)    mov  A,0x0D                        ; Send CR
0786: 9F 47    CALL  _UART_PutChar      (1074)    call UART_PutChar
0788: 50 0A    MOV   A,0xA              (1075)    mov  A,0x0A                        ; Send LF
078A: 9F 43    CALL  _UART_PutChar      (1076)    call UART_PutChar
                                        (1077)    RAM_EPILOGUE RAM_USE_CLASS_1
078C: 7F       RET                      (1078)    ret
078D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1079) .ENDSECTION
                                        (1080) 
                                        (1081) 
                                        (1082) IF (UART_RXBUF_ENABLE)
                                        (1083) ;=============================================================================
                                        (1084) ;=============================================================================
                                        (1085) ;
                                        (1086) ;     Command Buffer commands
                                        (1087) ;
                                        (1088) ;=============================================================================
                                        (1089) ;=============================================================================
                                        (1090) 
                                        (1091) .SECTION
                                        (1092) ;-----------------------------------------------------------------------------
                                        (1093) ;  FUNCTION NAME: UART_CmdReset
                                        (1094) ;
                                        (1095) ;  DESCRIPTION:
                                        (1096) ;     Reset command string and status flags
                                        (1097) ;-----------------------------------------------------------------------------
                                        (1098) ;
                                        (1099) ;  ARGUMENTS:
                                        (1100) ;     none.
                                        (1101) ;
                                        (1102) ;  RETURNS:
                                        (1103) ;     none.
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;     Clear the command buffer, command counter, and flag.
                                        (1117) ;
                                        (1118)  UART_CmdReset:
                                        (1119) _UART_CmdReset:
                                        (1120)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1121)    RAM_SETPAGE_CUR >UART_aRxBuffer
0790: 55 D3 00 MOV   [tx_rx_table+192],0x0(1122)    mov [UART_aRxBuffer], 0x00
0793: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1123)    RAM_SETPAGE_CUR >UART_bRxCnt
0796: 55 01 00 MOV   [0x1],0x0          (1124)    mov [UART_bRxCnt], 0x00
0799: 26 00 00 AND   [0x0],0x0          (1125)    and [UART_fStatus], 0x00
079C: 62 D0 01 MOV   REG[0xD0],0x1      
                                        (1126)    RAM_SETPAGE_CUR >ptrParam
079F: 55 A8 00 MOV   [N_LIGHT_BINS+1],0x0(1127)    mov [ptrParam],0x00
                                        (1128)    RAM_EPILOGUE RAM_USE_CLASS_4
07A2: 7F       RET                      (1129)    ret
07A3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1130) .ENDSECTION
                                        (1131) 
                                        (1132) 
                                        (1133) .SECTION
                                        (1134) ;-----------------------------------------------------------------------------
                                        (1135) ;  FUNCTION NAME: UART_bCmdCheck
                                        (1136) ;
                                        (1137) ;  DESCRIPTION:
                                        (1138) ;     Check to see if valid command in buffer.
                                        (1139) ;-----------------------------------------------------------------------------
                                        (1140) ;
                                        (1141) ;  ARGUMENTS:
                                        (1142) ;     none.
                                        (1143) ;
                                        (1144) ;  RETURNS:
                                        (1145) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1146) ;                     Returns non-zero value in A if command is valid.
                                        (1147) ;
                                        (1148) ;  SIDE EFFECTS:
                                        (1149) ;    The A and X registers may be modified by this or future implementations
                                        (1150) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1151) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1152) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1153) ;    functions.
                                        (1154) ;          
                                        (1155) ;    Currently only the page pointer registers listed below are modified: 
                                        (1156) ;          CUR_PP
                                        (1157) ;
                                        (1158) ;  THEORY of OPERATION or PROCEDURE:
                                        (1159) ;     Read the status and control register.
                                        (1160) ;
                                        (1161)  UART_bCmdCheck:
                                        (1162) _UART_bCmdCheck:
                                        (1163)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1164)    RAM_SETPAGE_CUR >UART_fStatus
07A6: 51 00    MOV   A,[0x0]            (1165)    mov A,  [UART_fStatus]
07A8: 21 01    AND   A,0x1              (1166)    and A, UART_RX_BUF_CMDTERM                    ; Mask off Command status
                                        (1167)    RAM_EPILOGUE RAM_USE_CLASS_4
07AA: 7F       RET                      (1168)    ret
07AB: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1169) .ENDSECTION
                                        (1170)     
                                        (1171) 
                                        (1172) .SECTION
                                        (1173) ;-----------------------------------------------------------------------------
                                        (1174) ;  FUNCTION NAME: UART_bErrCheck
                                        (1175) ;
                                        (1176) ;  DESCRIPTION:
                                        (1177) ;     Check to see if an error has occured since last CmdReset
                                        (1178) ;-----------------------------------------------------------------------------
                                        (1179) ;
                                        (1180) ;  ARGUMENTS:
                                        (1181) ;     none.
                                        (1182) ;
                                        (1183) ;  RETURNS:
                                        (1184) ;     BYTE  fStatus - Status of command receive buffer.
                                        (1185) ;                     Returns non-zero value in A if command is valid.
                                        (1186) ;           0x80 => Parity Error
                                        (1187) ;           0x40 => OverRun Error
                                        (1188) ;           0x20 => Framing Error
                                        (1189) ;           0x10 => Software Buffer OverRun
                                        (1190) ;
                                        (1191) ;  SIDE EFFECTS:
                                        (1192) ;    The A and X registers may be modified by this or future implementations
                                        (1193) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1194) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1195) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1196) ;    functions.
                                        (1197) ;          
                                        (1198) ;    Currently only the page pointer registers listed below are modified: 
                                        (1199) ;          CUR_PP
                                        (1200) ;     Error Status is clear when read.
                                        (1201) ;
                                        (1202) ;  THEORY of OPERATION or PROCEDURE:
                                        (1203) ;     Read RX buffer error status and clear status
                                        (1204) ;
                                        (1205)  UART_bErrCheck:
                                        (1206) _UART_bErrCheck:
                                        (1207)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1208)    RAM_SETPAGE_CUR >UART_fStatus
07AE: 51 00    MOV   A,[0x0]            (1209)    mov A,  [UART_fStatus]
07B0: 21 F0    AND   A,0xF0             (1210)    and A, UART_RX_BUF_ERROR                      ; Mask off Error status
07B2: 26 00 0F AND   [0x0],0xF          (1211)    and [UART_fStatus], ~UART_RX_BUF_ERROR
                                        (1212)    RAM_EPILOGUE RAM_USE_CLASS_4
07B5: 7F       RET                      (1213)    ret
07B6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1214) .ENDSECTION
                                        (1215) 
                                        (1216) .SECTION
                                        (1217) ;-----------------------------------------------------------------------------
                                        (1218) ;  FUNCTION NAME: UART_bCmdLength
                                        (1219) ;
                                        (1220) ;  DESCRIPTION:
                                        (1221) ;     Get length of command string
                                        (1222) ;-----------------------------------------------------------------------------
                                        (1223) ;
                                        (1224) ;  ARGUMENTS:
                                        (1225) ;     none.
                                        (1226) ;
                                        (1227) ;  RETURNS:
                                        (1228) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (1229) ;
                                        (1230) ;  SIDE EFFECTS:
                                        (1231) ;    The A and X registers may be modified by this or future implementations
                                        (1232) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1233) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1234) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1235) ;    functions.
                                        (1236) ;          
                                        (1237) ;    Currently only the page pointer registers listed below are modified: 
                                        (1238) ;          CUR_PP
                                        (1239) ;
                                        (1240)  UART_bCmdLength:
                                        (1241) _UART_bCmdLength:
                                        (1242)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1243)    RAM_SETPAGE_CUR >UART_bRxCnt
07B9: 51 01    MOV   A,[0x1]            (1244)    mov A,  [UART_bRxCnt]
                                        (1245)    RAM_EPILOGUE RAM_USE_CLASS_4
07BB: 7F       RET                      (1246)    ret
07BC: 70 BF    AND   F,0xBF             
07BE: 62 D0 01 MOV   REG[0xD0],0x1      
                                        (1247) .ENDSECTION
                                        (1248) 
                                        (1249) 
                                        (1250) .SECTION
                                        (1251) ;-----------------------------------------------------------------------------
                                        (1252) ;  FUNCTION NAME: UART_szGetParam
                                        (1253) ;
                                        (1254) ;  DESCRIPTION:
                                        (1255) ;      Return next parameter from UART Rx buffer
                                        (1256) ;-----------------------------------------------------------------------------
                                        (1257) ;
                                        (1258) ;  ARGUMENTS:  none
                                        (1259) ;
                                        (1260) ;  RETURNS:
                                        (1261) ;     A => MSB of parameter address
                                        (1262) ;     X => LSB of parameter address
                                        (1263) ;
                                        (1264) ;  SIDE EFFECTS:
                                        (1265) ;    The A and X registers may be modified by this or future implementations
                                        (1266) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1267) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1268) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1269) ;    functions.
                                        (1270) ;          
                                        (1271) ;    Currently only the page pointer registers listed below are modified: 
                                        (1272) ;          CUR_PP
                                        (1273) ;          IDX_PP
                                        (1274) ;
                                        (1275) ;     The receive string is modified by placing Null characters at the end
                                        (1276) ;     of each parameter as they are recovered.
                                        (1277) ;
                                        (1278) ;  THEORY OF OPERATION:
                                        (1279) ;     This function is a stateful generator of addresses to the "parameters"
                                        (1280) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (1281) ;     each lexically distinct element into a null-terminated string by replacing
                                        (1282) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (1283) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (1284) ;     offset. The generator is initialized by a call to the function
                                        (1285) ;     UART_CmdReset which resets the entire buffer to the 'empty'
                                        (1286) ;     state. Typically this function, UART_szGetParam, is
                                        (1287) ;     not called until the buffer has been loaded with an entire command
                                        (1288) ;     (See UART_bCmdCheck).
                                        (1289) ;
                                        (1290) ;     Note, there is no special distinction between the "command" and the 
                                        (1291) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (1292) ;     character of the "command"---is also, for the purposes of this function,
                                        (1293) ;     the first "parameter" to which it returns an address.
                                        (1294) ;
                                        (1295) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (1296) ;     is determined at configuration time by a user module parameter.
                                        (1297) ;
                                        (1298)  UART_szGetParam:
                                        (1299) _UART_szGetParam:
                                        (1300)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1301)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (1302)     
                                        (1303)    RAM_SETPAGE_CUR >ptrParam
07C1: 50 D3    MOV   A,0xD3             (1304)    mov   A, <UART_aRxBuffer                 ; Get address to receive buffer
07C3: 02 A8    ADD   A,[N_LIGHT_BINS+1] (1305)    add   A, [ptrParam]                      ; Add string offset
07C5: 5C       MOV   X,A                (1306)    mov   X, A
07C6: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (1307)    RAM_SETPAGE_IDX >UART_aRxBuffer
07C9: 52 00    MOV   A,[X+0]            (1308)    mov   A, [X]                             ; Get character pointed by X
07CB: B0 04    JNZ   0x07D0             (1309)    jnz   .SkipOverDelimitersLoop            ; Null? No,  continue...
07CD: 10       PUSH  X                  (1310)    push  X                                  ;       Yes, Save LSB of current pointer
07CE: 80 33    JMP   0x0802             (1311)    jmp   .End_GetNextParam
                                        (1312)                                             ; Check for delimiter and keep looping until
                                        (1313)                                             ; all leading delimiters have been found.
                                        (1314) .SkipOverDelimitersLoop:
07D0: 39 20    CMP   A,0x20             (1315)    cmp   A, UART_DELIMITER                  ; Do we have a delimiter?
07D2: B0 11    JNZ   0x07E4             (1316)    jnz   .ParamStartFound                   ;   No,  Bingo! found a parameter
07D4: 75       INC   X                  (1317)    inc   X                                  ;   Yes, Increment both index and...
07D5: 76 A8    INC   [N_LIGHT_BINS+1]   (1318)    inc   [ptrParam]                         ;          the stored pointer.
07D7: 52 00    MOV   A,[X+0]            (1319)    mov   A, [X]                             ; Get character pointed by X
07D9: 3C A8 1F CMP   [N_LIGHT_BINS+1],0x1F(1320)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; End of buffer?
07DC: BF F3    JNZ   0x07D0             (1321)    jnz   .SkipOverDelimitersLoop            ;   No,  continue the scan
                                        (1322) 
                                        (1323) .EndOfString:                               ;   Yes, end of string found...
07DE: 10       PUSH  X                  (1324)    push  X                                  ;        Save ptr
                                        (1325) .TerminateString:
07DF: 56 00 00 MOV   [X+0],0x0          (1326)    mov   [X], 0x00                          ; Make sure string is zero
07E2: 80 1F    JMP   0x0802             (1327)    jmp   .End_GetNextParam
                                        (1328) 
                                        (1329) .ParamStartFound:
07E4: 10       PUSH  X                  (1330)    push  X                                  ; Beginning of parameter found, save pointer
                                        (1331) 
                                        (1332) .ParamLoop:                                 ; Now loop until end of parameter found.
07E5: 75       INC   X                  (1333)    inc   X                                  ; Advance pointers.
07E6: 76 A8    INC   [N_LIGHT_BINS+1]   (1334)    inc   [ptrParam]
07E8: 3C A8 1F CMP   [N_LIGHT_BINS+1],0x1F(1335)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
07EB: AF F3    JZ    0x07DF             (1336)    jz    .TerminateString
07ED: 52 00    MOV   A,[X+0]            (1337)    mov   A, [X]                             ; Get next character
07EF: A0 12    JZ    0x0802             (1338)    jz    .End_GetNextParam
07F1: 39 20    CMP   A,0x20             (1339)    cmp   A, UART_DELIMITER                  ; Check if we have a delimiter
07F3: BF F1    JNZ   0x07E5             (1340)    jnz   .ParamLoop                         ; Still no delimiter, loop again
07F5: 56 00 00 MOV   [X+0],0x0          (1341)    mov   [X], 0x00                          ; Replace delimiter with null for end of substring
07F8: 76 A8    INC   [N_LIGHT_BINS+1]   (1342)    inc   [ptrParam]
07FA: 3C A8 1F CMP   [N_LIGHT_BINS+1],0x1F(1343)    cmp   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Check if we are at the end of buffer
07FD: B0 04    JNZ   0x0802             (1344)    jnz   .End_GetNextParam                  ; If not end of string leave
07FF: 55 A8 1F MOV   [N_LIGHT_BINS+1],0x1F(1345)    mov   [ptrParam], (UART_RX_BUFFER_SIZE -1)   ; Reset pointer to end of string.
                                        (1346) 
                                        (1347) .End_GetNextParam:
0802: 20       POP   X                  (1348)    pop   X
0803: 10       PUSH  X                  (1349)    push  X
0804: 3D 00 00 CMP   [X+0],0x0          (1350)    cmp   [X], 0x00
0807: B0 0A    JNZ   0x0812             (1351)    jnz   .NotNullString
0809: 20       POP   X                  (1352)    pop   X
080A: 57 00    MOV   X,0x0              (1353)    mov   X, 0x00
080C: 5B       MOV   A,X                (1354)    mov   A, X
080D: 70 3F    AND   F,0x3F             
080F: 71 C0    OR    F,0xC0             
                                        (1355)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1356)    RAM_EPILOGUE RAM_USE_CLASS_4
0811: 7F       RET                      (1357)    ret
                                        (1358) 
                                        (1359) .NotNullString:
0812: 20       POP   X                  (1360)    pop  X
0813: 50 00    MOV   A,0x0              (1361)    mov  A, >UART_aRxBuffer                  ; Return pointer
0815: 70 3F    AND   F,0x3F             
0817: 71 C0    OR    F,0xC0             
                                        (1362)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (1363)    RAM_EPILOGUE RAM_USE_CLASS_4
0819: 7F       RET                      (1364)    ret
081A: 62 D0 01 MOV   REG[0xD0],0x1      
                                        (1365) .ENDSECTION
                                        (1366) 
                                        (1367) 
                                        (1368) .SECTION
                                        (1369) ;-----------------------------------------------------------------------------
                                        (1370) ;  FUNCTION NAME: UART_szGetRestOfParams
                                        (1371) ;
                                        (1372) ;  DESCRIPTION:
                                        (1373) ;      Returns a pointer to the rest of the UART RX buffer
                                        (1374) ;-----------------------------------------------------------------------------
                                        (1375) ;
                                        (1376) ;  ARGUMENTS:  none
                                        (1377) ;
                                        (1378) ;  RETURNS:
                                        (1379) ;     A => MSB of parameter
                                        (1380) ;     X => LSB of parameter
                                        (1381) ;
                                        (1382) ;  SIDE EFFECTS:
                                        (1383) ;    The A and X registers may be modified by this or future implementations
                                        (1384) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1385) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1386) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1387) ;    functions.
                                        (1388) ;          
                                        (1389) ;    Currently only the page pointer registers listed below are modified: 
                                        (1390) ;          CUR_PP
                                        (1391) ;
                                        (1392)  UART_szGetRestOfParams:
                                        (1393) _UART_szGetRestOfParams:
                                        (1394)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1395)    RAM_SETPAGE_CUR >ptrParam
081D: 50 D3    MOV   A,0xD3             (1396)    mov  A, <UART_aRxBuffer                  ; Get address to receive buffer
081F: 02 A8    ADD   A,[N_LIGHT_BINS+1] (1397)    add  A, [ptrParam]                       ; Add string offset
0821: 5C       MOV   X,A                (1398)    mov  X,A
0822: 50 00    MOV   A,0x0              (1399)    mov  A,>UART_aRxBuffer                   ; Return pointer
                                        (1400)    RAM_EPILOGUE RAM_USE_CLASS_4
0824: 7F       RET                      (1401)    ret
                                        (1402) .ENDSECTION
                                        (1403) 
                                        (1404) ENDIF
                                        (1405) 
                                        (1406) 
                                        (1407) ; End of File UART.asm
FILE: lib\pwm8_speakerint.asm           (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_SpeakerINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_Speaker.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_Speaker_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_Speaker_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_Speaker_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0825: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_SpeakerINT.asm
FILE: lib\pwm8_speaker.asm              (0001) ;;*****************************************************************************
0826: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_Speaker.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_Speaker.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_Speaker_EnableInt
                                        (0030) export _PWM8_Speaker_EnableInt
                                        (0031) export  PWM8_Speaker_DisableInt
                                        (0032) export _PWM8_Speaker_DisableInt
                                        (0033) export  PWM8_Speaker_Start
                                        (0034) export _PWM8_Speaker_Start
                                        (0035) export  PWM8_Speaker_Stop
                                        (0036) export _PWM8_Speaker_Stop
                                        (0037) export  PWM8_Speaker_WritePeriod
                                        (0038) export _PWM8_Speaker_WritePeriod
                                        (0039) export  PWM8_Speaker_WritePulseWidth
                                        (0040) export _PWM8_Speaker_WritePulseWidth
                                        (0041) export  PWM8_Speaker_bReadPulseWidth
                                        (0042) export _PWM8_Speaker_bReadPulseWidth
                                        (0043) export  PWM8_Speaker_bReadCounter
                                        (0044) export _PWM8_Speaker_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_Speaker_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_Speaker_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_Speaker_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_Speaker_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA example_adc_lcd_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_Speaker_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_Speaker_EnableInt:
                                        (0091) _PWM8_Speaker_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_Speaker_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0829: 7F       RET                      (0095)    ret
082A: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_Speaker_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_Speaker_DisableInt:
                                        (0119) _PWM8_Speaker_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_Speaker_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
082D: 7F       RET                      (0123)    ret
082E: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_Speaker_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_Speaker_Start:
                                        (0148) _PWM8_Speaker_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_Speaker_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0831: 7F       RET                      (0152)    ret
0832: 41 2F FE AND   REG[0x2F],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_Speaker_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_Speaker_Stop:
                                        (0176) _PWM8_Speaker_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_Speaker_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0835: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_Speaker_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_Speaker_WritePeriod:
                                        (0206) _PWM8_Speaker_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0836: 60 2D    MOV   REG[0x2D],A        (0208)    mov   reg[PWM8_Speaker_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
0838: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_Speaker_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_Speaker_WritePulseWidth:
                                        (0233) _PWM8_Speaker_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
0839: 60 2E    MOV   REG[0x2E],A        (0235)    mov   reg[PWM8_Speaker_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
083B: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_Speaker_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_Speaker_bReadPulseWidth:
                                        (0260) _PWM8_Speaker_bReadPulseWidth:
                                        (0261)  bPWM8_Speaker_ReadPulseWidth:                   ; this name deprecated
                                        (0262) _bPWM8_Speaker_ReadPulseWidth:                   ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
083C: 5D 2E    MOV   A,REG[0x2E]        (0264)    mov   A, reg[PWM8_Speaker_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
083E: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_Speaker_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_Speaker_bReadCounter:
                                        (0293) _PWM8_Speaker_bReadCounter:
                                        (0294)  bPWM8_Speaker_ReadCounter:                      ; this name deprecated
                                        (0295) _bPWM8_Speaker_ReadCounter:                      ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
083F: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0840: 5D 2E    MOV   A,REG[0x2E]        (0304)    mov   A, reg[PWM8_Speaker_COMPARE_REG]        ; Save the Compare register on the stack
0842: 08       PUSH  A                  (0305)    push  A                                       ;
0843: 41 2F FE AND   REG[0x2F],0xFE     
0846: 71 10    OR    F,0x10             
                                        (0306)    PWM8_Speaker_Stop_M                           ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
0848: 5D 2D    MOV   A,REG[0x2D]        (0308)    mov   A, reg[PWM8_Speaker_INPUT_REG]          ; save the clock input setting
084A: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
084B: 62 2D 00 MOV   REG[0x2D],0x0      (0311)    mov   reg[PWM8_Speaker_INPUT_REG], INPUT_REG_NULL
084E: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0850: 5D 2C    MOV   A,REG[0x2C]        (0314)    mov   A, reg[PWM8_Speaker_COUNTER_REG]        ; DR2 <- DR0
0852: 5D 2E    MOV   A,REG[0x2E]        (0315)    mov   A, reg[PWM8_Speaker_COMPARE_REG]        ; Stash the Count on the stack
0854: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0855: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0857: 60 2E    MOV   REG[0x2E],A        (0318)    mov   reg[PWM8_Speaker_COMPARE_REG], A
0859: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
085B: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
085D: 60 2D    MOV   REG[0x2D],A        (0321)    mov   reg[PWM8_Speaker_INPUT_REG], A          ;
085F: 70 EF    AND   F,0xEF             
0861: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_Speaker_Start_M                          ;   then re-enable the PWM.
0864: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0865: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0867: 70 3F    AND   F,0x3F             
0869: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
086B: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_Speaker.asm
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
086C: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
086E: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
086F: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0870: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
0872: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0874: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
0876: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
0878: 18       POP   A                  (0124)    pop  A
0879: 70 3F    AND   F,0x3F             
087B: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
087D: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
087E: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0880: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0881: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0882: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
0884: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
0886: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
0889: B0 0E    JNZ   0x0898             (0164)    jnz  .SETHIGHGAIN
088B: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
088E: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0890: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
0892: 18       POP   A                  (0168)    pop  A
0893: 70 3F    AND   F,0x3F             
0895: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
0897: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
0898: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
089B: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
089D: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
089F: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
08A2: 18       POP   A                  (0177)    pop  A
08A3: 70 3F    AND   F,0x3F             
08A5: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
08A7: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
08A8: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
08AB: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
08AC: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
08AD: 10       PUSH  X                  (0209)     push  X
08AE: 28       ROMX                     (0210)     romx                               ; Get character from ROM
08AF: B0 04    JNZ   0x08B4             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
08B1: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
08B2: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
08B3: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
08B4: 90 44    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
08B6: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
08B7: 18       POP   A                  (0220)     pop   A
08B8: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
08B9: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
08BB: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
08BC: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
08CE: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
08CF: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
08D0: 67       ASR   A                  (0262)     asr   A
08D1: 67       ASR   A                  (0263)     asr   A
08D2: 67       ASR   A                  (0264)     asr   A
08D3: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
08D5: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
08D7: 90 21    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
08D9: 18       POP   A                  (0268)     pop   A                            ; Restore value
08DA: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
08DC: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
08DE: 90 1A    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
08E0: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
08E1: 4B       SWAP  A,X                (0305)     swap  A,X
08E2: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
08E4: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
08E5: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
08E7: 7F       RET                      (0310)     ret
08E8: 70 BF    AND   F,0xBF             
08EA: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
08EC: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
08EE: A0 06    JZ    0x08F5             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
08F0: 90 08    CALL  _LCD_WriteData|LCD_Write_Data|_LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
08F2: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
08F3: 8F F8    JMP   0x08EC             (0351)     jmp   .Loop_PrString               ; Go get next character
08F5: 70 3F    AND   F,0x3F             
08F7: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
08F9: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
08FA: 90 65    CALL  0x0961             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
08FC: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
08FD: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
08FE: 67       ASR   A                  (0390)     asr   A
08FF: 67       ASR   A                  (0391)     asr   A
0900: 67       ASR   A                  (0392)     asr   A
0901: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0903: 90 3B    CALL  0x0940             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0905: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
0906: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
0908: 40       NOP                      (0397)     nop
0909: 40       NOP                      (0398)     nop
090A: 40       NOP                      (0399)     nop
090B: 90 33    CALL  0x0940             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
090D: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
090E: 90 51    CALL  0x0961             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0910: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0911: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0912: 67       ASR   A                  (0436)     asr   A
0913: 67       ASR   A                  (0437)     asr   A
0914: 67       ASR   A                  (0438)     asr   A
0915: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
0917: 90 09    CALL  0x0922             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
0919: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
091A: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
091C: 40       NOP                      (0443)     nop
091D: 40       NOP                      (0444)     nop
091E: 40       NOP                      (0445)     nop
091F: 90 01    CALL  0x0922             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0921: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0922: 08       PUSH  A                  (0477)     push  A
0923: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
0926: 26 02 80 AND   [0x2],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0929: 51 02    MOV   A,[0x2]            (0480)     mov   A,[Port_2_Data_SHADE]
092B: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
092D: 18       POP   A                  (0483)     pop   A
092E: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0930: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0932: 2A 02    OR    A,[0x2]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0934: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
0936: 53 02    MOV   [0x2],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0938: 40       NOP                      (0489)     nop
0939: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
093B: 53 02    MOV   [0x2],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
093D: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
093F: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0940: 08       PUSH  A                  (0523)     push  A
0941: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0944: 26 02 80 AND   [0x2],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
0947: 2E 02 20 OR    [0x2],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
094A: 51 02    MOV   A,[0x2]            (0527)     mov   A,[Port_2_Data_SHADE]
094C: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
094E: 18       POP   A                  (0530)     pop   A
094F: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0951: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0953: 2A 02    OR    A,[0x2]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0955: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
0957: 53 02    MOV   [0x2],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
0959: 40       NOP                      (0536)     NOP
095A: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
095C: 53 02    MOV   [0x2],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
095E: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0960: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0961: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0962: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0965: 26 02 80 AND   [0x2],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
0968: 51 02    MOV   A,[0x2]            (0574)     mov   A,[Port_2_Data_SHADE]
096A: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
096C: 26 03 F0 AND   [0x3],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
096F: 51 03    MOV   A,[0x3]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0971: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0973: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0975: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
0977: 2E 02 40 OR    [0x2],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
097A: 51 02    MOV   A,[0x2]            (0584)     mov   A,[Port_2_Data_SHADE]
097C: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
097E: 40       NOP                      (0586)     NOP
                                        (0587) 
097F: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0980: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0982: 2E 02 50 OR    [0x2],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0985: 51 02    MOV   A,[0x2]            (0593)     mov   A,[Port_2_Data_SHADE]
0987: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
0989: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
098A: 40       NOP                      (0597)     nop
098B: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
098D: 08       PUSH  A                  (0610)     push  A
098E: 26 02 C0 AND   [0x2],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0991: 51 02    MOV   A,[0x2]            (0612)     mov   A,[Port_2_Data_SHADE]
0993: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0995: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
0996: 40       NOP                      (0616)     nop                                    ; fastest PSoC
0997: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
0998: 2E 02 50 OR    [0x2],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
099B: 51 02    MOV   A,[0x2]            (0620)     mov   A,[Port_2_Data_SHADE]
099D: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
099F: 40       NOP                      (0623)     nop
09A0: 40       NOP                      (0624)     nop
                                        (0625) 
09A1: 26 02 C0 AND   [0x2],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
09A4: 51 02    MOV   A,[0x2]            (0627)     mov   A,[Port_2_Data_SHADE]
09A6: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
09A8: 18       POP   A                  (0630)     pop   A
09A9: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
09AB: A0 04    JZ    0x09B0             (0633)     jz    .UNLOCK
09AD: 79       DEC   X                  (0634)     dec   X
09AE: BF D3    JNZ   0x0982             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
09B0: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
09B1: 2E 03 7F OR    [0x3],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
09B4: 51 03    MOV   A,[0x3]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
09B6: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
09B8: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
09BA: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
09BC: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
09BD: 7F       RET                      (0646)     ret
09BE: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
09C1: 26 03 80 AND   [0x3],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
09C4: 2E 03 7F OR    [0x3],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
09C7: 26 04 80 AND   [0x4],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
09CA: 51 03    MOV   A,[0x3]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
09CC: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
09CE: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
09D0: 51 04    MOV   A,[0x4]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
09D2: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
09D4: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
09D6: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
09D8: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
09DA: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
09DC: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
09DE: 50 03    MOV   A,0x3              (0701)     mov   A,03h
09E0: 9F 40    CALL  0x0922             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
09E2: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
09E4: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
09E6: 50 03    MOV   A,0x3              (0707)     mov   A,03h
09E8: 9F 38    CALL  0x0922             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
09EA: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
09EC: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
09EE: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
09F0: 50 03    MOV   A,0x3              (0714)     mov   A,03h
09F2: 9F 2E    CALL  0x0922             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
09F4: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09F6: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
09F8: 50 02    MOV   A,0x2              (0720)     mov   A,02h
09FA: 9F 26    CALL  0x0922             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
09FC: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
09FE: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0A00: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0A02: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0A04: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A06: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
0A08: 50 01    MOV   A,0x1              (0731)     mov   A,01h
0A0A: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0A0C: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A0E: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0A10: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0A12: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0A14: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
0A16: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
0A18: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
0A1A: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0A1C: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0A1E: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0A20: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0A22: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0A24: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
0A26: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
0A28: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0A2A: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0A2C: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0A31: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0A33: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0A34: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
0A36: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
0A37: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
0A39: 20       POP   X                  (0795)     pop   X
                                        (0796) 
0A3A: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0A3C: 70 3F    AND   F,0x3F             
0A3E: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0A40: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0A41: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0A43: 78       DEC   A                  (0828)     dec   A
0A44: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
0A46: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0A4F: 08       PUSH  A                  (0871)     push  A
0A50: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0A52: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0A54: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
0A56: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
0A58: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
0A5A: D0 06    JNC   0x0A61             (0877)     jnc   .Delay50u_End
0A5C: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0A5E: 78       DEC   A                  (0880)     dec   A                              ; [4]
0A5F: BF FE    JNZ   0x0A5E             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0A61: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0A62: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\i2chwrsrcinits.asm            (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHW.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "PSoCGPIOINT.inc"
                                        (0026) include "PSoCAPI.inc"
                                        (0027) 
                                        (0028) ;-----------------------------------------------
                                        (0029) ; include instance specific register definitions
                                        (0030) ;-----------------------------------------------
                                        (0031) 
                                        (0032) ;-----------------------------------------------
                                        (0033) ;  Global Symbols
                                        (0034) ;-----------------------------------------------
                                        (0035) ;-------------------------------------------------------------------
                                        (0036) ;  Declare the functions global for both assembler and C compiler.
                                        (0037) ;
                                        (0038) ;  Note that there are two names for each API. First name is
                                        (0039) ;  assembler reference. Name with underscore is name refence for
                                        (0040) ;  C compiler.  Calling function in C source code does not require
                                        (0041) ;  the underscore.
                                        (0042) ;-------------------------------------------------------------------
                                        (0043) 
                                        (0044) export    I2CHW_ResumeInt
                                        (0045) export   _I2CHW_ResumeInt
                                        (0046) export    I2CHW_EnableInt
                                        (0047) export   _I2CHW_EnableInt
                                        (0048) export    I2CHW_ClearInt
                                        (0049) export   _I2CHW_ClearInt
                                        (0050) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0051) export    I2CHW_EnableSlave
                                        (0052) export   _I2CHW_EnableSlave
                                        (0053) ENDIF
                                        (0054) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0055) export    I2CHW_EnableMstr
                                        (0056) export   _I2CHW_EnableMstr
                                        (0057) ENDIF
                                        (0058) export    I2CHW_Start
                                        (0059) export   _I2CHW_Start
                                        (0060) export    I2CHW_DisableInt
                                        (0061) export   _I2CHW_DisableInt
                                        (0062) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0063) export    I2CHW_DisableSlave
                                        (0064) export   _I2CHW_DisableSlave
                                        (0065) ENDIF
                                        (0066) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0067) export    I2CHW_DisableMstr
                                        (0068) export   _I2CHW_DisableMstr
                                        (0069) ENDIF
                                        (0070) export    I2CHW_Stop
                                        (0071) export   _I2CHW_Stop
                                        (0072) 
                                        (0073) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0074)  IF (I2CHW_CY8C22x45)
                                        (0075) export    I2CHW_EnableHWAddrCheck
                                        (0076) export   _I2CHW_EnableHWAddrCheck
                                        (0077) export    I2CHW_DisableHWAddrCheck
                                        (0078) export   _I2CHW_DisableHWAddrCheck
                                        (0079)  ENDIF
                                        (0080) ENDIF
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) 
                                        (0086) ;-----------------------------------------------------------------------------
                                        (0087) ;  FUNCTION NAME: I2CHW_Start
                                        (0088) ;
                                        (0089) ;  DESCRIPTION:
                                        (0090) ;   Initialize the I2CHW I2C bus interface.
                                        (0091) ;
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;
                                        (0094) ;  ARGUMENTS:
                                        (0095) ;
                                        (0096) ;  RETURNS: none
                                        (0097) ;
                                        (0098) ;  SIDE EFFECTS:
                                        (0099) ;    The A and X registers may be modified by this or future implementations
                                        (0100) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0101) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0102) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0103) ;    functions.
                                        (0104) ;          
                                        (0105)  I2CHW_Start:
                                        (0106) _I2CHW_Start:
                                        (0107)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0108) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0109)  IF (I2CHW_CY8C22x45)
                                        (0110)    M8C_SetBank1
                                        (0111)    mov   reg[I2CHW_ADDR], I2CHW_SLAVE_ADDR;I2CHW_HW_ADDR_EN
                                        (0112)    M8C_SetBank0
                                        (0113)  ENDIF
                                        (0114) ENDIF
                                        (0115)     RAM_EPILOGUE RAM_USE_CLASS_1
0A63: 7F       RET                      (0116)     ret
                                        (0117) .ENDSECTION
                                        (0118) 
                                        (0119) .SECTION
                                        (0120) ;-----------------------------------------------------------------------------
                                        (0121) ;  FUNCTION NAME: I2CHW_ResumeInt
                                        (0122) ;
                                        (0123) ;  DESCRIPTION:
                                        (0124) ;     reEnables SDA interrupt allowing start condition detection. 
                                        (0125) ;     Skips clearing INT_CLR3 by entering the EnableInt at ResumeIntEntry:.
                                        (0126) ;     Remember to call the global interrupt enable function by using
                                        (0127) ;     the macro: M8C_EnableGInt.
                                        (0128) ;-----------------------------------------------------------------------------
                                        (0129) ;  ARGUMENTS: none
                                        (0130) ;
                                        (0131) ;  RETURNS: none
                                        (0132) ;
                                        (0133) ;  SIDE EFFECTS:
                                        (0134) ;    The A and X registers may be modified by this or future implementations
                                        (0135) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0136) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0137) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0138) ;    functions.
                                        (0139) ;-----------------------------------------------------------------------------
                                        (0140)  I2CHW_ResumeInt:
                                        (0141) _I2CHW_ResumeInt:
                                        (0142)     RAM_PROLOGUE RAM_USE_CLASS_1
0A64: 80 04    JMP   0x0A69             (0143)     jmp ResumeIntEntry
0A66: 62 DD FE MOV   REG[0xDD],0xFE     
0A69: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0144)     
                                        (0145) ;-----------------------------------------------------------------------------
                                        (0146) ;  FUNCTION NAME: I2CHW_EnableInt
                                        (0147) ;
                                        (0148) ;  DESCRIPTION:
                                        (0149) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0150) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0151) ;
                                        (0152) ;-----------------------------------------------------------------------------
                                        (0153) ;
                                        (0154) ;  ARGUMENTS: none
                                        (0155) ;
                                        (0156) ;  RETURNS: none
                                        (0157) ;
                                        (0158) ;  SIDE EFFECTS:
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165)  I2CHW_EnableInt:
                                        (0166) _I2CHW_EnableInt:
                                        (0167)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)     ;first clear any pending interrupts
                                        (0169)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0170) ResumeIntEntry:
                                        (0171)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0172)     RAM_EPILOGUE RAM_USE_CLASS_1
0A6C: 7F       RET                      (0173)     ret
0A6D: 62 DD FE MOV   REG[0xDD],0xFE     
                                        (0174) 
                                        (0175) .ENDSECTION
                                        (0176) 
                                        (0177) .SECTION
                                        (0178) ;-----------------------------------------------------------------------------
                                        (0179) ;  FUNCTION NAME: I2CHW_ClearInt
                                        (0180) ;
                                        (0181) ;  DESCRIPTION:
                                        (0182) ;     Clears only the I2C interrupt in the INT_CLR3 register.
                                        (0183) ;
                                        (0184) ;-----------------------------------------------------------------------------
                                        (0185) ;
                                        (0186) ;  ARGUMENTS: none
                                        (0187) ;
                                        (0188) ;  RETURNS: none
                                        (0189) ;
                                        (0190) ;  SIDE EFFECTS:
                                        (0191) ;    The A and X registers may be modified by this or future implementations
                                        (0192) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0193) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0194) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0195) ;    functions.
                                        (0196) ;          
                                        (0197)  I2CHW_ClearInt:
                                        (0198) _I2CHW_ClearInt:
                                        (0199)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0200)     M8C_ClearIntFlag INT_CLR3, I2CHW_INT_MASK
                                        (0201)     RAM_EPILOGUE RAM_USE_CLASS_1
0A70: 7F       RET                      (0202)     ret
0A71: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0203)     
                                        (0204) .ENDSECTION
                                        (0205) 
                                        (0206) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))	
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: I2CHW_EnableMstr
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0213) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0214) ;
                                        (0215) ;-----------------------------------------------------------------------------
                                        (0216) ;
                                        (0217) ;  ARGUMENTS: none
                                        (0218) ;
                                        (0219) ;  RETURNS: none
                                        (0220) ;
                                        (0221) ;  SIDE EFFECTS:
                                        (0222) ;    The A and X registers may be modified by this or future implementations
                                        (0223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0225) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0226) ;    functions.
                                        (0227) ;          
                                        (0228)  I2CHW_EnableMstr:
                                        (0229) _I2CHW_EnableMstr:
                                        (0230)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0231) 	;;CDT 28399
                                        (0232) 	RAM_SETPAGE_CUR >I2CHW_bStatus
0A74: 26 05 7F AND   [0x5],0x7F         (0233) 	and [I2CHW_bStatus], ~0x80 ;; ~I2CHW_ISR_ACTIVE
0A77: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0234) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0A7A: 26 07 7F AND   [0x7],0x7F         (0235)     and    [I2CHW_RsrcStatus], ~0x80;;~I2CHW_ISR_ACTIVE        ; Make sure internal control variables weren't corrupted previous to start.
0A7D: 43 D6 02 OR    REG[0xD6],0x2      
                                        (0236)     BitSetI2CHW_CFG I2C_M_EN                                         ;Enable SDA interupt
                                        (0237)     RAM_EPILOGUE RAM_USE_CLASS_1
0A80: 7F       RET                      (0238)     ret
0A81: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) ENDIF
                                        (0242) 
                                        (0243) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: I2CHW_EnableSlave
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;     Enables SDA interrupt allowing start condition detection. Remember to call the
                                        (0250) ;     global interrupt enable function by using the macro: M8C_EnableGInt.
                                        (0251) ;
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS: none
                                        (0255) ;
                                        (0256) ;  RETURNS: none
                                        (0257) ;
                                        (0258) ;  SIDE EFFECTS:
                                        (0259) ;    The A and X registers may be modified by this or future implementations
                                        (0260) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0261) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0262) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0263) ;    functions.
                                        (0264) ;          
                                        (0265)  I2CHW_EnableSlave:
                                        (0266) _I2CHW_EnableSlave:
                                        (0267)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0268)     
                                        (0269)     M8C_SetBank1 ;The SDA and SCL pins are setting to Hi-z drive mode
                                        (0270)     and reg[I2CHWSDA_DriveMode_0_ADDR],~(I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0271)     or  reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0272)     M8C_SetBank0
                                        (0273)     or  reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0274)    
                                        (0275)     BitSetI2CHW_CFG I2C_S_EN                                         ;Enable SDA interrupt
                                        (0276)     nop
                                        (0277)     nop
                                        (0278)     nop
                                        (0279)     nop
                                        (0280)     nop
                                        (0281)    
                                        (0282)     M8C_SetBank1 ;The SDA and SCL pins are restored to Open Drain Low drive mode
                                        (0283)     or reg[I2CHWSDA_DriveMode_0_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0284)     or reg[I2CHWSDA_DriveMode_1_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0285)     M8C_SetBank0
                                        (0286)     or reg[I2CHWSDA_DriveMode_2_ADDR], (I2CHWSDA_MASK|I2CHWSCL_MASK)
                                        (0287)     
                                        (0288)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0289)     ret
                                        (0290) 
                                        (0291) .ENDSECTION
                                        (0292) ENDIF
                                        (0293) 
                                        (0294) .SECTION
                                        (0295) ;-----------------------------------------------------------------------------
                                        (0296) ;  FUNCTION NAME: I2CHW_DisableInt
                                        (0297) ;  FUNCTION NAME: I2CHW_Stop
                                        (0298) ;
                                        (0299) ;  DESCRIPTION:
                                        (0300) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: none
                                        (0305) ;
                                        (0306) ;  RETURNS: none
                                        (0307) ;
                                        (0308) ;  SIDE EFFECTS:
                                        (0309) ;    The A and X registers may be modified by this or future implementations
                                        (0310) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0311) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0312) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0313) ;    functions.
                                        (0314) ;          
                                        (0315)  I2CHW_DisableInt:
                                        (0316) _I2CHW_DisableInt:
                                        (0317)  I2CHW_Stop:
                                        (0318) _I2CHW_Stop:
                                        (0319)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0320)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0321)     RAM_EPILOGUE RAM_USE_CLASS_1
0A84: 7F       RET                      (0322)     ret
0A85: 41 D6 FD AND   REG[0xD6],0xFD     
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0327) .SECTION
                                        (0328) ;-----------------------------------------------------------------------------
                                        (0329) ;  FUNCTION NAME: I2CHW_DisableSlave
                                        (0330) ;
                                        (0331) ;  DESCRIPTION:
                                        (0332) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0333) ;
                                        (0334) ;-----------------------------------------------------------------------------
                                        (0335) ;
                                        (0336) ;  ARGUMENTS: none
                                        (0337) ;
                                        (0338) ;  RETURNS: none
                                        (0339) ;
                                        (0340) ;  SIDE EFFECTS:
                                        (0341) ;    The A and X registers may be modified by this or future implementations
                                        (0342) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0343) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0344) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0345) ;    functions.
                                        (0346) ;          
                                        (0347)  I2CHW_DisableSlave:
                                        (0348) _I2CHW_DisableSlave:
                                        (0349)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0350)     BitClrI2CHW_CFG I2C_S_EN                                         ;Disable the Slave
                                        (0351)     RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0352)     ret
                                        (0353) 
                                        (0354) .ENDSECTION
                                        (0355) ENDIF
                                        (0356) 
                                        (0357) IF (I2CHW_MUM_SEL & (I2CHW_MSTR | I2CHW_MMS))
                                        (0358) .SECTION
                                        (0359) ;-----------------------------------------------------------------------------
                                        (0360) ;  FUNCTION NAME: I2CHW_DisableMstr
                                        (0361) ;
                                        (0362) ;  DESCRIPTION:
                                        (0363) ;     Disables I2CHW slave by disabling SDA interrupt
                                        (0364) ;
                                        (0365) ;-----------------------------------------------------------------------------
                                        (0366) ;
                                        (0367) ;  ARGUMENTS: none
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378)  I2CHW_DisableMstr:
                                        (0379) _I2CHW_DisableMstr:
                                        (0380)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0381)     BitClrI2CHW_CFG I2C_M_EN                                         ;Disable the Master
                                        (0382)     RAM_EPILOGUE RAM_USE_CLASS_1
0A88: 7F       RET                      (0383)    ret
                                        (0384) 
                                        (0385) .ENDSECTION
                                        (0386) ENDIF
                                        (0387) 
                                        (0388) IF (I2CHW_MUM_SEL & (I2CHW_SLAVE | I2CHW_MMS))
                                        (0389)  IF (I2CHW_CY8C22x45)
                                        (0390)  .SECTION
                                        (0391) ;-----------------------------------------------------------------------------
                                        (0392) ;  FUNCTION NAME: void  I2CHW_EnableHWAddrCheck(void)
                                        (0393) ;
                                        (0394) ;  DESCRIPTION:
                                        (0395) ;   Set respective bit to engage the HardWare Address Recognition 
                                        (0396) ;   feature in I2C slave block.
                                        (0397) ;
                                        (0398) ;-----------------------------------------------------------------------------
                                        (0399) ;
                                        (0400) ;  ARGUMENTS: none
                                        (0401) ;
                                        (0402) ;  RETURNS: none
                                        (0403) ;
                                        (0404) ;  SIDE EFFECTS:
                                        (0405) ;    If the HardWare Address Recognition feature is enabled, the ROM registers reading does not work.
                                        (0406) ;    The HardWare Address Recognition feature should be disabled for using ROM registers.
                                        (0407) ;
                                        (0408) ;    The A and X registers may be modified by this or future implementations
                                        (0409) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0410) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0411) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0412) ;    functions.
                                        (0413) ;
                                        (0414)  I2CHW_EnableHWAddrCheck:
                                        (0415) _I2CHW_EnableHWAddrCheck:
                                        (0416)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0417)    M8C_SetBank1
                                        (0418)    or    reg[I2CHW_ADDR], I2CHW_HW_ADDR_EN
                                        (0419)    M8C_SetBank0
                                        (0420)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0421)    ret
                                        (0422) .ENDSECTION
                                        (0423) 
                                        (0424) .SECTION
                                        (0425) ;-----------------------------------------------------------------------------
                                        (0426) ;  FUNCTION NAME: void  I2CHW_DisableHWAddrCheck(void)
                                        (0427) ;
                                        (0428) ;  DESCRIPTION:
                                        (0429) ;   Clear respective bit to disengage the HardWare Address Recognition 
                                        (0430) ;   feature in I2C slave block.
                                        (0431) ;
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;
                                        (0434) ;  ARGUMENTS: none
                                        (0435) ;
                                        (0436) ;  RETURNS: none
                                        (0437) ;
                                        (0438) ;  SIDE EFFECTS:
                                        (0439) ;    The A and X registers may be modified by this or future implementations
                                        (0440) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0441) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0442) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0443) ;    functions.
                                        (0444) ;
                                        (0445)  I2CHW_DisableHWAddrCheck:
                                        (0446) _I2CHW_DisableHWAddrCheck:
                                        (0447)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0448)    M8C_SetBank1
                                        (0449)    and   reg[I2CHW_ADDR], ~I2CHW_HW_ADDR_EN
                                        (0450)    M8C_SetBank0
                                        (0451)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0452)    ret
                                        (0453) .ENDSECTION
                                        (0454)  ENDIF
                                        (0455) ENDIF
                                        (0456) 
                                        (0457) ; End of File I2CHW.asm
FILE: lib\i2chwmstr.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0A89: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  FILENAME: I2CHWMSTR.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: <UMName> User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) include "I2CHWMstr.inc"
                                        (0026) 
                                        (0027) ;-----------------------------------------------
                                        (0028) ;  Global Symbols
                                        (0029) ;-----------------------------------------------
                                        (0030) 
                                        (0031) export   I2CHW_fSendRepeatStart
                                        (0032) export  _I2CHW_fSendRepeatStart
                                        (0033) export   I2CHW_fSendStart
                                        (0034) export  _I2CHW_fSendStart
                                        (0035) export   I2CHW_SendStop
                                        (0036) export  _I2CHW_SendStop
                                        (0037) ; export the following 3 functions for C-implementations large or small mem models 
                                        (0038) export  _I2CHW_fReadBytes
                                        (0039) export  _I2CHW_bWriteBytes
                                        (0040) export  _I2CHW_bWriteCBytes
                                        (0041) 
                                        (0042) export   I2CHW_fWrite
                                        (0043) export  _I2CHW_fWrite
                                        (0044) 
                                        (0045) export   I2CHW_bRead
                                        (0046) export  _I2CHW_bRead
                                        (0047) 
                                        (0048) export    I2CHW_bReadBusStatus
                                        (0049) export   _I2CHW_bReadBusStatus
                                        (0050) 
                                        (0051) 
                                        (0052) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0053) 
                                        (0054) export   I2CHW_fReadBytes
                                        (0055) export   I2CHW_bWriteBytes
                                        (0056) export   I2CHW_bWriteCBytes
                                        (0057) 
                                        (0058) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (0059) 
                                        (0060) ;-------------------------------------------------------------------
                                        (0061) ;  Declare the varables for both the assembler and C compiler.
                                        (0062) ;
                                        (0063) ;-------------------------------------------------------------------
                                        (0064) export  I2CHW_bStatus
                                        (0065) export _I2CHW_bStatus
                                        (0066) 
                                        (0067) ;-----------------------------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;-----------------------------------------------
                                        (0070) area InterruptRAM(RAM, REL, CON)
                                        (0071) 
                                        (0072) _I2CHW_bStatus:
                                        (0073)  I2CHW_bStatus:                        blk   1  ; Status during transfers
                                        (0074) 
                                        (0075) AREA UserModules (ROM, REL)
                                        (0076) ;-----------------------------------------------
                                        (0077) ;  EQUATES
                                        (0078) ;-----------------------------------------------
                                        (0079) I2CHW_SLAVE_ACKed:                     equ 0x01 ; This bit set if Slave ACKed Master
                                        (0080) I2CHW_SEND_ACK:                        equ 0x10 ; If this flag set, Master should send ACK
                                        (0081) 
                                        (0082) 
                                        (0083) .SECTION
                                        (0084) ;-----------------------------------------------------------------------------
                                        (0085) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (0086) ;
                                        (0087) ;  DESCRIPTION:
                                        (0088) ;       Read Multiple bytes from a slave.  Use the ISR to perform operation.
                                        (0089) ;-----------------------------------------------------------------------------
                                        (0090) ;
                                        (0091) ;  ARGUMENTS:
                                        (0092) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0093) ;           to determine if:
                                        (0094) ;             0x01 => Use RepeatStart instead of Start
                                        (0095) ;             0x02 => Don't send Stop
                                        (0096) ;  [SP-6]=> Count of bytes to read.
                                        (0097) ;  [SP-5]=> MSB of Array address to put data in (ignorned for small mem model)
                                        (0098) ;  [SP-4]=> LSB of Array address to put data in 
                                        (0099) ;  [SP-3]=> Address of slave
                                        (0100) ;
                                        (0101) ;  RETURNS:       None
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;          
                                        (0110) ;    Currently only the page pointer registers listed below are modified: 
                                        (0111) ;          CUR_PP
                                        (0112) ;
                                        (0113) ;  THEORY of OPERATION or PROCEDURE:
                                        (0114) ;    I2C and block must be operational.
                                        (0115) ;    This routine will enable the I2C interrupt!
                                        (0116) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (0117) ;    pend on the ISR_ACTIVE bit until it can run
                                        (0118) ;
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) IF	(TOOLCHAIN & HITECH)
                                        (0121) RxMode:         set  -7
                                        (0122) RxCnt:          set  -6
                                        (0123) RxArrayHI:      set  -5
                                        (0124) RxArrayLO:      set  -4
                                        (0125) RxSlaveAddr:    set  -3
                                        (0126) ELSE
                                        (0127) RxMode:         equ  -7
                                        (0128) RxCnt:          equ  -6
                                        (0129) RxArrayHI:      equ  -5
                                        (0130) RxArrayLO:      equ  -4
                                        (0131) RxSlaveAddr:    equ  -3
                                        (0132) ENDIF
                                        (0133) 
                                        (0134) _I2CHW_fReadBytes:			      
                                        (0135)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0136)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0137) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0A8C: 4F       MOV   X,SP               (0138) 	mov   X, SP
                                        (0139) I2CMSCR_NotReady1:
0A8D: 51 07    MOV   A,[0x7]            (0140)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0A8F: 47 07 80 TST   [0x7],0x80         (0141)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0142)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0143)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0144)           ;For multi master operations, a pening start or restart
                                        (0145)           ;request might be OK, the master might be waiting to
                                        (0146)           ;acquire the bus from another master
0A92: BF FA    JNZ   0x0A8D             (0147)     jnz   I2CMSCR_NotReady1
0A94: 2E 07 80 OR    [0x7],0x80         (0148)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared by ISR
                                        (0149)     ;get the address from the parameters on the stack
0A97: 52 FD    MOV   A,[X-3]            (0150)     mov   A, [X + RxSlaveAddr]
0A99: 64       ASL   A                  (0151)     asl   A                                                ; Shift address to the left to make
                                        (0152)                                                            ; a complete byte with the R/W bit.
0A9A: 29 01    OR    A,0x1              (0153)     or    A,0x01                                           ; OR the address with the Read bit.
0A9C: 53 06    MOV   [0x6],A            (0154)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0A9E: 60 D8    MOV   REG[0xD8],A        (0155)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0AA0: 55 05 00 MOV   [0x5],0x0          (0156)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0AA3: 52 F9    MOV   A,[X-7]            (0157)     mov   A, [X+RxMode]                                    ; place the RxMode in status so ISR can access it
0AA5: 53 05    MOV   [0x5],A            (0158)     mov   [I2CHW_bStatus],A
                                        (0159)     ;
                                        (0160)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0161)     ;
0AA7: 10       PUSH  X                  (0162)     push   X                                               ;preserve since it's used later
0AA8: 52 FA    MOV   A,[X-6]            (0163)     mov    A, [X+RxCnt]                                    ;get the write buf size
0AAA: 08       PUSH  A                  (0164)     push   A
0AAB: 52 FB    MOV   A,[X-5]            (0165)     mov    A, [X+RxArrayHI]                                ;get the write addrHI
0AAD: 08       PUSH  A                  (0166)     push   A										   
0AAE: 52 FC    MOV   A,[X-4]            (0167)     mov    A, [X+RxArrayLO]							                         ;get the write addrLO
0AB0: 08       PUSH  A                  (0168)     push   A                                               ;this will be ignored
0AB1: 93 0C    CALL  _I2CHW_InitWrite   (0169)     call  I2CHW_InitWrite                                  ;sets the addr and byte count to write to
0AB3: 38 FD    ADD   SP,0xFD            (0170)     add    SP, -3
0AB5: 20       POP   X                  (0171)     pop    X                                               ;restore X to be used for the rest of this routine
                                        (0172)     
0AB6: 51 06    MOV   A,[0x6]            (0173)     mov   A,[I2CHW_SlaveAddr]
0AB8: 48 F9 01 TST   [X-7],0x1          (0174)     tst   [x+RxMode],I2CHW_RepStart
0ABB: B0 0A    JNZ   0x0AC6             (0175)     jnz   DoRestartRx
0ABD: 49 D7 01 TST   REG[0xD7],0x1      (0176)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0AC0: B0 05    JNZ   0x0AC6             (0177)     jnz   DoRestartRx
0AC2: 91 2E    CALL  0x0BF2             (0178)     call  I2C_DoStart                                      ; Send a start and address.
0AC4: 80 03    JMP   0x0AC8             (0179)     jmp   CheckRxAck
                                        (0180) DoRestartRx:
0AC6: 90 93    CALL  0x0B5B             (0181)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0AC8: 70 3F    AND   F,0x3F             
0ACA: 71 C0    OR    F,0xC0             
                                        (0182)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (0183)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (0184)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (0185) 
                                        (0186) CheckRxAck:                                                ; Test to see if Slave ACKed
                                        (0187)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (0188)         ;is finished.
                                        (0189) End_RD:
                                        (0190)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0191)     RAM_EPILOGUE RAM_USE_CLASS_4
0ACC: 7F       RET                      (0192)     ret
0ACD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0193) 
                                        (0194) .ENDSECTION
                                        (0195) 
                                        (0196) .SECTION
                                        (0197) ;-----------------------------------------------------------------------------
                                        (0198) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (0199) ;
                                        (0200) ;  DESCRIPTION:
                                        (0201) ;    Write multiple data bits to slave device.
                                        (0202) ;
                                        (0203) ;-----------------------------------------------------------------------------
                                        (0204) ;
                                        (0205) ;  ARGUMENTS:
                                        (0206) ; [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0207) ;          to determine if:
                                        (0208) ;              0x01 => Use RePeatStart instead of Start
                                        (0209) ;              0x02 => Don't send Stop
                                        (0210) ; [SP-6]=> Count of bytes to write.
                                        (0211) ; [SP-5]=> MSB of Array address to put data in (ignored small mem model).
                                        (0212) ; [SP-4]=> LSB of Array address to put data in.
                                        (0213) ; [SP-3]=> Address of slave
                                        (0214) ;
                                        (0215) ;
                                        (0216) ;  RETURNS:     None
                                        (0217) ;
                                        (0218) ;  SIDE EFFECTS:
                                        (0219) ;    The A and X registers may be modified by this or future implementations
                                        (0220) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0221) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0222) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0223) ;    functions.
                                        (0224) ;          
                                        (0225) ;    Currently only the page pointer registers listed below are modified: 
                                        (0226) ;          CUR_PP
                                        (0227) ;
                                        (0228) ;  THEORY of OPERATION or PROCEDURE:
                                        (0229) ;
                                        (0230) ;-----------------------------------------------------------------------------
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232) TxMode:       set  -7
                                        (0233) TxByteCount:  set  -6
                                        (0234) TxArrayHI:    set  -5
                                        (0235) TxArrayLO:    set  -4
                                        (0236) TxSlaveAddr:  set  -3
                                        (0237) ELSE
                                        (0238) TxMode:       equ  -7
                                        (0239) TxByteCount:  equ  -6
                                        (0240) TxArrayHI:    equ  -5
                                        (0241) TxArrayLO:    equ  -4
                                        (0242) TxSlaveAddr:  equ  -3
                                        (0243) ENDIF
                                        (0244) 
                                        (0245) _I2CHW_bWriteBytes:
                                        (0246)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0247)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0248) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
                                        (0249) 
0AD0: 4F       MOV   X,SP               (0250) 	mov   X, SP
                                        (0251) I2CMSCR_NotReady2:
0AD1: 51 07    MOV   A,[0x7]            (0252)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0AD3: 47 07 80 TST   [0x7],0x80         (0253)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0254)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0255)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0256)           ;For multi master operations, a pening start or restart
                                        (0257)           ;request might be OK, the master might be waiting to
                                        (0258)           ;acquire the bus from another master
0AD6: BF FA    JNZ   0x0AD1             (0259)     jnz   I2CMSCR_NotReady2
0AD8: 2E 07 80 OR    [0x7],0x80         (0260)     or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE             ; flag set here and cleared at end of ISR
0ADB: 52 FD    MOV   A,[X-3]            (0261)     mov   A, [X + TxSlaveAddr]
0ADD: 64       ASL   A                  (0262)     asl   A                                                ; Shift address to the left to make
                                        (0263)                                                            ; a complete byte with the R/W bit.
                                        (0264)                                                            ; The ASL takes care of clearing bit 0.
0ADE: 55 05 00 MOV   [0x5],0x0          (0265)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0AE1: 53 06    MOV   [0x6],A            (0266)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0AE3: 60 D8    MOV   REG[0xD8],A        (0267)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0AE5: 52 F9    MOV   A,[X-7]            (0268)     mov   A, [X+TxMode]                                    ; place the TxMode in status so ISR can access it
0AE7: 53 05    MOV   [0x5],A            (0269)     mov   [I2CHW_bStatus],A
                                        (0270)     ;
                                        (0271)     ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0272)     ;
0AE9: 10       PUSH  X                  (0273)         push   X                                                ;preserve since it's used later
0AEA: 77 FA    INC   [X-6]              (0274)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (0275) 
0AEC: 52 FA    MOV   A,[X-6]            (0276)         mov    A, [X+TxByteCount]                               ;get the write buf size
0AEE: 08       PUSH  A                  (0277)         push   A
0AEF: 52 FB    MOV   A,[X-5]            (0278)         mov    A, [X+TxArrayHI]                                 ;get the write buf addr
0AF1: 08       PUSH  A                  (0279)         push   A                                                                                            ;this will be ignored
0AF2: 52 FC    MOV   A,[X-4]            (0280)         mov    A, [X+TxArrayLO]                                 ;get the write buf addr
0AF4: 08       PUSH  A                  (0281)         push   A
0AF5: 93 06    CALL  _I2CHW_InitRamRead (0282)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
0AF7: 38 FD    ADD   SP,0xFD            (0283)         add SP, -3
0AF9: 20       POP   X                  (0284)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0285)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (0286) 
                                        (0287) 
0AFA: 51 06    MOV   A,[0x6]            (0288)     mov   A,[I2CHW_SlaveAddr]
0AFC: 48 F9 01 TST   [X-7],0x1          (0289)     tst   [x+TxMode],I2CHW_RepStart
0AFF: B0 0A    JNZ   0x0B0A             (0290)     jnz   DoRestartTx
0B01: 49 D7 01 TST   REG[0xD7],0x1      (0291)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0B04: BF C1    JNZ   0x0AC6             (0292)     jnz   DoRestartRx
0B06: 90 EA    CALL  0x0BF2             (0293)     call  I2C_DoStart                                      ; Send a start and address.
0B08: 80 03    JMP   0x0B0C             (0294)     jmp   DoTxAck
                                        (0295) DoRestartTx:
0B0A: 90 4F    CALL  0x0B5B             (0296)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0B0C: 70 3F    AND   F,0x3F             
0B0E: 71 C0    OR    F,0xC0             
                                        (0297) DoTxAck:
                                        (0298) 
                                        (0299) 
                                        (0300) WriteSlaveAck:
                                        (0301)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0302) 	RAM_EPILOGUE RAM_USE_CLASS_4
0B10: 7F       RET                      (0303)     ret
0B11: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0304) 
                                        (0305) .ENDSECTION
                                        (0306) 
                                        (0307) .SECTION
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (0310) ;
                                        (0311) ;  DESCRIPTION:
                                        (0312) ;    Write multiple data bits to slave device from ROM
                                        (0313) ;
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;
                                        (0316) ;  ARGUMENTS:
                                        (0317) ;  [SP-7]=> Mode flags that allow the programmer to set flags
                                        (0318) ;            to determine if:
                                        (0319) ;               0x01 => Use RepeatStart instead of Start
                                        (0320) ;               0x02 => Don't send Stop
                                        (0321) ;  [SP-6]=> Count of bytes to write.
                                        (0322) ;  [SP-5]=> MSB of ROM Array address to get data from
                                        (0323) ;  [SP-4]=> LSB of ROM Array address to get data from.
                                        (0324) ;  [SP-3]=> Address of slave
                                        (0325) ;
                                        (0326) ;  RETURNS:
                                        (0327) ;    None
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;
                                        (0339) ;  THEORY of OPERATION or PROCEDURE:
                                        (0340) ;
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) IF	(TOOLCHAIN & HITECH)
                                        (0343) TxCMode:       set  -7
                                        (0344) TxCByteCount:  set  -6
                                        (0345) TxCArrayMSB:   set  -5
                                        (0346) TxCArrayLSB:   set  -4
                                        (0347) ;TxSlaveAddr:  set  -3	  ;defined above this line if for reference only
                                        (0348) ELSE
                                        (0349) TxCMode:       equ  -7
                                        (0350) TxCByteCount:  equ  -6
                                        (0351) TxCArrayMSB:   equ  -5
                                        (0352) TxCArrayLSB:   equ  -4
                                        (0353) ;TxSlaveAddr:  equ  -3	  ;defined above this line if for reference only
                                        (0354) ENDIF
                                        (0355) 
                                        (0356) _I2CHW_bWriteCBytes:
                                        (0357)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0358) 	RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0359) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0B14: 4F       MOV   X,SP               (0360) 	mov   X, SP
                                        (0361) I2CMSCR_NotReady3:
0B15: 51 07    MOV   A,[0x7]            (0362)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
0B17: 47 07 80 TST   [0x7],0x80         (0363)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0364)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0365)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0366)           ;For multi master operations, a pening start or restart
                                        (0367)           ;request might be OK, the master might be waiting to
                                        (0368)           ;acquire the bus from another master
0B1A: BF FA    JNZ   0x0B15             (0369)         jnz   I2CMSCR_NotReady3
0B1C: 2E 07 80 OR    [0x7],0x80         (0370)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
0B1F: 52 FD    MOV   A,[X-3]            (0371)     mov   A, [X + TxSlaveAddr]
0B21: 64       ASL   A                  (0372)     asl   A                                                ; Shift address to the left to make
                                        (0373)                                                            ; a complete byte with the R/W bit.
                                        (0374)                                                            ; The ASL takes care of clearing bit 0.
0B22: 55 05 00 MOV   [0x5],0x0          (0375)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
0B25: 53 06    MOV   [0x6],A            (0376)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
0B27: 60 D8    MOV   REG[0xD8],A        (0377)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
0B29: 52 F9    MOV   A,[X-7]            (0378)     mov   A, [X+TxCMode]                                                             ; place the RxMode in status so ISR can access it
0B2B: 53 05    MOV   [0x5],A            (0379)     mov   [I2CHW_bStatus],A
                                        (0380)     ;
                                        (0381)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (0382)         ;
0B2D: 10       PUSH  X                  (0383)         push   X                                                ;preserve X since it's used later
                                        (0384) 
0B2E: 50 00    MOV   A,0x0              (0385)          mov    A, 0                                             ;get the write buf size (this is the hi order part)
0B30: 77 FA    INC   [X-6]              (0386)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
0B32: D0 02    JNC   0x0B35             (0387)         jnc    . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
0B34: 74       INC   A                  (0388)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
0B35: 08       PUSH  A                  (0389)         push   A
0B36: 52 FA    MOV   A,[X-6]            (0390)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
0B38: 08       PUSH  A                  (0391)         push   A
0B39: 52 FB    MOV   A,[X-5]            (0392)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
0B3B: 08       PUSH  A                  (0393)         push   A                                                                                        ;this will be ignored
0B3C: 52 FC    MOV   A,[X-4]            (0394)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
0B3E: 08       PUSH  A                  (0395)         push   A
                                        (0396) 
0B3F: 92 E9    CALL  _I2CHW_InitFlashRead(0397)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
0B41: 38 FC    ADD   SP,0xFC            (0398)         add SP, -4
0B43: 20       POP   X                  (0399)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (0400) 
                                        (0401)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
0B44: 51 06    MOV   A,[0x6]            (0402)     mov   A,[I2CHW_SlaveAddr]
0B46: 48 F9 01 TST   [X-7],0x1          (0403)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
0B49: B0 0A    JNZ   0x0B54             (0404)     jnz   DoCRestartTx                                     ; should executed.
0B4B: 49 D7 01 TST   REG[0xD7],0x1      (0405)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
0B4E: BF 77    JNZ   0x0AC6             (0406)     jnz   DoRestartRx
0B50: 90 A0    CALL  0x0BF2             (0407)     call  I2C_DoStart                                      ; Send a start and address.
0B52: 80 03    JMP   0x0B56             (0408)     jmp   DoCTxAck
                                        (0409) DoCRestartTx:
0B54: 90 05    CALL  0x0B5B             (0410)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
0B56: 70 3F    AND   F,0x3F             
0B58: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412) DoCTxAck:                                                  ; Test to see if Slave is ACKed
                                        (0413) 
                                        (0414) CWriteSlaveAck:
                                        (0415)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0416)     RAM_EPILOGUE RAM_USE_CLASS_4
0B5A: 7F       RET                      (0417)     ret
0B5B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0418) 
                                        (0419) .ENDSECTION
                                        (0420) 
                                        (0421) .SECTION
                                        (0422) ;-----------------------------------------------------------------------------
                                        (0423) ;  FUNCTION NAME: I2CHW_DoBufferRepeatStart
                                        (0424) ;
                                        (0425) ;  DESCRIPTION:
                                        (0426) ;    Send repeated start condition and send slave address for buffered transfers.
                                        (0427) ;
                                        (0428) ;-----------------------------------------------------------------------------
                                        (0429) ;
                                        (0430) ;  ARGUMENTS:
                                        (0431) ;     This routine is called internally only.  It is not exported or intended as an API
                                        (0432) ;
                                        (0433) ;  RETURNS:
                                        (0434) ;    None
                                        (0435) ;
                                        (0436) ;  SIDE EFFECTS:
                                        (0437) ;    The A and X registers may be modified by this or future implementations
                                        (0438) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;    functions.
                                        (0442) ;          
                                        (0443) ;  THEORY of OPERATION or PROCEDURE:
                                        (0444) ;    This is similar to the I2C_DoRepeatStart entry point but this function does not
                                        (0445) ;    wait for the byte_complete flag.  That is this is not polled and is therefore compatible
                                        (0446) ;    with the buffered read and write functions (above).
                                        (0447) ;
                                        (0448) ;-----------------------------------------------------------------------------
                                        (0449) 
                                        (0450) I2CHW_DoBufferRepeatStart:
                                        (0451)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0452) 	RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0453)     ;here the path through the routine is dependent on the previous transmission.
                                        (0454)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0455)         ; I2C interrupt
                                        (0456)         ; 2a. the master must NAK the byte if he is reading from the slave.
                                        (0457)         ; We do have to look at the status of the I2C block to see what is going on because if there was a
                                        (0458)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0459)         ; by setting the master restart bit and clearing to I2C_SCR (I2C_TX)
                                        (0460)         ; 2b. if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0461)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0462)         ; 3. once the ISR starts it will figure out which direction we are going with data (sending/receiving)
                                        (0463)         ;
0B5E: 60 D8    MOV   REG[0xD8],A        (0464)     mov   reg[I2CHW_DR], A
0B60: 53 06    MOV   [0x6],A            (0465)         mov   [I2CHW_SlaveAddr], A
                                        (0466)         ;tst      reg[I2CHW_MSCR], I2CM_MASTEROP           ;do we even have control of the bus?
                                        (0467)         ;jz    notBusMasterErr
0B62: 5D D9    MOV   A,REG[0xD9]        (0468)     mov   A, reg[I2CHW_MSCR]                               ;read the mscr register to look for pending master operations
0B64: 21 0F    AND   A,0xF              (0469)     and   A, 0x0f                                          ;only look at the lower bits
0B66: A0 11    JZ    0x0B78             (0470)         jz    BusIdleSendStart
0B68: 62 D9 02 MOV   REG[0xD9],0x2      
                                        (0471)         ; for a single master system this should not be an issue,
                                        (0472)         ; so we'll go ahead and request the restart.  If a stop condition was already generated
                                        (0473)         ; the state machine will automatically generate a start instead.
                                        (0474) 
                                        (0475)         ;SetI2CHW_SCR I2CM_RESTRT
                                        (0476)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0477)         ;SetI2CHW_SCR          I2C_TX                                ;even though the restart has been requested the state
                                        (0478)         ;mov      reg[I2CHW_SCR], I2C_TX                   ;even though the restart has been requested the state
                                        (0479) 
                                        (0480) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0481)         SetI2CHW_MSCR I2CM_RESTRT
                                        (0482) ;ELSE
                                        (0483) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0484) ;ENDIF
0B6B: 49 D7 04 TST   REG[0xD7],0x4      (0485)     tst   reg[I2CHW_SCR], I2C_TX
0B6E: B0 05    JNZ   0x0B74             (0486)     jnz   I2C_RestartRecieve
0B70: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0487) 
                                        (0488) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0489)     SetI2CHW_SCR I2C_TX                                    ;even though the restart has been requested the state
                                        (0490) ;ELSE
                                        (0491) ;    mov   reg[I2CHW_SCR], I2C_TX                          ;send Ack
                                        (0492) ;ENDIF
                                        (0493) 
                                        (0494)     RAM_EPILOGUE RAM_USE_CLASS_4
0B73: 7F       RET                      (0495)     ret
0B74: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0496) I2C_RestartRecieve:
                                        (0497) 
                                        (0498) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0499)     SetI2CHW_SCR 0                                         ;even though the restart has been requested the state
                                        (0500) ;ELSE
                                        (0501) ;    mov   reg[I2CHW_SCR], 0                               ;send Ack
                                        (0502) ;ENDIF
                                        (0503) 
                                        (0504)    RAM_EPILOGUE RAM_USE_CLASS_4
0B77: 7F       RET                      (0505)    ret
                                        (0506) 
                                        (0507) BusIdleSendStart:
0B78: 51 06    MOV   A,[0x6]            (0508)    mov    A, [I2CHW_SlaveAddr]
0B7A: 90 76    CALL  0x0BF2             (0509)    call   I2C_DoStart
                                        (0510)    ;Since something appears to be messed up do the next best thing to a repeat start, send a start.
                                        (0511)    RAM_EPILOGUE RAM_USE_CLASS_4
0B7C: 7F       RET                      (0512)    ret
0B7D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0513) 
                                        (0514) .ENDSECTION
                                        (0515) 
                                        (0516) .SECTION
                                        (0517) 
                                        (0518) ;-----------------------------------------------------------------------------
                                        (0519) ;  FUNCTION NAME: I2CHW_fSendRepeatStart
                                        (0520) ;
                                        (0521) ;  DESCRIPTION:
                                        (0522) ;    Send repeated start condition and send slave address.
                                        (0523) ;
                                        (0524) ;-----------------------------------------------------------------------------
                                        (0525) ;
                                        (0526) ;  ARGUMENTS:
                                        (0527) ;    I2CHW_bAddr - Contains the slave address and transfer direction.
                                        (0528) ;
                                        (0529) ;  RETURNS:
                                        (0530) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0531) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0532) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0533) ;
                                        (0534) ;  SIDE EFFECTS:
                                        (0535) ;    The A and X registers may be modified by this or future implementations
                                        (0536) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0537) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0538) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0539) ;    functions.
                                        (0540) ;          
                                        (0541) ;    Currently only the page pointer registers listed below are modified: 
                                        (0542) ;          CUR_PP
                                        (0543) ;
                                        (0544) ;  THEORY of OPERATION or PROCEDURE:
                                        (0545) ;    Prepare to send start by setting SCl and SDA high.
                                        (0546) ;    must be followed directly by I2CHW_start.
                                        (0547) ;
                                        (0548) ;-----------------------------------------------------------------------------
                                        (0549)  I2CHW_fSendRepeatStart:
                                        (0550) _I2CHW_fSendRepeatStart:
                                        (0551)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0552) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0553)     ;wait if the bus is already busy...
0B80: 08       PUSH  A                  (0554)     push  A
0B81: 55 05 00 MOV   [0x5],0x0          (0555)     mov   [I2CHW_bStatus], 0x00
                                        (0556) I2CMSCR_NotReady4:
0B84: 51 07    MOV   A,[0x7]            (0557)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0B86: 47 07 80 TST   [0x7],0x80         (0558)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0559)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0560)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0561)           ;For multi master operations, a pening start or restart
                                        (0562)           ;request might be OK, the master might be waiting to
                                        (0563)           ;acquire the bus from another master
0B89: BF FA    JNZ   0x0B84             (0564)     jnz   I2CMSCR_NotReady4
0B8B: 18       POP   A                  (0565)     pop   A
                                        (0566) 
                                        (0567) 
0B8C: 64       ASL   A                  (0568)     asl   a                                                ; Shift address to the left
0B8D: 79       DEC   X                  (0569)     dec   x                                                ; If zero, C flag will be set
0B8E: C0 03    JC    0x0B92             (0570)     jc    I2C_DoRepeatStart                                ; Do a write if zero
0B90: 29 01    OR    A,0x1              (0571)     or    a,0x01                                           ; Set Read flag
                                        (0572) 
                                        (0573) I2C_DoRepeatStart:
                                        (0574)     ;here the path through the routine is dependent on the previous transmission.
                                        (0575)         ; 1. a slave being written too must have acked or nakk'ed the previous byte (generating a Byte complete
                                        (0576)         ; I2C interrupt
                                        (0577)         ; 2. the master must NAK the byte if he is reading from the slave.
                                        (0578)         ; We don't have to look at the status of the I2C block to see what is going on because if there was a
                                        (0579)         ; previous write to a slave it may have ack'ed or nak'ed so we set an address and attempt a repeat start
                                        (0580)         ; by setting the master restart bit and writing to I2C_SCR (I2C_TX)
                                        (0581)         ; if we are reading from theslave we would NAK it by clearing the I2C_ACKOUT bit and writing I2C_TX to the
                                        (0582)         ; I2C_SCR reg.  (same as if we were writing to slave).
                                        (0583)         ;
0B92: 60 D8    MOV   REG[0xD8],A        (0584)     mov   reg[I2CHW_DR], A
0B94: 53 06    MOV   [0x6],A            (0585)     mov   [I2CHW_SlaveAddr], A
0B96: 49 D9 04 TST   REG[0xD9],0x4      (0586)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0B99: A0 1C    JZ    0x0BB6             (0587)     jz    notBusMaster1
0B9B: 62 D9 02 MOV   REG[0xD9],0x2      
0B9E: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0588)     ;SetI2CHW_MSCR  I2CM_RESTRT
                                        (0589)     ;mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0590)     ;SetI2CHW_SCR         I2C_TX                           ;even though the restart has been requested the state
                                        (0591)     ;mov      reg[I2CHW_SCR], I2C_TX                       ;even though the restart has been requested the state
                                        (0592)                                                                 ; machine is stalling the SCL and has to be 'released'
                                        (0593) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0594)     SetI2CHW_MSCR I2CM_RESTRT
                                        (0595)     SetI2CHW_SCR  0                                        ;getting a restart out requires a 0 into the SCR reg
                                        (0596) ;ELSE
                                        (0597) ;    mov   reg[I2CHW_MSCR], I2CM_RESTRT
                                        (0598) ;    mov   reg[I2CHW_SCR], 0                               ;getting a restart out requires a 0 into the SCR reg
                                        (0599) ;ENDIF
                                        (0600) 
                                        (0601) WaitRepStrtCompl:
0BA1: 5D D7    MOV   A,REG[0xD7]        (0602)     mov   A,  reg[I2CHW_SCR]
0BA3: 49 D7 01 TST   REG[0xD7],0x1      (0603)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0BA6: AF FA    JZ    0x0BA1             (0604)     jz    WaitRepStrtCompl
0BA8: 49 D7 02 TST   REG[0xD7],0x2      (0605)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0BAB: B0 07    JNZ   0x0BB3             (0606)     jnz   Err_Exit_RepStart
0BAD: 55 05 01 MOV   [0x5],0x1          (0607)     mov   [I2CHW_bStatus], 0x01
0BB0: 50 01    MOV   A,0x1              (0608)     mov   A, 01
                                        (0609)     RAM_EPILOGUE RAM_USE_CLASS_4
0BB2: 7F       RET                      (0610)     ret
                                        (0611) 
                                        (0612) Err_Exit_RepStart:
0BB3: 50 00    MOV   A,0x0              (0613)     mov   A, 0
                                        (0614)     RAM_EPILOGUE RAM_USE_CLASS_4
0BB5: 7F       RET                      (0615)     ret
                                        (0616) 
                                        (0617)  notBusMaster1:
                                        (0618)     ;SetI2CHW_MSCR 0
                                        (0619)     ;mov reg[I2CHW_MSCR], 0                                ;we certainly cant restart if we've not Master
                                        (0620)     ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
0BB6: 50 00    MOV   A,0x0              (0621)     mov   A, 0
                                        (0622)     RAM_EPILOGUE RAM_USE_CLASS_4
0BB8: 7F       RET                      (0623)     ret
0BB9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0624) 
                                        (0625) .ENDSECTION
                                        (0626) 
                                        (0627) .SECTION
                                        (0628) ;-----------------------------------------------------------------------------
                                        (0629) ;  FUNCTION NAME: I2CHW_fSendStart
                                        (0630) ;
                                        (0631) ;  DESCRIPTION:
                                        (0632) ;    Generates start condition and sends slave address.
                                        (0633) ;
                                        (0634) ;-----------------------------------------------------------------------------
                                        (0635) ;
                                        (0636) ;  ARGUMENTS:
                                        (0637) ;    A => Contains the slave address.
                                        (0638) ;
                                        (0639) ;  RETURNS:
                                        (0640) ;    I2CHW_bSTatus - nonZero if a slave responds to a request. Zero otherwise
                                        (0641) ;    Acc register contains non zero value for success (contents of the i2C_SCR reg)  0 indicates failure
                                        (0642) ;    Returns a zero if the repeat start results in a NAK by an addressed device.
                                        (0643) ;
                                        (0644) ;  SIDE EFFECTS:
                                        (0645) ;    The A and X registers may be modified by this or future implementations
                                        (0646) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0647) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0648) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0649) ;    functions.
                                        (0650) ;          
                                        (0651) ;    Currently only the page pointer registers listed below are modified: 
                                        (0652) ;          CUR_PP
                                        (0653) ;
                                        (0654) ;  THEORY of OPERATION or PROCEDURE:
                                        (0655) ;   Send start by setting SDA low while SCL is high. Set
                                        (0656) ;   SCL low in preparation to send address. 
                                        (0657) ;   Sends address, waits for byte complete
                                        (0658) ;   An address must be followed by a read or write of data if it was acked by a slave
                                        (0659) ;
                                        (0660) ;  WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0661) ;   flag is set to return.
                                        (0662) ;
                                        (0663) ;
                                        (0664) ;-----------------------------------------------------------------------------
                                        (0665)  I2CHW_fSendStart:
                                        (0666) _I2CHW_fSendStart:
                                        (0667)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0668) 	RAM_SETPAGE_CUR >I2CHW_bStatus 
                                        (0669)     ;wait if the bus is already busy...
0BBC: 08       PUSH  A                  (0670)     push  A
0BBD: 55 05 00 MOV   [0x5],0x0          (0671)     mov   [I2CHW_bStatus], 0x00
                                        (0672) I2CMSCR_NotReady5:
0BC0: 51 07    MOV   A,[0x7]            (0673)     mov    A, [I2CHW_RsrcStatus]                           ; test to see if previous command started ISR
0BC2: 47 07 80 TST   [0x7],0x80         (0674)     tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0675)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (0676)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (0677)           ;For multi master operations, a pening start or restart
                                        (0678)           ;request might be OK, the master might be waiting to
                                        (0679)           ;acquire the bus from another master
0BC5: BF FA    JNZ   0x0BC0             (0680)     jnz   I2CMSCR_NotReady5
0BC7: 18       POP   A                  (0681)     pop   A
0BC8: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0682) 
                                        (0683) 
                                        (0684)     ; disable the interrupt
                                        (0685)         ; *** NOT REENABLED ***
                                        (0686)         ;
                                        (0687)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0BCB: 49 D7 01 TST   REG[0xD7],0x1      (0688)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ;If there is a pending BYTE_COMPL here
                                        (0689)                                                                 ;it is highly probable that a start is not the
                                        (0690)                                                                                                                     ;correct thing to do.
                                        (0691)                                                                                                                     ;leaving
0BCE: B0 20    JNZ   0x0BEF             (0692)     jnz   Err_Exit_Start
                                        (0693) 
0BD0: 64       ASL   A                  (0694)     asl   a                                                ; Shift address to the left
0BD1: 79       DEC   X                  (0695)     dec   x                                                ; If zero, C flag will be set
0BD2: C0 03    JC    0x0BD6             (0696)     jc    I2C_SndWRStart                                   ; Do a write if zero
0BD4: 29 01    OR    A,0x1              (0697)     or    a,0x01                                           ; Set Read flag
                                        (0698) I2C_SndWRStart:
0BD6: 60 D8    MOV   REG[0xD8],A        (0699)     mov   reg[I2CHW_DR], A
0BD8: 53 06    MOV   [0x6],A            (0700)     mov   [I2CHW_SlaveAddr], A
0BDA: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0701)     ;SetI2CHW_MSCR, I2CM_SNDSTRT
                                        (0702)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0703) 
                                        (0704) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0705)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0706) ;ELSE
                                        (0707) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0708) ;ENDIF
                                        (0709) 
                                        (0710) 
                                        (0711) WaitStrtByteCompl:
0BDD: 5D D7    MOV   A,REG[0xD7]        (0712)     mov   A,  reg[I2CHW_SCR]
0BDF: 49 D7 01 TST   REG[0xD7],0x1      (0713)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0BE2: AF FA    JZ    0x0BDD             (0714)     jz    WaitStrtByteCompl
0BE4: 49 D7 02 TST   REG[0xD7],0x2      (0715)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0BE7: B0 07    JNZ   0x0BEF             (0716)     jnz   Err_Exit_Start
0BE9: 55 05 01 MOV   [0x5],0x1          (0717)     mov   [I2CHW_bStatus], 0x01
0BEC: 50 01    MOV   A,0x1              (0718)     mov   A, 01
                                        (0719)     RAM_EPILOGUE RAM_USE_CLASS_4
0BEE: 7F       RET                      (0720)     ret
                                        (0721) Err_Exit_Start:
0BEF: 50 00    MOV   A,0x0              (0722)     mov   A, 0
                                        (0723)     RAM_EPILOGUE RAM_USE_CLASS_4
0BF1: 7F       RET                      (0724)     ret
0BF2: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0725) 
                                        (0726) I2C_DoStart:
                                        (0727)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0728)     RAM_SETPAGE_CUR >I2CHW_SlaveAddr
                                        (0729)     ;here we are not required to test for master operation since we are only attempting to gain control of the bus
                                        (0730)     ; by attempting to assert a Start
                                        (0731)     
0BF5: 60 D8    MOV   REG[0xD8],A        (0732)     mov   reg[I2CHW_DR], A
0BF7: 53 06    MOV   [0x6],A            (0733)     mov   [I2CHW_SlaveAddr], A
0BF9: 62 D9 01 MOV   REG[0xD9],0x1      
                                        (0734)     ;SetI2CHW_MSCR  I2CM_SNDSTRT
                                        (0735)     ;mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0736) 
                                        (0737) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0738)     SetI2CHW_MSCR I2CM_SNDSTRT
                                        (0739) ;ELSE
                                        (0740) ;    mov   reg[I2CHW_MSCR], I2CM_SNDSTRT
                                        (0741) ;ENDIF
                                        (0742)     RAM_EPILOGUE RAM_USE_CLASS_4
0BFC: 7F       RET                      (0743)     ret
0BFD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0744) ;
                                        (0745) ;   DO NOT PLACE
                                        (0746) ;   .SECTION
                                        (0747) ;   .ENDSECTION
                                        (0748) ;   _fSendStart USES CODE BELOW
                                        (0749) ;
                                        (0750) ;-----------------------------------------------------------------------------
                                        (0751) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0752) ;
                                        (0753) ;  DESCRIPTION:
                                        (0754) ;    Writes a byte to the I2C master bus.
                                        (0755) ;
                                        (0756) ;-----------------------------------------------------------------------------
                                        (0757) ;
                                        (0758) ;  ARGUMENTS:
                                        (0759) ;    A contains Data to be written to I2C slave.
                                        (0760) ;
                                        (0761) ;  RETURNS:
                                        (0762) ;    1 If ACKed, else 0
                                        (0763) ;
                                        (0764) ;  SIDE EFFECTS:
                                        (0765) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0766) ;
                                        (0767) ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0768) ;
                                        (0769) ;  FUNCTION NAME: I2CHW_fWrite
                                        (0770) ;
                                        (0771) ;  DESCRIPTION:
                                        (0772) ;    Writes a data byte to the I2C master bus. 
                                        (0773) ;
                                        (0774) ;  ARGUMENTS:
                                        (0775) ;    Reg A contains slave address.
                                        (0776) ;    I2CHW_bData - Contains data to be transmitted.
                                        (0777) ;
                                        (0778) ;  RETURNS:
                                        (0779) ;    I2CHW_bStatus - Cleared if a slave responds to a request. Set otherwise
                                        (0780) ;
                                        (0781) ;  SIDE EFFECTS:
                                        (0782) ;    The A and X registers may be modified by this or future implementations
                                        (0783) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0784) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0785) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0786) ;    functions.
                                        (0787) ;          
                                        (0788) ;    Currently only the page pointer registers listed below are modified: 
                                        (0789) ;          CUR_PP
                                        (0790) ;
                                        (0791) ;    Send data byte to slave. .
                                        (0792) ;
                                        (0793) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0794) ;    flag is set to return.
                                        (0795) ;
                                        (0796)  I2CHW_fWrite:
                                        (0797) _I2CHW_fWrite:
                                        (0798)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0799) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0800)     ; disable the interrupt
                                        (0801)         ; *** NOT REENABLED ***
                                        (0802)         ;
0C00: 60 D8    MOV   REG[0xD8],A        (0803)     mov   reg[I2CHW_DR],A                                  ; Put data in Data Reg
0C02: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0804)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0C05: 5D D9    MOV   A,REG[0xD9]        (0805)     mov   A,  reg[I2CHW_MSCR]                              ;MSCR into A incase there is an error here
0C07: 49 D9 04 TST   REG[0xD9],0x4      (0806)     tst   reg[I2CHW_MSCR],I2CM_MASTEROP                    ;Do we have control of the bus?
0C0A: A0 19    JZ    0x0C24             (0807)     jz    Err_Exit_fWrite
                                        (0808) 
0C0C: 55 05 00 MOV   [0x5],0x0          (0809)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
0C0F: 62 D7 04 MOV   REG[0xD7],0x4      
                                        (0810)     ;SetI2CHW_SCR I2C_TX
                                        (0811)     ;mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0812) 
                                        (0813) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0814)         SetI2CHW_SCR I2C_TX                                ; Put data in Data Reg
                                        (0815) ;ELSE
                                        (0816) ;    mov   reg[I2CHW_SCR], I2C_TX                          ; Put data in Data Reg
                                        (0817) ;ENDIF
                                        (0818) 
                                        (0819) 
                                        (0820) I2CHW_write:
                                        (0821) _I2CHW_write:
                                        (0822) ;    mov   reg[I2CHW_SCR],A                                ; Put data in bData
                                        (0823) ;   jmp   I2CHW_get_ack                                    ; This jump is not required since it falls
                                        (0824) 
                                        (0825) WaitTXByteCompl:
0C12: 5D D7    MOV   A,REG[0xD7]        (0826)     mov   A, reg[I2CHW_SCR]
0C14: 49 D7 01 TST   REG[0xD7],0x1      (0827)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0C17: AF FA    JZ    0x0C12             (0828)     jz    WaitTXByteCompl
0C19: 49 D7 02 TST   REG[0xD7],0x2      (0829)     tst   reg[I2CHW_SCR], I2C_LST_BIT
0C1C: B0 07    JNZ   0x0C24             (0830)     jnz   Err_Exit_fWrite
0C1E: 55 05 FF MOV   [0x5],0xFF         (0831)     mov   [I2CHW_bStatus], 0xff
0C21: 50 01    MOV   A,0x1              (0832)     mov   A, 01
                                        (0833)     RAM_EPILOGUE RAM_USE_CLASS_4
0C23: 7F       RET                      (0834)     ret
                                        (0835) 
                                        (0836) Err_Exit_fWrite:
0C24: 50 00    MOV   A,0x0              (0837)     mov   A, 0
0C26: 53 05    MOV   [0x5],A            (0838)     mov   [I2CHW_bStatus], A
                                        (0839)     RAM_EPILOGUE RAM_USE_CLASS_4
0C28: 7F       RET                      (0840)     ret
0C29: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0841) 
                                        (0842) .ENDSECTION
                                        (0843) 
                                        (0844) .SECTION
                                        (0845) ;-----------------------------------------------------------------------------
                                        (0846) ;  FUNCTION NAME: I2CHW_get_ack
                                        (0847) ;
                                        (0848) ;  DESCRIPTION:
                                        (0849) ;    Get slave acknowledge response. Used to poll for I2C_BYTE_COMPL and then test Ack (I2C_LST_BIT)
                                        (0850) ;
                                        (0851) ;-----------------------------------------------------------------------------
                                        (0852) ;
                                        (0853) ;  ARGUMENTS:
                                        (0854) ;
                                        (0855) ;  RETURNS:
                                        (0856) ;    Sets flag in I2CHW_bStatus if ACKed by Slave.  !!!
                                        (0857) ;
                                        (0858) ;  SIDE EFFECTS:
                                        (0859) ;    The A and X registers may be modified by this or future implementations
                                        (0860) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0861) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0862) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0863) ;    functions.
                                        (0864) ;          
                                        (0865) ;    Currently only the page pointer registers listed below are modified: 
                                        (0866) ;          CUR_PP
                                        (0867) ;
                                        (0868) ;    Do the ack clock and check for Slave ACK
                                        (0869) ;
                                        (0870) I2CHW_get_ack:
                                        (0871) _I2CHW_get_ack:
                                        (0872)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0873) 	RAM_SETPAGE_CUR >I2CHW_bStatus
0C2C: 26 05 FE AND   [0x5],0xFE         (0874)     and [I2CHW_bStatus], ~I2CHW_SLAVE_ACKed
0C2F: 49 D7 01 TST   REG[0xD7],0x1      (0875)     tst reg[I2CHW_SCR], I2C_BYTE_COMPL
0C32: BF F6    JNZ   0x0C29             (0876)     jnz I2CHW_get_ack
0C34: 49 D7 02 TST   REG[0xD7],0x2      (0877)     tst reg[I2CHW_SCR], I2C_LST_BIT
0C37: B0 04    JNZ   0x0C3C             (0878)     jnz notAcked
0C39: 2E 05 01 OR    [0x5],0x1          (0879)     or [I2CHW_bStatus], I2CHW_SLAVE_ACKed
                                        (0880) notAcked:
                                        (0881)     RAM_EPILOGUE RAM_USE_CLASS_4
0C3C: 7F       RET                      (0882)     ret
0C3D: 62 D0 00 MOV   REG[0xD0],0x0      
0C40: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0883) 
                                        (0884) .ENDSECTION
                                        (0885) 
                                        (0886) .SECTION
                                        (0887) 
                                        (0888) ;-----------------------------------------------------------------------------
                                        (0889) ;  FUNCTION NAME: I2CHW_bRead
                                        (0890) ;
                                        (0891) ;  DESCRIPTION:
                                        (0892) ;    Reads 1 data byte from the I2C master bus.
                                        (0893) ;
                                        (0894) ;-----------------------------------------------------------------------------
                                        (0895) ;
                                        (0896) ;  ARGUMENTS:
                                        (0897) ;    Reg A Contains the Slave Address.
                                        (0898) ;    I2CHW_bStatus - Set for no ack to be followed by stop.
                                        (0899) ;    Clear for ack to indicate more data to follow.
                                        (0900) ;
                                        (0901) ;  RETURNS:
                                        (0902) ;    I2CHW_bData - Contains received data.
                                        (0903) ;
                                        (0904) ;  SIDE EFFECTS:
                                        (0905) ;    The A and X registers may be modified by this or future implementations
                                        (0906) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0907) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0908) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0909) ;    functions.
                                        (0910) ;          
                                        (0911) ;    Currently only the page pointer registers listed below are modified: 
                                        (0912) ;          CUR_PP
                                        (0913) ;
                                        (0914) ;    Must be followed by I2CHW_put_ack.
                                        (0915) ;    The I2CHW interrupt should be disabled since this routine will poll the
                                        (0916) ;    reg[I2CHW_SCR] to determine when a byte is available
                                        (0917) ;
                                        (0918) ;   WARNING: this routine will disable the I2C interrupt.  It will wait until the I2C_BYTE_COMPLETE
                                        (0919) ;    flag is set to return.
                                        (0920) ;
                                        (0921) I2CHW_bRead:
                                        (0922) _I2CHW_bRead:
                                        (0923)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0924) 	RAM_SETPAGE_CUR >I2CHW_bStatus
                                        (0925)     ; disable the interrupt
                                        (0926)     ; *** NOT REENABLED ***
                                        (0927)     ;
                                        (0928)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0C43: 49 D9 04 TST   REG[0xD9],0x4      (0929)     tst       reg[I2CHW_MSCR], I2CM_MASTEROP               ;do we even have control of the bus?
0C46: A0 28    JZ    0x0C6F             (0930)     jz    notBusMaster2
                                        (0931) 
0C48: 55 05 00 MOV   [0x5],0x0          (0932)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0933)     ;or    I2CHW_SEND_ACK                                  ; Set ACK flag
                                        (0934) ;
                                        (0935) ; Check for the special case of the first read after and address is sent
                                        (0936) ;
                                        (0937) 
0C4B: 08       PUSH  A                  (0938)     push  A                                                ;preserve the information about wether to ACK or NAK this byte
0C4C: 5D D7    MOV   A,REG[0xD7]        (0939)     mov   A, reg[I2CHW_SCR]
0C4E: 49 D7 08 TST   REG[0xD7],0x8      (0940)     tst   reg[I2CHW_SCR], I2C_ADDRIN
0C51: A0 04    JZ    0x0C56             (0941)     jz    WaitRXByteCompl                                  ;addr bit not set then this is a normal read
0C53: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0942)     ;SetI2CHW_SCR 0
                                        (0943)     ;mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0944) 
                                        (0945) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0946)     SetI2CHW_SCR 0                                         ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0947) ;ELSE
                                        (0948) ;    mov   reg[I2CHW_SCR], 0                               ;clear the I2C_ADDR bit (to unstall SCL) & wait for next byte
                                        (0949) ;ENDIF
                                        (0950)                                                            ; through to I2CHW_put_ack.
                                        (0951) 
                                        (0952)     ;must DROP through to send an Ack and another byte,
                                        (0953)     ;to stop reading we NAK the slave
                                        (0954) WaitRXByteCompl:
0C56: 49 D7 01 TST   REG[0xD7],0x1      (0955)     tst   reg[I2CHW_SCR],I2C_BYTE_COMPL                    ; Test to see if Slave ACKed
0C59: AF FC    JZ    0x0C56             (0956)     jz    WaitRXByteCompl
                                        (0957) 
0C5B: 18       POP   A                  (0958)     pop   A                                                ;recover the saved ACK/NAK flag
0C5C: 21 FF    AND   A,0xFF             (0959)     and   A,0xFF                                           ; Is Ack flag set"
0C5E: A0 0A    JZ    0x0C69             (0960)     jz    exit_bRead_NOACK                                 ; Don't ACK
                                        (0961) 
                                        (0962)         ;now if the ACK flag was set, Ack the data which will release the bus and start the next byte in
                                        (0963)         ;otherwise do NOTHING to the SCR reg.  This will allow the calling routine to generate a repeat start
                                        (0964)         ;or a stop depending on it's preference.
                                        (0965) 
                                        (0966) 
0C60: 5D D8    MOV   A,REG[0xD8]        (0967)     mov   A, reg[I2CHW_DR]                                 ; Record data received
0C62: 62 D7 10 MOV   REG[0xD7],0x10     
                                        (0968)     ;SetI2CHW_SCR I2C_ACKOUT
                                        (0969)     ;mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0970) 
                                        (0971) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (0972)     SetI2CHW_SCR I2C_ACKOUT                                ; Record data received
                                        (0973) ;ELSE
                                        (0974) ;    mov   reg[I2CHW_SCR], I2C_ACKOUT                      ; Record data received
                                        (0975) ;ENDIF
                                        (0976) 
0C65: 55 05 01 MOV   [0x5],0x1          (0977)     mov   [I2CHW_bStatus],0x01                             ; Clear ACK flag
                                        (0978)     RAM_EPILOGUE RAM_USE_CLASS_4
0C68: 7F       RET                      (0979)     ret
                                        (0980) 
                                        (0981) exit_bRead_NOACK:
0C69: 5D D8    MOV   A,REG[0xD8]        (0982)     mov   A, reg[I2CHW_DR]                                 ; Record data received
                                        (0983)     ; send no Ack or Nak, the calling routine will have to decide to NAK or execute a repeat start.
                                        (0984)     ; sending nothing leaves the bus held in wait until a decision is made.
0C6B: 55 05 00 MOV   [0x5],0x0          (0985)     mov   [I2CHW_bStatus],0x00                             ; Clear ACK flag
                                        (0986)     RAM_EPILOGUE RAM_USE_CLASS_4
0C6E: 7F       RET                      (0987)     ret
                                        (0988) 
                                        (0989) notBusMaster2:
0C6F: 55 05 FF MOV   [0x5],0xFF         (0990)    mov   [I2CHW_bStatus], 0xff
                                        (0991)    ;SetI2CHW_SCR 0
                                        (0992)    ;mov          reg[I2CHW_MSCR], 0                        ;we certainly cant restart if we've not Master
                                        (0993)    ;WHAT else should be done for this case?  Some sort of improper operation is being attempted.
                                        (0994)    RAM_EPILOGUE RAM_USE_CLASS_4
0C72: 7F       RET                      (0995)    ret
                                        (0996) 
                                        (0997) .ENDSECTION
                                        (0998) 
                                        (0999) 
                                        (1000) .SECTION
                                        (1001) ;-----------------------------------------------------------------------------
                                        (1002) ;  FUNCTION NAME: I2CHW_SendStop
                                        (1003) ;
                                        (1004) ;  DESCRIPTION:
                                        (1005) ;    Assert stop condition.
                                        (1006) ;
                                        (1007) ;-----------------------------------------------------------------------------
                                        (1008) ;
                                        (1009) ;  ARGUMENTS: none
                                        (1010) ;
                                        (1011) ;  RETURNS: none
                                        (1012) ;
                                        (1013) ;  SIDE EFFECTS:
                                        (1014) ;    The A and X registers may be modified by this or future implementations
                                        (1015) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1016) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1017) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1018) ;    functions.
                                        (1019) ;
                                        (1020) ;  THEORY of OPERATION or PROCEDURE:
                                        (1021) ;     Send stop by releasing SDA high while SCL high. When in Master Read Mode, this
                                        (1022) ;     is done by nak'ing a read from the slave, in Master Write Mode this is done by clearing
                                        (1023) ;     the I2C_TX bit in  reg[I2CHW_SCR].  In either case this is a zero written to
                                        (1024) ;     reg[I2CHW_SCR].
                                        (1025) ;
                                        (1026)  I2CHW_SendStop:
                                        (1027) _I2CHW_SendStop:
                                        (1028)     RAM_PROLOGUE RAM_USE_CLASS_1
0C73: 49 D9 04 TST   REG[0xD9],0x4      (1029)     tst   reg[I2CHW_MSCR], I2CM_MASTEROP                   ;do we even have control of the bus?
0C76: A0 04    JZ    0x0C7B             (1030)     jz    notBusMaster3
0C78: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (1031)     ;SetI2CHW_SCR 0
                                        (1032)     ;mov  reg[I2CHW_SCR], 0
                                        (1033) ;IF I2CHW_THROTTLE_CLK_RATE
                                        (1034)     SetI2CHW_SCR 0                                         ; Put data in Data Reg
                                        (1035) ;ELSE
                                        (1036) ;    mov   reg[I2CHW_SCR], 0                               ; Put data in Data Reg
                                        (1037) ;ENDIF
                                        (1038) 
                                        (1039) notBusMaster3:
                                        (1040)     RAM_EPILOGUE RAM_USE_CLASS_1
0C7B: 7F       RET                      (1041)     ret
0C7C: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (1042) .ENDSECTION
                                        (1043) 
                                        (1044) .SECTION
                                        (1045) ;-----------------------------------------------------------------------------
                                        (1046) ;  FUNCTION NAME: I2CHW_bReadBusStatus
                                        (1047) ;
                                        (1048) ;  DESCRIPTION:
                                        (1049) ;     Returns the Status bits in the bStatus Register
                                        (1050) ;
                                        (1051) ;-----------------------------------------------------------------------------
                                        (1052) ;
                                        (1053) ;  ARGUMENTS:
                                        (1054) ;
                                        (1055) ;  RETURNS:
                                        (1056) ;     BYTE  bStatus -  Bus status data.  Use the following defined bits
                                        (1057) ;     returned in A.
                                        (1058) ;       I2CHW_RepStart:                     equ  0x01
                                        (1059) ;       I2CHW_NoStop:                       equ  0x02
                                        (1060) ;       I2CHW_NAKnextWr:                    equ  0x04
                                        (1061) ;
                                        (1062) ;  SIDE EFFECTS:
                                        (1063) ;    The A and X registers may be modified by this or future implementations
                                        (1064) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1065) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1066) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1067) ;    functions.
                                        (1068) ;          
                                        (1069) ;  THEORY of OPERATION or PROCEDURE:
                                        (1070) ;     Read the Bus Status register.
                                        (1071) ;
                                        (1072) 
                                        (1073)  I2CHW_bReadBusStatus:
                                        (1074) _I2CHW_bReadBusStatus:
                                        (1075)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (1076)    RAM_SETPAGE_CUR >I2CHW_bStatus				                      ;Set the Page Pointer for LMM
0C7F: 51 05    MOV   A,[0x5]            (1077)    mov   A, [I2CHW_bStatus]                      ;return the status in A
                                        (1078)    RAM_EPILOGUE RAM_USE_CLASS_4
0C81: 7F       RET                      (1079)    ret
                                        (1080) 
                                        (1081) .ENDSECTION
                                        (1082) 
                                        (1083) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1084) .SECTION
                                        (1085) ;-----------------------------------------------------------------------------
                                        (1086) ;  FUNCTION NAME: I2CHW_fReadBytes
                                        (1087) ;
                                        (1088) ;  DESCRIPTION:
                                        (1089) ;
                                        (1090) ;-----------------------------------------------------------------------------
                                        (1091) ;
                                        (1092) ;  ARGUMENTS:
                                        (1093) ;      A => Address of slave
                                        (1094) ;      X => Pointer to other arguments.
                                        (1095) ;    [x] => LSB of Array address to put data in.
                                        (1096) ;  [X-1] => MSB of Array address to put data in (ignorned)
                                        (1097) ;  [X-2] => Count of bytes to read.
                                        (1098) ;  [X-3] => Mode flags that allow the programmer to set flags
                                        (1099) ;           to determine if:
                                        (1100) ;             0x01 => Use RepeatStart instead of Start
                                        (1101) ;             0x02 => Don't send Stop
                                        (1102) ;
                                        (1103) ;  RETURNS:       None
                                        (1104) ;
                                        (1105) ;  SIDE EFFECTS:
                                        (1106) ;    The A and X registers may be modified by this or future implementations
                                        (1107) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1108) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1109) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1110) ;    functions.
                                        (1111) ;          
                                        (1112) ;    Currently only the page pointer registers listed below are modified: 
                                        (1113) ;          CUR_PP
                                        (1114) ;
                                        (1115) ;  THEORY of OPERATION or PROCEDURE:
                                        (1116) ;    I2C and block must be operational.
                                        (1117) ;    This routine will enable the I2C interrupt!
                                        (1118) ;    If the I2CHW_ISR_ACTIVE indicates that the I2CHW_ISR is already running this routine will
                                        (1119) ;    pend on the ISR_ACTIVE bit until it can run
                                        (1120) ;
                                        (1121) IF	(TOOLCHAIN & HITECH)
                                        (1122) RxArray:      set   0
                                        (1123) RxByteCount:  set  -2
                                        (1124) RxMode:       set  -3
                                        (1125) ELSE
                                        (1126) RxArray:      equ   0
                                        (1127) RxByteCount:  equ  -2
                                        (1128) RxMode:       equ  -3
                                        (1129) ENDIF
                                        (1130) 
                                        (1131) 
                                        (1132)  I2CHW_fReadBytes:
                                        (1133)     push  A
                                        (1134) I2CMSCR_NotReady1Smm:
                                        (1135)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1136)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1137)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1138)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1139)           ;For multi master operations, a pening start or restart
                                        (1140)           ;request might be OK, the master might be waiting to
                                        (1141)           ;acquire the bus from another master
                                        (1142)         jnz   I2CMSCR_NotReady1Smm
                                        (1143)     pop   A
                                        (1144)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared by ISR
                                        (1145)     asl   A                                                ; Shift address to the left to make
                                        (1146)                                                            ; a complete byte with the R/W bit.
                                        (1147)     or    A,0x01                                           ; OR the address with the Read bit.
                                        (1148)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1149)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1150)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1151)     mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1152)     mov   [I2CHW_bStatus],A
                                        (1153)     ;
                                        (1154)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1155)         ;
                                        (1156)         push   X                                                ;preserve since it's used later
                                        (1157)         mov    A, [X+RxByteCount]                               ;get the write buf size
                                        (1158)         push   A
                                        (1159)         push   A                                                                                            ;this will be ignored
                                        (1160)         mov    A, [X+RxArray]                                   ;get the write buf addr
                                        (1161)         push   A
                                        (1162)         mov    X, sp
                                        (1163)         dec    X
                                        (1164)         call  I2CHW_InitWrite                              ;sets the addr and byte count to write to
                                        (1165)         add SP, -3
                                        (1166)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1167) 
                                        (1168)     mov   A,[I2CHW_SlaveAddr]
                                        (1169)     tst   [x+RxMode],I2CHW_RepStart
                                        (1170)     jnz   DoRestartRxSmm
                                        (1171)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1172)     jnz   DoRestartRxSmm
                                        (1173)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1174)     jmp   CheckRxAckSmm
                                        (1175) DoRestartRxSmm:
                                        (1176)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1177)         ;note that REPEATSTART can only be used if this master currently has control of the bus and is at the end
                                        (1178)         ; of or ending the current data transmission/reception.  This also requres that the software (this UM)
                                        (1179)         ; as a whole be able to detect that a stop has not been sent previously in this transmission.
                                        (1180) 
                                        (1181) CheckRxAckSmm:                                                ; Test to see if Slave ACKed
                                        (1182)         ;nothing to do here, a start and address are being transmitted, wait for the ISR to pick up, when it
                                        (1183)         ;is finished.
                                        (1184) ;End_RD:
                                        (1185)     ret
                                        (1186) 
                                        (1187) .ENDSECTION
                                        (1188) 
                                        (1189) .SECTION
                                        (1190) ;-----------------------------------------------------------------------------
                                        (1191) ;  FUNCTION NAME: I2CHW_bWriteBytes
                                        (1192) ;
                                        (1193) ;  DESCRIPTION:
                                        (1194) ;    Write multiple data bits to slave device.
                                        (1195) ;
                                        (1196) ;-----------------------------------------------------------------------------
                                        (1197) ;
                                        (1198) ;  ARGUMENTS:
                                        (1199) ;     A => Address of slave
                                        (1200) ;     X => Pointer to other arguments.
                                        (1201) ;   [x] => LSB of Array address to put data in.
                                        (1202) ; [X-1] => MSB of Array address to put data in (ignorned)
                                        (1203) ; [X-2] => Count of bytes to write.
                                        (1204) ; [X-3] => Mode flags that allow the programmer to set flags
                                        (1205) ;          to determine if:
                                        (1206) ;              0x01 => Use RePeatStart instead of Start
                                        (1207) ;              0x02 => Don't send Stop
                                        (1208) ;
                                        (1209) ;
                                        (1210) ;  RETURNS:     None
                                        (1211) ;
                                        (1212) ;  SIDE EFFECTS:
                                        (1213) ;    The A and X registers may be modified by this or future implementations
                                        (1214) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1215) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1216) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1217) ;    functions.
                                        (1218) ;          
                                        (1219) IF	(TOOLCHAIN & HITECH)
                                        (1220) TxArray:      set   0
                                        (1221) TxByteCount:  set  -2
                                        (1222) TxMode:       set  -3
                                        (1223) ELSE
                                        (1224) TxArray:      equ   0
                                        (1225) TxByteCount:  equ  -2
                                        (1226) TxMode:       equ  -3
                                        (1227) ENDIF
                                        (1228) 
                                        (1229)  I2CHW_bWriteBytes:
                                        (1230)     push  A
                                        (1231) I2CMSCR_NotReady2Smm:
                                        (1232)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1233)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1234)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1235)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1236)           ;For multi master operations, a pening start or restart
                                        (1237)           ;request might be OK, the master might be waiting to
                                        (1238)           ;acquire the bus from another master
                                        (1239)         jnz   I2CMSCR_NotReady2Smm
                                        (1240)     pop   A
                                        (1241)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ; flag set here and cleared at end of ISR
                                        (1242)     asl   A                                                ; Shift address to the left to make
                                        (1243)                                                            ; a complete byte with the R/W bit.
                                        (1244)                                                            ; The ASL takes care of clearing bit 0.
                                        (1245)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1246)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1247)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1248)     mov   A, [X+TxMode]                                                             ; place the TxMode in status so ISR can access it
                                        (1249)     mov   [I2CHW_bStatus],A
                                        (1250)     ;
                                        (1251)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1252)         ;
                                        (1253)         push   X                                                ;preserve since it's used later
                                        (1254)         inc    [X+TxByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1255)                                                                 ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1256)         mov    A, [X+TxByteCount]                               ;get the write buf size
                                        (1257)         push   A
                                        (1258)         push   A                                                                                            ;this will be ignored
                                        (1259)         mov    A, [X+TxArray]                                   ;get the write buf addr
                                        (1260)         push   A
                                        (1261)         mov    X, sp
                                        (1262)         dec    X
                                        (1263)         call  I2CHW_InitRamRead                            ;sets the addr and byte count to write to
                                        (1264)         add    SP, -3
                                        (1265)         pop    X                                                ;restore X to be used for the rest of this routine
                                        (1266)     ;and  [I2CHW_RsrcStatus],~I2C_READFLASH                ;shouldn't be needed should have been taken care of in InitRamRead routine
                                        (1267) 
                                        (1268) 
                                        (1269)     mov   A,[I2CHW_SlaveAddr]
                                        (1270)     tst   [x+TxMode],I2CHW_RepStart
                                        (1271)     jnz   DoRestartTxSmm
                                        (1272)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1273)     jnz   DoRestartRxSmm
                                        (1274)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1275)     jmp   DoTxAckSmm
                                        (1276) DoRestartTxSmm:
                                        (1277)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1278) DoTxAckSmm:
                                        (1279) 
                                        (1280) 
                                        (1281) ;WriteSlaveAck:
                                        (1282)     ret
                                        (1283) 
                                        (1284) .ENDSECTION
                                        (1285) 
                                        (1286) .SECTION
                                        (1287) ;-----------------------------------------------------------------------------
                                        (1288) ;  FUNCTION NAME: I2CHW_bWriteCBytes
                                        (1289) ;
                                        (1290) ;  DESCRIPTION:
                                        (1291) ;    Write multiple data bits to slave device from ROM
                                        (1292) ;
                                        (1293) ;-----------------------------------------------------------------------------
                                        (1294) ;
                                        (1295) ;  ARGUMENTS:
                                        (1296) ;      A => Address of slave
                                        (1297) ;      X => Pointer to other arguments.
                                        (1298) ;     [x] => LSB of ROM Array address to put data in.
                                        (1299) ;   [X-1] => MSB of ROM Array address to put data in (ignorned)
                                        (1300) ;   [X-2] => Count of bytes to write.
                                        (1301) ;   [X-3] => Mode flags that allow the programmer to set flags
                                        (1302) ;            to determine if:
                                        (1303) ;               0x01 => Use RepeatStart instead of Start
                                        (1304) ;               0x02 => Don't send Stop
                                        (1305) ;
                                        (1306) ;  RETURNS:
                                        (1307) ;    None
                                        (1308) ;
                                        (1309) ;  SIDE EFFECTS:
                                        (1310) ;    The A and X registers may be modified by this or future implementations
                                        (1311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (1314) ;    functions.
                                        (1315) ;          
                                        (1316) IF	(TOOLCHAIN & HITECH)
                                        (1317) TxCArrayLSB:   set   0
                                        (1318) TxCArrayMSB:   set  -1
                                        (1319) TxCByteCount:  set  -2
                                        (1320) TxCMode:       set  -3
                                        (1321) ELSE
                                        (1322) TxCArrayLSB:   equ   0
                                        (1323) TxCArrayMSB:   equ  -1
                                        (1324) TxCByteCount:  equ  -2
                                        (1325) TxCMode:       equ  -3
                                        (1326) ENDIF
                                        (1327) 
                                        (1328)  I2CHW_bWriteCBytes:
                                        (1329)     push  A
                                        (1330) I2CMSCR_NotReady3Smm:
                                        (1331)         mov    A, [I2CHW_RsrcStatus]                       ; test to see if previous command started ISR
                                        (1332)         tst    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (1333)     ;mov   A, reg[I2CHW_MSCR]                              ;read the mscr register to look for pending master operations
                                        (1334)     ;and   A, 0x0f                                           ;only look at the lower bits
                                        (1335)           ;For multi master operations, a pening start or restart
                                        (1336)           ;request might be OK, the master might be waiting to
                                        (1337)           ;acquire the bus from another master
                                        (1338)         jnz   I2CMSCR_NotReady3Smm
                                        (1339)     pop   A
                                        (1340)         or    [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE         ;lag set here but cleared in ISRf
                                        (1341)         asl   A                                                 ; Shift address to the left to make
                                        (1342)                                                            ; a complete byte with the R/W bit.
                                        (1343)                                                            ; The ASL takes care of clearing bit 0.
                                        (1344)     mov   [I2CHW_bStatus],0x00                             ; Clear all flags
                                        (1345)     mov   [I2CHW_SlaveAddr], A                             ; preserve addr+r/w state for the ISR to use
                                        (1346)     mov   reg[I2CHW_DR], A                                 ; put the write addr into the I2C_DR reg
                                        (1347)         mov   A, [X+RxMode]                                                             ; place the RxMode in status so ISR can access it
                                        (1348)     mov   [I2CHW_bStatus],A
                                        (1349)     ;
                                        (1350)         ;we must now initialize a read buffer using I2CHW_InitWrite
                                        (1351)         ;
                                        (1352)         push   X                                                ;preserve X since it's used later
                                        (1353)         mov    A, 0                                             ;get the write buf size (this is the hi order part)
                                        (1354)         inc    [X+TxCByteCount]                                 ;increase this by one since the init routine will decrement it by 1
                                        (1355)         jnc     . + 3                                           ;but the ISR understands the original count passed (sigh...)(F.O.E.O.)
                                        (1356)         inc    A                                                                                        ;if the low order part of the count happened to roll to 0x00, inc the hi part
                                        (1357)         push   A
                                        (1358)         mov    A, [X+TxCByteCount]                              ;initFlasRead needs a 2 byte count this is the low ord byte
                                        (1359)         push   A
                                        (1360)         mov    A, [X+TxCArrayMSB]                               ;get the write buf addr
                                        (1361)         push   A                                                                                        ;this will be ignored
                                        (1362)         mov    A, [X+TxCArrayLSB]                               ;get the write buf addr
                                        (1363)         push   A
                                        (1364)         mov    X, sp
                                        (1365)         dec    X
                                        (1366)         call  I2CHW_InitFlashRead                          ;sets the addr and byte count to write to
                                        (1367)         add SP, -4
                                        (1368)         pop X                                                   ;restore X to be used for the rest of this routine
                                        (1369)     ;or  [I2CHW_RsrcStatus],I2C_READFLASH
                                        (1370)     mov   A,[I2CHW_SlaveAddr]
                                        (1371)     tst   [x+TxMode],I2CHW_RepStart                        ; Check if a Start or RepeatStart
                                        (1372)     jnz   DoCRestartTxSmm                                      ; should executed.
                                        (1373)     tst   reg[I2CHW_SCR], I2C_BYTE_COMPL                   ; indicates the I2C bus is stalled
                                        (1374)     jnz   DoRestartRxSmm
                                        (1375)     call  I2C_DoStart                                      ; Send a start and address.
                                        (1376)     jmp   DoCTxAckSmm
                                        (1377) DoCRestartTxSmm:
                                        (1378)     call  I2CHW_DoBufferRepeatStart                           ; Send a repeat start and address.
                                        (1379) 
                                        (1380) DoCTxAckSmm:                                                   ; Test to see if Slave is ACKed
                                        (1381) 
                                        (1382) ;CWriteSlaveAck:
                                        (1383)         ret
                                        (1384) 
                                        (1385) .ENDSECTION
                                        (1386) 
                                        (1387) 
                                        (1388) ENDIF	 ;SYSTEM_SMALL_MEMORY_MODEL
                                        (1389) 
                                        (1390) ; End of File I2CHW.asm
                                        (1391) 
                                        (1392) 
FILE: lib\i2chwint.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWINT.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2CHW Master Interrupt Service Routine
                                        (0008) ;;  This is the interrupt service routine for the Single Master I2C function.
                                        (0009) ;;-----------------------------------------------------------------------------
                                        (0010) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0011) ;;*****************************************************************************
                                        (0012) ;;*****************************************************************************
                                        (0013) 
                                        (0014) include "m8c.inc"
                                        (0015) include "memory.inc"
                                        (0016) include "I2CHWCommon.inc"
                                        (0017) include "I2CHWMstr.inc"
                                        (0018) 
                                        (0019) ;-----------------------------------------------
                                        (0020) ;  Global Symbols
                                        (0021) ;-----------------------------------------------
                                        (0022) 
                                        (0023) export     I2CHW_Read_Count
                                        (0024) export    _I2CHW_Read_Count
                                        (0025) export     I2CHW_Write_Count
                                        (0026) export    _I2CHW_Write_Count
                                        (0027) 
                                        (0028) export    pI2CHW_Read_BufLO
                                        (0029) export   _pI2CHW_Read_BufLO
                                        (0030) export    pI2CHW_Write_BufLO
                                        (0031) export   _pI2CHW_Write_BufLO
                                        (0032) export    I2CHW_RsrcStatus
                                        (0033) export   _I2CHW_RsrcStatus
                                        (0034) export    I2CHW_SlaveAddr
                                        (0035) export   _I2CHW_SlaveAddr
                                        (0036) 
                                        (0037) ;-----------------------------------------------
                                        (0038) ; WARNING: The variables below are deprecated
                                        (0039) ; and have been replaced with Read_BufLO
                                        (0040) ; and Write_BufLO
                                        (0041) ;-----------------------------------------------
                                        (0042) export    pI2CHW_Read_Buf
                                        (0043) export   _pI2CHW_Read_Buf
                                        (0044) export    pI2CHW_Write_Buf
                                        (0045) export   _pI2CHW_Write_Buf
                                        (0046) ;-----------------------------------------------
                                        (0047) ; END WARNING
                                        (0048) ;-----------------------------------------------
                                        (0049)  
                                        (0050) area InterruptRAM(RAM, REL, CON)
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ; Variable Allocation
                                        (0054) ;-----------------------------------------------
                                        (0055) 
                                        (0056)   I2CHW_SlaveAddr:
                                        (0057)  _I2CHW_SlaveAddr:                           blk      1
                                        (0058)   I2CHW_RsrcStatus:
                                        (0059)  _I2CHW_RsrcStatus:                          blk     1
                                        (0060)   I2CHW_Write_Count:
                                        (0061)  _I2CHW_Write_Count:                         blk    1
                                        (0062) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0063) export    pI2CHW_Write_BufHI
                                        (0064) export   _pI2CHW_Write_BufHI
                                        (0065) 
                                        (0066)  pI2CHW_Write_BufHI:
                                        (0067) _pI2CHW_Write_BufHI:                         blk     1
                                        (0068) ENDIF
                                        (0069) ;-----------------------------------------------
                                        (0070) ; WARNING: The variable below is deprecated
                                        (0071) ; and has been replaced Write_BufLO
                                        (0072) ;-----------------------------------------------
                                        (0073)  pI2CHW_Write_Buf:
                                        (0074) _pI2CHW_Write_Buf:
                                        (0075) ;-----------------------------------------------
                                        (0076) ; END WARNING
                                        (0077) ;-----------------------------------------------
                                        (0078)  pI2CHW_Write_BufLO:
                                        (0079) _pI2CHW_Write_BufLO:                         blk      1
                                        (0080) 
                                        (0081) IF I2CHW_READ_FLASH
                                        (0082) export    pI2CHW_Read_BufHI
                                        (0083) export   _pI2CHW_Read_BufHI
                                        (0084) 
                                        (0085)  pI2CHW_Read_BufHI:
                                        (0086) _pI2CHW_Read_BufHI:                          blk     1
                                        (0087) ELSE
                                        (0088) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0089) export    pI2CHW_Read_BufHI
                                        (0090) export   _pI2CHW_Read_BufHI
                                        (0091) 
                                        (0092)  pI2CHW_Read_BufHI:
                                        (0093) _pI2CHW_Read_BufHI:                          blk     1
                                        (0094) ENDIF
                                        (0095) ENDIF
                                        (0096) 
                                        (0097) ;-----------------------------------------------
                                        (0098) ; WARNING: The variable below is deprecated
                                        (0099) ; and has been replaced Read_BufLO
                                        (0100) ;-----------------------------------------------
                                        (0101)  pI2CHW_Read_Buf:
                                        (0102) _pI2CHW_Read_Buf:
                                        (0103) ;-----------------------------------------------
                                        (0104) ; END WARNING
                                        (0105) ;-----------------------------------------------
                                        (0106)  pI2CHW_Read_BufLO:
                                        (0107) _pI2CHW_Read_BufLO:                          blk       1
                                        (0108) 
                                        (0109) IF I2CHW_READ_FLASH
                                        (0110) export    I2CHW_Read_CountHI
                                        (0111) export   _I2CHW_Read_CountHI
                                        (0112) 
                                        (0113)  I2CHW_Read_CountHI:
                                        (0114) _I2CHW_Read_CountHI:                         blk    1
                                        (0115) ENDIF
                                        (0116) 
                                        (0117)  I2CHW_Read_Count:
                                        (0118) _I2CHW_Read_Count:                           blk      1
                                        (0119) 
                                        (0120) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0121) ;---------------------------------------------------
                                        (0122) ; Insert your custom declarations below this banner
                                        (0123) ;---------------------------------------------------
                                        (0124) 
                                        (0125) ;------------------------
                                        (0126) ; Includes
                                        (0127) ;------------------------
                                        (0128) 
                                        (0129) 	
                                        (0130) ;------------------------
                                        (0131) ;  Constant Definitions
                                        (0132) ;------------------------
                                        (0133) 
                                        (0134) 
                                        (0135) ;------------------------
                                        (0136) ; Variable Allocation
                                        (0137) ;------------------------
                                        (0138) 
                                        (0139) 
                                        (0140) ;---------------------------------------------------
                                        (0141) ; Insert your custom declarations above this banner
                                        (0142) ;---------------------------------------------------
                                        (0143) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0144) 
                                        (0145) 
                                        (0146) 
                                        (0147) AREA UserModules (ROM, REL)
                                        (0148) 
                                        (0149) 
                                        (0150) export _I2CHW_ISR
                                        (0151) ;;****************************************************
                                        (0152) ;; I2C_MASTER  main entry point from vector 60h
                                        (0153) ;;
                                        (0154) ;;****************************************************
                                        (0155) 
                                        (0156) 
                                        (0157) _I2CHW_ISR:
0C82: 08       PUSH  A                  (0158)     push A
0C83: 10       PUSH  X                  (0159)     push X
0C84: 5D D3    MOV   A,REG[0xD3]        
0C86: 08       PUSH  A                  
                                        (0160) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0161)     REG_PRESERVE IDX_PP
                                        (0162) ENDIF
                                        (0163)     
                                        (0164)     ; Stop trap is not recommended because the stop bit cannot be cleared
                                        (0165)     ; User may choose to enable it
                                        (0166)     ; Add code to handle stop condition here
                                        (0167) 
0C87: 49 D7 08 TST   REG[0xD7],0x8      (0168)     tst reg[I2CHW_SCR], I2C_ADDRIN
0C8A: A0 18    JZ    0x0CA3             (0169)     jz DataState
                                        (0170)     ;test for a start condition sent out, or bus error, ack from slave, or (lost arb & addr)
                                        (0171) AddrState:
0C8C: 49 D9 01 TST   REG[0xD9],0x1      (0172)     tst reg[I2CHW_MSCR], I2CM_SNDSTRT
0C8F: B0 2F    JNZ   0x0CBF             (0173)     jnz NoStart
0C91: 49 D7 02 TST   REG[0xD7],0x2      (0174)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
0C94: B0 1E    JNZ   0x0CB3             (0175)     jnz SlaveAddrNAK
                                        (0176)                                                            ;slave must have acked here
                                        (0177)                                                            
0C96: 47 06 01 TST   [0x6],0x1          (0178)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read (from slave and put it in RAM,
                                        (0179)                                                            ;bit 0 = 0 then write to slave and get it from RAM or Flash
0C99: B0 2E    JNZ   0x0CC8             (0180)     jnz I2C_ReadSlave1stByte                               ;bit 0 was 1
0C9B: 80 A7    JMP   0x0D43             (0181)     jmp I2C_WriteSlave1stByte                              ;bit 0 was 0
0C9D: 18       POP   A                  
0C9E: 60 D3    MOV   REG[0xD3],A        
                                        (0182) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0183)     REG_RESTORE IDX_PP
                                        (0184) ENDIF
0CA0: 20       POP   X                  (0185)     pop X
0CA1: 18       POP   A                  (0186)     pop A
0CA2: 7E       RETI                     (0187)     reti
                                        (0188) 
                                        (0189) DataState:
0CA3: 2E 07 80 OR    [0x7],0x80         (0190)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
0CA6: 47 06 01 TST   [0x6],0x1          (0191)     tst [I2CHW_SlaveAddr], 01                              ;bit 0 = 1 then read, bit 0 = 0 then write
0CA9: B0 2D    JNZ   0x0CD7             (0192)     jnz I2C_ReadSlave                                      ;bit 0 was 1
                                        (0193) 
                                        (0194) StillDataToWrite:
0CAB: 80 9D    JMP   0x0D49             (0195)     jmp I2C_WriteSlave                                     ;bit 0 was 0
0CAD: 18       POP   A                  
0CAE: 60 D3    MOV   REG[0xD3],A        
                                        (0196) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0197)     REG_RESTORE IDX_PP
                                        (0198) ENDIF
0CB0: 20       POP   X                  (0199)     pop X
0CB1: 18       POP   A                  (0200)     pop A
0CB2: 7E       RETI                     (0201)     reti
0CB3: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0202) 
                                        (0203) 
                                        (0204) SlaveAddrNAK:
                                        (0205)     ;;
                                        (0206)     ;; all there is to do here is to return, the slave didn't respond so it's not there or needs
                                        (0207)     ;; to be tried later.
                                        (0208)     ;;
                                        (0209) ;@PSoC_UserCode_BODY4@ (Do not change this line.)
                                        (0210) ;---------------------------------------------------
                                        (0211) ; Insert your custom code below this banner
                                        (0212) ; to modify the way a NAK from a slave is handled
                                        (0213) ; possibly set a user defined status
                                        (0214) ;---------------------------------------------------
                                        (0215) 
                                        (0216) ;********************************************************
                                        (0217) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0218) ;********************************************************
                                        (0219) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0220) ;
                                        (0221) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0222) ;
                                        (0223)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, generates a stop without sending any data
                                        (0224) 
0CB6: 26 07 7F AND   [0x7],0x7F         (0225)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0CB9: 18       POP   A                  
0CBA: 60 D3    MOV   REG[0xD3],A        
                                        (0226) 
                                        (0227) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0228)     REG_RESTORE IDX_PP
                                        (0229) ENDIF
0CBC: 20       POP   X                  (0230)     pop X
0CBD: 18       POP   A                  (0231)     pop A
0CBE: 7E       RETI                     (0232)     reti
                                        (0233) 
                                        (0234) NoStart:
                                        (0235)     ;here might test loss of arbitration and the presence of an address bit indicating that the
                                        (0236)     ;Master is being addressed as a slave.
                                        (0237)     ;;
                                        (0238)     ;; there may be a need to indicate that there was a Master transmission
                                        (0239)     ;; failure or an unsuccessful attempt.
                                        (0240)     ;;
0CBF: 26 07 7F AND   [0x7],0x7F         (0241)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0CC2: 18       POP   A                  
0CC3: 60 D3    MOV   REG[0xD3],A        
                                        (0242) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0243)     REG_RESTORE IDX_PP
                                        (0244) ENDIF
0CC5: 20       POP   X                  (0245)     pop X
0CC6: 18       POP   A                  (0246)     pop A
0CC7: 7E       RETI                     (0247)     reti
                                        (0248) 
                                        (0249) I2C_ReadSlave1stByte:
0CC8: 2E 07 80 OR    [0x7],0x80         (0250)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
0CCB: 26 07 FB AND   [0x7],0xFB         (0251)     and [I2CHW_RsrcStatus], ~I2CHW_RD_COMPLETE
0CCE: 62 D7 00 MOV   REG[0xD7],0x0      
0CD1: 18       POP   A                  
0CD2: 60 D3    MOV   REG[0xD3],A        
                                        (0252) 
                                        (0253) ;read normal data in from slave immediately after the address is sent, there is no data to read
                                        (0254) ;but the bus is stalled at byte complete
                                        (0255) 
                                        (0256) ;
                                        (0257) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0258) ;
                                        (0259)     SetI2CHW_SCR 0     ;sets the tx/rx bit to receive, and clocks a byte in
                                        (0260) 
                                        (0261) 
                                        (0262) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0263)     REG_RESTORE IDX_PP
                                        (0264) ENDIF
0CD4: 20       POP   X                  (0265)     pop X
0CD5: 18       POP   A                  (0266)     pop A
0CD6: 7E       RETI                     (0267)     reti
                                        (0268) 
                                        (0269) I2C_ReadSlave:                                             ;this is just a normal read
                                        (0270) 
                                        (0271) 
                                        (0272) ;;code snipped from old SW I2C below
                                        (0273) ;
                                        (0274) ; MASTER READ from SLAVE
                                        (0275) ; (and writing to it's own RAM--Write_Buf and Write_Cnt)
                                        (0276) ;
                                        (0277) ;@PSoC_UserCode_BODY1_V1.2@ (Do not change this line.)
                                        (0278) ;---------------------------------------------------
                                        (0279) ; Insert your custom code below this banner
                                        (0280) ;---------------------------------------------------
                                        (0281) 
                                        (0282) ;********************************************************
                                        (0283) ; By modifying the section from here down to the next comment block
                                        (0284) ; a user could process data for a custom I2C Master Read (write to RAM) application
                                        (0285) ; NOTE: I2C handshakes (ACK/NAK may be effected by any introduced bugs)
                                        (0286) ;********************************************************
0CD7: 47 05 04 TST   [0x5],0x4          (0287)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0CDA: B0 14    JNZ   0x0CEF             (0288)    jnz   InStoreData
                                        (0289)    ;
                                        (0290)    ;process write data here
                                        (0291)    ;
0CDC: 7A 08    DEC   [0x8]              (0292)    dec   [I2CHW_Write_Count]
0CDE: C0 4F    JC    0x0D2E             (0293)    jc    CompleteRDXfer                                              ; carry set if value became -1
                                        (0294)    ;jz    InStoreData                                                                                             ;In theory overflow cant happen but stop the transaction anyway.
0CE0: 3C 08 00 CMP   [0x8],0x0          (0295)    cmp   [I2CHW_Write_Count], 00                                     ;set nak flag, dec count, and store data
0CE3: A0 03    JZ    0x0CE7             (0296)    jz    InNakNextByte
0CE5: 80 06    JMP   0x0CEC             (0297)    jmp   InNotBufEnd
                                        (0298) InNakNextByte:                                                       ;set the nakflag in I2CHW_bStatus
0CE7: 2E 05 04 OR    [0x5],0x4          (0299)    or    [I2CHW_bStatus], fI2C_NAKnextWr
0CEA: 80 04    JMP   0x0CEF             (0300)    jmp   InStoreData
                                        (0301) InNotBufEnd:
0CEC: 26 05 FB AND   [0x5],0xFB         (0302)    and   [I2CHW_bStatus], ~fI2C_NAKnextWr                            ;clear the nak flag in case it was set from a previous operation
                                        (0303) InStoreData:
                                        (0304)    ;This is the ONLY place this bit is set  This bit should never be cleared by the isr ONLY by the API ClrWrStatus()
0CEF: 2E 07 10 OR    [0x7],0x10         (0305)    or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR                          ;set current status
                                        (0306) IF SYSTEM_LARGE_MEMORY_MODEL
0CF2: 51 09    MOV   A,[0x9]            (0307)    mov   A, [pI2CHW_Write_BufHI]
0CF4: 60 D3    MOV   REG[0xD3],A        
                                        (0308) ENDIF
                                        (0309)    RAM_SETPAGE_IDX A
0CF6: 58 0A    MOV   X,[0xA]            (0310)    mov   X, [pI2CHW_Write_BufLO]
0CF8: 5D D8    MOV   A,REG[0xD8]        (0311)    mov   A, reg[I2CHW_DR]
0CFA: 70 3F    AND   F,0x3F             
0CFC: 71 80    OR    F,0x80             
                                        (0312)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0CFE: 54 00    MOV   [X+0],A            (0313)    mov   [X], A
0D00: 70 3F    AND   F,0x3F             
0D02: 71 00    OR    F,0x0              
                                        (0314)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0D04: 76 0A    INC   [0xA]              (0315)    inc   [pI2CHW_Write_BufLO]
                                        (0316) 
0D06: 47 05 04 TST   [0x5],0x4          (0317)    tst   [I2CHW_bStatus], fI2C_NAKnextWr
0D09: B0 0A    JNZ   0x0D14             (0318)    jnz   NAK_this_one
0D0B: 62 D7 10 MOV   REG[0xD7],0x10     
0D0E: 18       POP   A                  
0D0F: 60 D3    MOV   REG[0xD3],A        
                                        (0319) 
                                        (0320) ;********************************************************
                                        (0321) ; End user I2C Buffered WRITE (to RAM) Customization
                                        (0322) ;********************************************************
                                        (0323) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0324) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0325) 
                                        (0326) ;
                                        (0327) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0328) ;
                                        (0329)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0330) 
                                        (0331) 
                                        (0332) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0333)     REG_RESTORE IDX_PP
                                        (0334) ENDIF
0D11: 20       POP   X                  (0335)     pop X
0D12: 18       POP   A                  (0336)     pop A
0D13: 7E       RETI                     (0337)     reti
                                        (0338) 
                                        (0339) NAK_this_one:
                                        (0340) 
0D14: 26 05 FB AND   [0x5],0xFB         (0341)     and  [I2CHW_bStatus], ~fI2C_NAKnextWr
                                        (0342) 
                                        (0343)     ; *****
                                        (0344)     ; here we may need to look at the mode that this was called under
                                        (0345)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0346)     ; ******
0D17: 26 07 F8 AND   [0x7],0xF8         (0347)     and   [I2CHW_RsrcStatus], ~0x07                                  ;clear the read status bits
0D1A: 2E 07 01 OR    [0x7],0x1          (0348)     or    [I2CHW_RsrcStatus], I2CHW_RD_NOERR
0D1D: 2E 07 04 OR    [0x7],0x4          (0349)     or    [I2CHW_RsrcStatus], I2CHW_RD_COMPLETE
                                        (0350) 
0D20: 26 05 03 AND   [0x5],0x3          (0351)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
0D23: A0 0A    JZ    0x0D2E             (0352)     jz      CompleteRDXfer
0D25: 26 07 7F AND   [0x7],0x7F         (0353)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D28: 18       POP   A                  
0D29: 60 D3    MOV   REG[0xD3],A        
                                        (0354) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0355)     REG_RESTORE IDX_PP
                                        (0356) ENDIF
0D2B: 20       POP   X                  (0357)     pop X
0D2C: 18       POP   A                  (0358)     pop A
0D2D: 7E       RETI                     (0359)     reti
0D2E: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0360)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0361)     ;The NAK (not I2C_SNDACK) bit in I2C_SCR below will automatically generate a stop
                                        (0362) 
                                        (0363) CompleteRDXfer:
                                        (0364) 
                                        (0365) ;
                                        (0366) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0367) ;
                                        (0368)     SetI2CHW_SCR 0                                                   ;send Ack
                                        (0369) 
                                        (0370) 
0D31: 26 07 7F AND   [0x7],0x7F         (0371)     and   [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D34: 18       POP   A                  
0D35: 60 D3    MOV   REG[0xD3],A        
                                        (0372) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0373)     REG_RESTORE IDX_PP
                                        (0374) ENDIF
0D37: 20       POP   X                  (0375)     pop X
0D38: 18       POP   A                  (0376)     pop A
0D39: 7E       RETI                     (0377)     reti                                                             ;return and wait for the next interrupt (on data)
0D3A: 62 D7 10 MOV   REG[0xD7],0x10     
0D3D: 18       POP   A                  
0D3E: 60 D3    MOV   REG[0xD3],A        
                                        (0378) 
                                        (0379) AckTheRead:
                                        (0380) 
                                        (0381) ;
                                        (0382) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0383) ;
                                        (0384)     SetI2CHW_SCR I2C_ACKOUT                                          ;send Ack
                                        (0385) 
                                        (0386) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0387)     REG_RESTORE IDX_PP
                                        (0388) ENDIF
0D40: 20       POP   X                  (0389)     pop X
0D41: 18       POP   A                  (0390)     pop A
0D42: 7E       RETI                     (0391)     reti
                                        (0392) 
                                        (0393) 
                                        (0394) I2C_WriteSlave1stByte:
                                        (0395) ;write normal data to slave
0D43: 26 07 BF AND   [0x7],0xBF         (0396)     and [I2CHW_RsrcStatus], ~I2CHW_WR_COMPLETE
0D46: 2E 07 80 OR    [0x7],0x80         (0397)     or [I2CHW_RsrcStatus], I2CHW_ISR_ACTIVE
                                        (0398) 
                                        (0399) 
                                        (0400) I2C_WriteSlave:
                                        (0401) 
0D49: 49 D7 02 TST   REG[0xD7],0x2      (0402)     tst reg[I2CHW_SCR], ( I2C_LST_BIT )                    ;must be a zero or no slave answered
0D4C: B0 4C    JNZ   0x0D99             (0403)     jnz SlaveDataNAK
0D4E: 50 04    MOV   A,0x4              (0404)     mov A, (I2C_TX)
0D50: 08       PUSH  A                  (0405)     push A
                                        (0406) 
                                        (0407) ;
                                        (0408) ;MASTER is WRITING TO SLAVE (& reading data from ram or flash buffer)
                                        (0409) ;
                                        (0410) ;;code snipped from SW I2C below
                                        (0411) 
                                        (0412) I2C_ObtainOutData:
                                        (0413) 
                                        (0414) 
                                        (0415) ;********************************************************
                                        (0416) ; here we need to get the next data to output (master-read)
                                        (0417) ; also set the status byte for use on exit
                                        (0418) ;********************************************************
                                        (0419) IF I2CHW_READ_FLASH
                                        (0420) ;@PSoC_UserCode_BODY2_V1.2@ (Do not change this line.)
                                        (0421) ;---------------------------------------------------
                                        (0422) ; Insert your custom code below this banner
                                        (0423) ; to modify the way a master might read non-volitile data
                                        (0424) ; to send.
                                        (0425) ;---------------------------------------------------
                                        (0426) 
                                        (0427)     tst  [I2CHW_RsrcStatus],I2CHW_READFLASH
                                        (0428)     jz   ReadOutData
                                        (0429) 
                                        (0430)     ;
                                        (0431)     ;get the data
                                        (0432)     ;
                                        (0433)     mov  X, [pI2CHW_Read_BufLO]
                                        (0434)     mov  A, [pI2CHW_Read_BufHI]
                                        (0435)     romx
                                        (0436)     mov  reg[I2CHW_DR],A
                                        (0437)     dec  [I2CHW_Read_Count]                                          ;calc addr lsb
                                        (0438)     jnc  NoDecHighCount
                                        (0439)     dec  [I2CHW_Read_CountHI]
                                        (0440) 
                                        (0441)     jc   MstrWRComplete
                                        (0442) 
                                        (0443) NoDecHighCount:
                                        (0444) 
                                        (0445)     inc  [pI2CHW_Read_BufLO]                                         ;set the next flash address to read
                                        (0446)     jnc  NoIncHiAddr
                                        (0447)     inc  [pI2CHW_Read_BufHI]
                                        (0448) NoIncHiAddr:
                                        (0449)    jmp   I2CNormalOutput
                                        (0450) ;
                                        (0451) ;****** THERE SHOULD BE NO WAY TO REACH THIS STATE WE'LL JUST TERMINATE THE ACTIVITY SINCE WERE THE MASTER
                                        (0452) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0453) ;
                                        (0454) ;FlashRdOverflow:
                                        (0455)     ;deal with the over flow cond by resending last data byte (dec the low addr)
                                        (0456) 
                                        (0457) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0458) ;                                                                      ;set count back to 0
                                        (0459) ;   mov   [I2CHW_Read_CountHI], 0                                    ;functionally the same as incrementing ffff and less instructions
                                        (0460) ;   mov   [I2CHW_Read_Count], 0
                                        (0461) ;   jmp   I2CNormalRead
                                        (0462) 
                                        (0463) ;---------------------------------------------------
                                        (0464) ; Insert your custom code above this banner
                                        (0465) ;---------------------------------------------------
                                        (0466) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0467) 
                                        (0468) ENDIF
                                        (0469) ;@PSoC_UserCode_BODY3@ (Do not change this line.)
                                        (0470) ;---------------------------------------------------
                                        (0471) ; Insert your custom code below this banner
                                        (0472) ; to modify the way a master might read RAM data to send
                                        (0473) ; to an I2C device
                                        (0474) ; By replacing the section from here down to the next block
                                        (0475) ; a user could process data for a custom I2C READ application
                                        (0476) ;---------------------------------------------------
                                        (0477) ReadOutData:
                                        (0478)    ;read the current data byte
                                        (0479) IF SYSTEM_LARGE_MEMORY_MODEL
0D51: 51 0B    MOV   A,[0xB]            (0480)    mov   A, [pI2CHW_Read_BufHI]
0D53: 60 D3    MOV   REG[0xD3],A        
                                        (0481) ENDIF
                                        (0482)    RAM_SETPAGE_IDX A
0D55: 58 0C    MOV   X,[0xC]            (0483)    mov   X, [pI2CHW_Read_BufLO]
0D57: 70 3F    AND   F,0x3F             
0D59: 71 80    OR    F,0x80             
                                        (0484)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0D5B: 52 00    MOV   A,[X+0]            (0485)    mov   A, [X]
0D5D: 70 3F    AND   F,0x3F             
0D5F: 71 00    OR    F,0x0              
                                        (0486)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0D61: 60 D8    MOV   REG[0xD8],A        (0487)    mov   reg[I2CHW_DR], A
0D63: 7A 0D    DEC   [0xD]              (0488)    dec   [I2CHW_Read_Count]
                                        (0489) 
0D65: C0 0E    JC    0x0D74             (0490)    jc    MstrWRComplete
0D67: 76 0C    INC   [0xC]              (0491)    inc   [pI2CHW_Read_BufLO]
0D69: 80 01    JMP   0x0D6B             (0492)    jmp   I2CNormalOutput
                                        (0493) ;
                                        (0494) ;ram read overflow detected here, just resend the last location in the buffer
                                        (0495) ;
                                        (0496) ;********        THERE SHOULD BE NO WAY TO OVERFLOW FOR THIS CASE
                                        (0497) ;********    MAY LEAVE IT IN TO DEAL WITH MULTI MASTER SLAVE CONFIGS THOUGH BUT NOT IN THIS FILE
                                        (0498) ;
                                        (0499) ;RamRDOverflow:
                                        (0500) ;   or    [I2CHW_RsrcStatus], I2CHW_RD_OVERFLOW
                                        (0501) ;   inc   [I2CHW_Read_Count]                                         ; set back to zero
                                        (0502) 
                                        (0503) ;---------------------------------------------------
                                        (0504) ; End user I2C MASTER WRITE TO SLAVE /READ buffer customization section
                                        (0505) ; Insert your custom code above this banner
                                        (0506) ;---------------------------------------------------
                                        (0507) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0508) ;;code snipped form SW I2C to maintain api compatibility above
                                        (0509) I2CNormalOutput:
                                        (0510) 
                                        (0511)     ;load the bits to set in the I2C_ISR from the stack, The proper bit pattern was previously determined
                                        (0512)     ;and place there based on whether or not the previous transmission was our I2C address.
0D6B: 18       POP   A                  (0513)     pop   A
0D6C: 60 D7    MOV   REG[0xD7],A        
0D6E: 18       POP   A                  
0D6F: 60 D3    MOV   REG[0xD3],A        
                                        (0514) 
                                        (0515) ;
                                        (0516) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0517) ;
                                        (0518)     SetI2CHW_SCR A                                                   ;Sets the I2C_TX bit in the I2C_SCR reg.
                                        (0519) 
                                        (0520) 
                                        (0521) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0522)     REG_RESTORE IDX_PP
                                        (0523) ENDIF
0D71: 20       POP   X                  (0524)     pop X
0D72: 18       POP   A                  (0525)     pop A
0D73: 7E       RETI                     (0526)     reti ;return and wait for the next interrupt (on data)
                                        (0527) 
                                        (0528) MstrWRComplete:
0D74: 26 07 8F AND   [0x7],0x8F         (0529)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
0D77: 2E 07 40 OR    [0x7],0x40         (0530)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
0D7A: 2E 07 10 OR    [0x7],0x10         (0531)     or    [I2CHW_RsrcStatus], I2CHW_WR_NOERR
                                        (0532) 
                                        (0533)     ; *****
                                        (0534)     ; here we may need to look at the mode that this was called under
                                        (0535)     ; what does the user want done on the last byte.  Could be a send restart...
                                        (0536)     ; ******
0D7D: 26 05 03 AND   [0x5],0x3          (0537)     and [I2CHW_bStatus], (I2CHW_RepStart | I2CHW_NoStop)
0D80: A0 0B    JZ    0x0D8C             (0538)     jz      CompleteWRXfer
0D82: 18       POP   A                  (0539)     pop  A                                                           ;clear the stack for return
0D83: 26 07 7F AND   [0x7],0x7F         (0540)     and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D86: 18       POP   A                  
0D87: 60 D3    MOV   REG[0xD3],A        
                                        (0541) 
                                        (0542) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0543)     REG_RESTORE IDX_PP
                                        (0544) ENDIF
0D89: 20       POP   X                  (0545)     pop X
0D8A: 18       POP   A                  (0546)     pop A
0D8B: 7E       RETI                     (0547)     reti
                                        (0548)     ;if neither a repeat start or a NoStop, then this must be a CompleteXfer request.
                                        (0549)     ; The release of the I2C_TX bit in I2C_SCR below will automatically generate a stop
                                        (0550) 
                                        (0551) CompleteWRXfer:
                                        (0552) 
0D8C: 18       POP   A                  (0553)     pop   A
0D8D: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0554) 
                                        (0555) ;
                                        (0556) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0557) ;
                                        (0558)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0559) 
0D90: 26 07 7F AND   [0x7],0x7F         (0560)    and  [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0D93: 18       POP   A                  
0D94: 60 D3    MOV   REG[0xD3],A        
                                        (0561) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0562)    REG_RESTORE IDX_PP
                                        (0563) ENDIF
0D96: 20       POP   X                  (0564)    pop X
0D97: 18       POP   A                  (0565)    pop A
0D98: 7E       RETI                     (0566)    reti
                                        (0567) 
                                        (0568) SlaveDataNAK:
                                        (0569) ;must also fix up the data buffer.  While it is marginally safe to nak a byte as a slave and 
                                        (0570) ;store it.  It is NEVER safe as a master to notice that a written byte has been nak'ed by a 
                                        (0571) ;slave and fail to resend it.
                                        (0572) ;this piece of code fixes up the count and buffer that the master is using to get data from
                                        (0573) ;to re-transmit the byte when the next master write is done.
0D99: 76 0D    INC   [0xD]              (0574)     inc  [I2CHW_Read_Count]                          ;calc addr lsb
                                        (0575) IF I2CHW_READ_FLASH
                                        (0576)     jnc  NoIncHighCount
                                        (0577)     inc  [I2CHW_Read_CountHI]
                                        (0578) 
                                        (0579) NoIncHighCount:
                                        (0580) ENDIF
0D9B: 7A 0C    DEC   [0xC]              (0581)     dec  [pI2CHW_Read_BufLO]                         ;set the next flash address to read
                                        (0582) IF SYSTEM_LARGE_MEMORY_MODEL
0D9D: D0 03    JNC   0x0DA1             (0583)     jnc  NoDecHiAddr
0D9F: 7A 0B    DEC   [0xB]              (0584)     dec  [pI2CHW_Read_BufHI]
0DA1: 62 D7 00 MOV   REG[0xD7],0x0      
                                        (0585) NoDecHiAddr:
                                        (0586) ELSE
                                        (0587) IF I2CHW_READ_FLASH
                                        (0588)     jnc  NoDecHiCAddr
                                        (0589)     dec  [pI2CHW_Read_BufHI]
                                        (0590) NoDecHiCAddr:
                                        (0591) ENDIF
                                        (0592) ENDIF
                                        (0593) 
                                        (0594) ;;
                                        (0595) ;; all there is to do here is to return & set status, the slave didn't want any more data
                                        (0596) ;;
                                        (0597) ; no pop needed because the nak is detected before the push happens above
                                        (0598) 
                                        (0599) ;
                                        (0600) ;;  CONTROL MACRO- writes to the SCR register and accounts for clock speed adjustments if necessary
                                        (0601) ;
                                        (0602)     SetI2CHW_SCR 0                                                   ;this will release the bus and generate a stop condition
                                        (0603) 
0DA4: 26 07 7F AND   [0x7],0x7F         (0604)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0DA7: 26 07 8F AND   [0x7],0x8F         (0605)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the write status bits
0DAA: 2E 07 40 OR    [0x7],0x40         (0606)     or    [I2CHW_RsrcStatus], I2CHW_WR_COMPLETE
0DAD: 2E 07 20 OR    [0x7],0x20         (0607)     or    [I2CHW_RsrcStatus], I2CHW_WR_OVERFLOW
0DB0: 18       POP   A                  
0DB1: 60 D3    MOV   REG[0xD3],A        
                                        (0608) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0609)     REG_RESTORE IDX_PP
                                        (0610) ENDIF
0DB3: 20       POP   X                  (0611)     pop X
0DB4: 18       POP   A                  (0612)     pop A
0DB5: 7E       RETI                     (0613)    reti
                                        (0614) 
                                        (0615) STOPTRAP:
                                        (0616)     ;
                                        (0617)     ;   If interrupt on STOP condition is enabled:
                                        (0618)     ;   Add user code to process stop (not recommended becuase I2C bus is NOT stalled and ISR
                                        (0619)     ;   may block reception of ongoing transactions/addresses
                                        (0620)     ;   STOP condition is never detected when a repeat start is used by the master.
                                        (0621)     ;
0DB6: 26 07 7F AND   [0x7],0x7F         (0622)     and [I2CHW_RsrcStatus], ~I2CHW_ISR_ACTIVE
0DB9: 18       POP   A                  
0DBA: 60 D3    MOV   REG[0xD3],A        
                                        (0623) IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0624)     REG_RESTORE IDX_PP
                                        (0625) ENDIF
0DBC: 20       POP   X                  (0626)     pop X
0DBD: 18       POP   A                  (0627)     pop A
0DBE: 7E       RETI                     (0628)     reti
                                        (0629) 
                                        (0630) ; end of file I2CHWINT.asm
FILE: lib\i2chwcommon.asm               (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: I2CHWCommon.asm
                                        (0004) ;;   Version: 2.00, Updated on 2015/3/4 at 22:26:25
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: I2Cs User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "I2CHWCommon.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ; include instance specific register definitions
                                        (0028) ;-----------------------------------------------
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) ;-------------------------------------------------------------------
                                        (0034) ;  Declare the functions global for both assembler and C compiler.
                                        (0035) ;
                                        (0036) ;  Note that there are two names for each API. First name is
                                        (0037) ;  assembler reference. Name with underscore is name refence for
                                        (0038) ;  C compiler.  Calling function in C source code does not require
                                        (0039) ;  the underscore.
                                        (0040) ;-------------------------------------------------------------------
                                        (0041) 
                                        (0042) export    I2CHW_InitWrite
                                        (0043) export   _I2CHW_InitWrite
                                        (0044) export    I2CHW_InitRamRead
                                        (0045) export   _I2CHW_InitRamRead
                                        (0046) export    I2CHW_InitFlashRead
                                        (0047) export   _I2CHW_InitFlashRead
                                        (0048) export    I2CHW_bReadI2CStatus
                                        (0049) export   _I2CHW_bReadI2CStatus
                                        (0050) export    I2CHW_ClrRdStatus
                                        (0051) export   _I2CHW_ClrRdStatus
                                        (0052) export    I2CHW_ClrWrStatus
                                        (0053) export   _I2CHW_ClrWrStatus
                                        (0054) 
                                        (0055) 
                                        (0056) AREA UserModules (ROM, REL)
                                        (0057) 
                                        (0058) 
                                        (0059) .SECTION
                                        (0060) ;-----------------------------------------------------------------------------
                                        (0061) ;  FUNCTION NAME: I2CHW_InitWrite
                                        (0062) ;
                                        (0063) ;  DESCRIPTION:
                                        (0064) ;     Initializes a data buffer pointer for the slave to use to deposit data, and
                                        (0065) ;     zeroes the value of a count byte for the same buffer.
                                        (0066) ;
                                        (0067) ;-----------------------------------------------------------------------------
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  [SP-5]   -- count of bytes to write
                                        (0070) ;              [SP-4]   -- Hi order part of address Wrbuf
                                        (0071) ;              [SP-3]   -- Low order part of the address Wrbuf 
                                        (0072) ;
                                        (0073) ;  RETURNS:  none
                                        (0074) ;
                                        (0075) ;    Write Status bits are cleared
                                        (0076) ;
                                        (0077) ;  SIDE EFFECTS:
                                        (0078) ;    The A and X registers may be modified by this or future implementations
                                        (0079) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0080) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0081) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0082) ;    functions.
                                        (0083) ;          
                                        (0084) ;    Currently only the page pointer registers listed below are modified: 
                                        (0085) ;          CUR_PP
                                        (0086) ;
                                        (0087) ;    Write Status bits are cleared
                                        (0088) ;
                                        (0089) ;  THEORY of OPERATION or PROCEDURE:
                                        (0090) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0091) ;     the accumulator.  X register is the low order pointer.
                                        (0092) ;     IF a one byte buffer is established, set a flag to NAK the first written data byte.
                                        (0093) ;
                                        (0094) 
                                        (0095)  I2CHW_InitWrite:
                                        (0096) _I2CHW_InitWrite:
                                        (0097) 
                                        (0098) WrCnt:   equ -5
                                        (0099) WrBufHi: equ -4
                                        (0100) WrBufLo: equ -3
                                        (0101) 
                                        (0102) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0103)     RAM_PROLOGUE RAM_USE_CLASS_2
0DBF: 10       PUSH  X                  (0104) 	push  X
0DC0: 4F       MOV   X,SP               (0105) 	mov   X, SP
0DC1: 79       DEC   X                  (0106)     dec   X                                                          ;set up the pointer for correct param access
0DC2: 08       PUSH  A                  (0107)     push  A
0DC3: 5D DE    MOV   A,REG[0xDE]        (0108)     mov   A, reg[I2CHW_INT_REG]
0DC5: 08       PUSH  A                  (0109)     push  A                                                           ;preserve flags prior to disabling int
0DC6: 41 DE FE AND   REG[0xDE],0xFE     
0DC9: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0110)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0111) 
                                        (0112)     RAM_SETPAGE_CUR >I2CHW_bStatus						                             ;Set the Page Pointer for LMM
0DCC: 26 05 FB AND   [0x5],0xFB         (0113)     and    [I2CHW_bStatus], ~fI2C_NAKnextWr                          ;reset the nak-next-written-byte flag.
                                        (0114) IF SYSTEM_LARGE_MEMORY_MODEL
0DCF: 52 FC    MOV   A,[X-4]            (0115)     mov   A, [X + WrBufHi]                                           ;move wrbuf addr to A
0DD1: 53 09    MOV   [0x9],A            (0116)     mov   [pI2CHW_Write_BufHI], A
                                        (0117) ENDIF
0DD3: 52 FD    MOV   A,[X-3]            (0118)     mov   A, [X + WrBufLo]                                           ;move wrbuf addr to A
0DD5: 53 0A    MOV   [0xA],A            (0119)     mov   [pI2CHW_Write_BufLO], A
0DD7: 52 FB    MOV   A,[X-5]            (0120)     mov   A, [X + WrCnt]                                               ;move Write_count to A
0DD9: 53 08    MOV   [0x8],A            (0121)     mov   [I2CHW_Write_Count], A
0DDB: 39 01    CMP   A,0x1              (0122)     cmp   A, 01                                                        ;if data buffer is one byte long or less
0DDD: A0 08    JZ    0x0DE6             (0123)     jz    I2CHW_SetNak
0DDF: C0 06    JC    0x0DE6             (0124)     jc    I2CHW_SetNak
0DE1: 26 07 8F AND   [0x7],0x8F         (0125)     and   [I2CHW_RsrcStatus], ~0x70                                  ;clear the 0x10, 0x20 (Write status bits)
0DE4: 80 09    JMP   0x0DEE             (0126)     jmp   I2Cs_1_ResetFlgs
                                        (0127) 
                                        (0128) I2CHW_SetNak:
0DE6: 2E 05 04 OR    [0x5],0x4          (0129)     or    [I2CHW_bStatus], fI2C_NAKnextWr                            ;set the nak-next-written-byte flag.
0DE9: 26 07 8F AND   [0x7],0x8F         (0130)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear the 0x10, 0x20 (Write status bits)
0DEC: 80 01    JMP   0x0DEE             (0131)     jmp   I2Cs_1_ResetFlgs
                                        (0132) 
                                        (0133) I2Cs_1_ResetFlgs:
0DEE: 18       POP   A                  (0134)     pop A
0DEF: 21 01    AND   A,0x1              (0135)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0DF1: A0 04    JZ    0x0DF6             (0136)     jz  . + 5
0DF3: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0137)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0DF6: 18       POP   A                  (0138)     pop A
0DF7: 20       POP   X                  (0139)     pop X
0DF8: 70 3F    AND   F,0x3F             
0DFA: 71 C0    OR    F,0xC0             
                                        (0140) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0141)     RAM_EPILOGUE RAM_USE_CLASS_2
0DFC: 7F       RET                      (0142)     ret
0DFD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0143) 
                                        (0144) .ENDSECTION
                                        (0145) 
                                        (0146) .SECTION
                                        (0147) ;-----------------------------------------------------------------------------
                                        (0148) ;  FUNCTION NAME: I2CHW_InitRamRead
                                        (0149) ;
                                        (0150) ;  DESCRIPTION:
                                        (0151) ;     Initializes a data buffer pointer for the slave to use to retrieve data from,
                                        (0152) ;     and zeroes the value of a count byte for the same buffer.
                                        (0153) ;
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:  [SP-5]  -- count of bytes to read
                                        (0157) ;              [SP-4]  -- Hi order part of addr to ReadBuf
                                        (0158) ;              [SP-3]  -- Low order part of the address to ReadBuf
                                        (0159) ;
                                        (0160) ;  RETURNS: none
                                        (0161) ;
                                        (0162) ;  SIDE EFFECTS:
                                        (0163) ;    The A and X registers may be modified by this or future implementations
                                        (0164) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0165) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0166) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0167) ;    functions.
                                        (0168) ;          
                                        (0169) ;    Currently only the page pointer registers listed below are modified: 
                                        (0170) ;          CUR_PP
                                        (0171) ;
                                        (0172) ;     Read Status bits are cleared
                                        (0173) ;
                                        (0174) ;  THEORY of OPERATION or PROCEDURE:
                                        (0175) ;     The C compiler will always place a 0 (the upper order byte of the address pointer) in
                                        (0176) ;     the accumulator.  X register is the low order pointer.
                                        (0177) ;
                                        (0178) 
                                        (0179)  I2CHW_InitRamRead:
                                        (0180) _I2CHW_InitRamRead:
                                        (0181) 
                                        (0182) RdCnt:     equ   -5
                                        (0183) RdBufHi:   equ   -4
                                        (0184) RdBufLo:   equ   -3
                                        (0185) 
                                        (0186)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0187) 	RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0188) 	RAM_SETPAGE_CUR >I2CHW_Read_Count
0E00: 10       PUSH  X                  (0189)     push  X
0E01: 4F       MOV   X,SP               (0190) 	mov   X, SP
0E02: 79       DEC   X                  (0191)     dec   X                                                          ;set up the pointer for correct param access
0E03: 08       PUSH  A                  (0192)     push  A
0E04: 5D DE    MOV   A,REG[0xDE]        (0193)     mov   A, reg[I2CHW_INT_REG]
0E06: 08       PUSH  A                  (0194)     push  A                                                            ;preserve flags prior to disabling int
0E07: 41 DE FE AND   REG[0xDE],0xFE     
                                        (0195)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0196) 
                                        (0197) IF SYSTEM_LARGE_MEMORY_MODEL
0E0A: 52 FC    MOV   A,[X-4]            (0198)     mov   A, [X + RdBufHi]                                           ;move wrbuf addr to A
0E0C: 53 0B    MOV   [0xB],A            (0199)     mov   [pI2CHW_Read_BufHI], A
                                        (0200) ENDIF
0E0E: 52 FD    MOV   A,[X-3]            (0201)     mov   A, [X + RdBufLo]                                             ; move rdbuf addr to A
0E10: 53 0C    MOV   [0xC],A            (0202)     mov   [pI2CHW_Read_BufLO], A
0E12: 52 FB    MOV   A,[X-5]            (0203)     mov   A, [X + RdCnt]                                               ; move RamRead_count to A
0E14: 53 0D    MOV   [0xD],A            (0204)     mov   [I2CHW_Read_Count], A
0E16: 7A 0D    DEC   [0xD]              (0205)     dec   [I2CHW_Read_Count]                                         ; since we decrement through zero...
0E18: 26 07 F0 AND   [0x7],0xF0         (0206)     and   [I2CHW_RsrcStatus], ~0x0f                                  ; clear the lower 4 (read status bits)
                                        (0207) 
0E1B: 18       POP   A                  (0208)     pop A
0E1C: 21 01    AND   A,0x1              (0209)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
0E1E: A0 04    JZ    0x0E23             (0210)     jz  . + 5
0E20: 43 DE 01 OR    REG[0xDE],0x1      
                                        (0211)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
0E23: 18       POP   A                  (0212)     pop A
0E24: 20       POP   X                  (0213)     pop X
0E25: 70 3F    AND   F,0x3F             
0E27: 71 C0    OR    F,0xC0             
                                        (0214) 
                                        (0215)     RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0216)     RAM_EPILOGUE RAM_USE_CLASS_2
0E29: 7F       RET                      (0217)     ret
                                        (0218) 
                                        (0219) .ENDSECTION
                                        (0220) 
                                        (0221) .SECTION
                                        (0222) ;-----------------------------------------------------------------------------
                                        (0223) ;  FUNCTION NAME: I2CHW_InitFlashRead
                                        (0224) ;
                                        (0225) ;  DESCRIPTION:
                                        (0226) ;     Initializes a flash data buffer pointer for the slave to use to retrieve
                                        (0227) ;     data from, and zeroes the value of a count byte for the same buffer.
                                        (0228) ;
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;
                                        (0231) ;  ARGUMENTS:  [SP-6]   -- Hi order part of flash Read count
                                        (0232) ;              [SP-5]   -- Low order part of flashRead counts
                                        (0233) ;              [SP-4]   -- Hi order part of the flash buf address
                                        (0234) ;              [SP-3]   -- Lo order part of flash buf address
                                        (0235) ;
                                        (0236) ;  RETURNS:
                                        (0237) ;
                                        (0238) ;  SIDE EFFECTS:
                                        (0239) ;    The A and X registers may be modified by this or future implementations
                                        (0240) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0241) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0242) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0243) ;    functions.
                                        (0244) ;          
                                        (0245) ;    Currently only the page pointer registers listed below are modified: 
                                        (0246) ;          CUR_PP
                                        (0247) ;
                                        (0248) ;    Read Status bits are cleared
                                        (0249) ;
                                        (0250) ;  THEORY of OPERATION or PROCEDURE:
                                        (0251) ;     The C compiler will place the upper order address of the buffer in Acc.
                                        (0252) ;     X register is the low order pointer.  A user module parameter is used to conserve code
                                        (0253) ;     if flash buffers are un-needed.  The API call is left defined and capable of returning in
                                        (0254) ;     either case
                                        (0255) ;
                                        (0256)  I2CHW_InitFlashRead:
                                        (0257) _I2CHW_InitFlashRead:
                                        (0258) 
                                        (0259) FlRdCntHI:     equ   -6
                                        (0260) FlRdCntLO:     equ   -5
                                        (0261) FlBufAdrHI:    equ   -4
                                        (0262) FlBufAdrLO:    equ   -3
                                        (0263) 
                                        (0264) IF I2CHW_READ_FLASH
                                        (0265)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0266)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0267)     RAM_SETPAGE_CUR >pI2CHW_Read_BufLO   
                                        (0268) 	push  X
                                        (0269) 	mov   X, SP
                                        (0270)     dec   X                                                            ;set up the pointer for correct param access
                                        (0271)     push  A
                                        (0272)     mov   A, reg[I2CHW_INT_REG]
                                        (0273)     push  A                                                            ;preserve flags prior to disabling int
                                        (0274)     M8C_DisableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0275) 
                                        (0276)     mov   A, [X + FlBufAdrLO]                                          ; move flrdbuf LOaddr to A
                                        (0277)     mov   [pI2CHW_Read_BufLO], A
                                        (0278)     mov   A, [X + FlBufAdrHI]                                          ; move flrdbuf HIaddr to A
                                        (0279)     mov   [pI2CHW_Read_BufHI], A
                                        (0280)     mov   A, [X + FlRdCntLO]                                           ; move flrdbuf LOcount to A
                                        (0281)     mov   [I2CHW_Read_Count], A
                                        (0282)     mov   A, [X + FlRdCntHI]                                           ; move flrdbuf HIcount to A
                                        (0283)     mov   [I2CHW_Read_CountHI], A
                                        (0284) 
                                        (0285)     dec   [I2CHW_Read_Count]                                         ; since this will count throu zero
                                        (0286)     jnc    . + 4                                                       ; only Read_CountHI if Read_Count rolled to 0xff
                                        (0287)     dec   [I2CHW_Read_CountHI]
                                        (0288) 
                                        (0289)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0290)     or    [I2CHW_RsrcStatus],I2CHW_READFLASH                         ; set the flash status bit
                                        (0291) 
                                        (0292)     pop A
                                        (0293)     and A, I2CHW_INT_MASK                                                ; Only enable if it was previously enabled
                                        (0294)     jz  . + 5
                                        (0295)     M8C_EnableIntMask I2CHW_INT_REG, I2CHW_INT_MASK
                                        (0296)     pop A
                                        (0297) 	pop X
                                        (0298)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0299) 	RAM_EPILOGUE RAM_USE_CLASS_4
                                        (0300) ENDIF
0E2A: 7F       RET                      (0301)     ret
0E2B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0302) 
                                        (0303) .ENDSECTION
                                        (0304) 
                                        (0305) .SECTION
                                        (0306) ;-----------------------------------------------------------------------------
                                        (0307) ;  FUNCTION NAME: I2CHW_bReadI2CStatus
                                        (0308) ;
                                        (0309) ;  DESCRIPTION:
                                        (0310) ;     Returns the value in the the RsrcStatus variable.
                                        (0311) ;
                                        (0312) ;-----------------------------------------------------------------------------
                                        (0313) ;
                                        (0314) ;  ARGUMENTS:
                                        (0315) ;
                                        (0316) ;  RETURNS:
                                        (0317) ;     BYTE  bI2CStatus -  status data.  Use the following defined bits
                                        (0318) ;     returned in A.
                                        (0319) ;         I2CHW_RD_NOERR:                   equ 1
                                        (0320) ;         I2CHW_RD_OVERFLOW:                equ 2
                                        (0321) ;         I2CHW_RD_INCOMPLETE:              equ 4
                                        (0322) ;         I2CHW_READFLASH:                  equ 8
                                        (0323) ;         I2CHW_WR_NOERR:                   equ 10h
                                        (0324) ;         I2CHW_WR_OVERFLOW:                equ 20h
                                        (0325) ;         I2CHW_WR_COMPLETE:                equ 40h
                                        (0326) ;         I2CHW_ISR_ACTIVE:                 equ 80h
                                        (0327) ;
                                        (0328) ;  SIDE EFFECTS:
                                        (0329) ;    The A and X registers may be modified by this or future implementations
                                        (0330) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0331) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0332) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0333) ;    functions.
                                        (0334) ;          
                                        (0335) ;    Currently only the page pointer registers listed below are modified: 
                                        (0336) ;          CUR_PP
                                        (0337) ;          
                                        (0338)  I2CHW_bReadI2CStatus:
                                        (0339) _I2CHW_bReadI2CStatus:
                                        (0340)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0341) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0E2E: 51 07    MOV   A,[0x7]            (0342)     mov   A, [I2CHW_RsrcStatus]                                      ;return the status in A
                                        (0343)     RAM_EPILOGUE RAM_USE_CLASS_4
0E30: 7F       RET                      (0344)     ret
0E31: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0345) 
                                        (0346) .ENDSECTION
                                        (0347) 
                                        (0348) .SECTION
                                        (0349) ;-----------------------------------------------------------------------------
                                        (0350) ;  FUNCTION NAME: I2CHW_ClrRdStatus
                                        (0351) ;
                                        (0352) ;  DESCRIPTION:
                                        (0353) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0354) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0355) ;
                                        (0356) ;-----------------------------------------------------------------------------
                                        (0357) ;
                                        (0358) ;  ARGUMENTS: none
                                        (0359) ;
                                        (0360) ;  RETURNS: none
                                        (0361) ;
                                        (0362) ;  SIDE EFFECTS:
                                        (0363) ;    The A and X registers may be modified by this or future implementations
                                        (0364) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0365) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0366) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0367) ;    functions.
                                        (0368) ;          
                                        (0369) ;    Currently only the page pointer registers listed below are modified: 
                                        (0370) ;          CUR_PP
                                        (0371) ;          
                                        (0372)  I2CHW_ClrRdStatus:
                                        (0373) _I2CHW_ClrRdStatus:
                                        (0374)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0375) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0E34: 26 07 F8 AND   [0x7],0xF8         (0376)     and   [I2CHW_RsrcStatus], ~0x07                                  ; clear the lower 3 (read status bits)
                                        (0377)     RAM_EPILOGUE RAM_USE_CLASS_4
0E37: 7F       RET                      (0378)     ret
0E38: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0379) 
                                        (0380) .ENDSECTION
                                        (0381) 
                                        (0382) .SECTION
                                        (0383) ;-----------------------------------------------------------------------------
                                        (0384) ;  FUNCTION NAME: I2CHW_ClrWrStatus
                                        (0385) ;
                                        (0386) ;  DESCRIPTION:
                                        (0387) ;     Clears the Status bits in the Control/Status register, doesn't alter buffer
                                        (0388) ;     addresses or counts, leaves the Flash/Ram Read bit alone too
                                        (0389) ;
                                        (0390) ;-----------------------------------------------------------------------------
                                        (0391) ;
                                        (0392) ;  ARGUMENTS: none
                                        (0393) ;
                                        (0394) ;  RETURNS: none
                                        (0395) ;
                                        (0396) ;  SIDE EFFECTS:
                                        (0397) ;    The A and X registers may be modified by this or future implementations
                                        (0398) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0399) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0400) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0401) ;    functions.
                                        (0402) ;          
                                        (0403) ;    Currently only the page pointer registers listed below are modified: 
                                        (0404) ;          CUR_PP
                                        (0405) ;          
                                        (0406)  I2CHW_ClrWrStatus:
                                        (0407) _I2CHW_ClrWrStatus:
                                        (0408)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0409) 	RAM_SETPAGE_CUR >I2CHW_RsrcStatus
0E3B: 26 07 8F AND   [0x7],0x8F         (0410)     and   [I2CHW_RsrcStatus], ~0x70                                  ; clear bits 10,20 (write status bits)
                                        (0411)     RAM_EPILOGUE RAM_USE_CLASS_4
0E3E: 7F       RET                      (0412)     ret
                                        (0413) 
                                        (0414) .ENDSECTION
                                        (0415) ; End of File I2CHW.asm
FILE: lib\adcint.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   ADCINT.asm
                                        (0004) ;;  Version: 4.00, Updated on 2015/3/4 at 22:21:28
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR Interrupt Service Routines
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "ADC.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export _ADC_CNT_ISR
                                        (0021) export _ADC_PWM16_ISR
                                        (0022) export  ADC_cCounterU
                                        (0023) export _ADC_iResult
                                        (0024) export  ADC_iResult
                                        (0025) export _ADC_bfStatus
                                        (0026) export  ADC_bfStatus
                                        (0027) export  ADC_bSampC
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) AREA InterruptRAM(RAM, REL, CON)
                                        (0033) 
                                        (0034)  ADC_cCounterU:     BLK   1  ;The Upper byte of the Counter
                                        (0035) _ADC_iResult:
                                        (0036)  ADC_iResult:       BLK   2  ;A/D value
                                        (0037) _ADC_bfStatus:
                                        (0038)  ADC_bfStatus:      BLK   1  ;Data Valid Flag
                                        (0039)  ADC_bSampC:        BLK   1  ;# of times to run A/D
                                        (0040) 
                                        (0041) 
                                        (0042) ;-----------------------------------------------
                                        (0043) ;  EQUATES and TABLES
                                        (0044) ;-----------------------------------------------
                                        (0045) LowByte:   equ 1
                                        (0046) HighByte:  equ 0
                                        (0047) 
                                        (0048) 
                                        (0049) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0050) ;---------------------------------------------------
                                        (0051) ; Insert your custom declarations below this banner
                                        (0052) ;---------------------------------------------------
                                        (0053) 
                                        (0054) ;------------------------
                                        (0055) ; Includes
                                        (0056) ;------------------------
                                        (0057) 
                                        (0058) 	
                                        (0059) ;------------------------
                                        (0060) ;  Constant Definitions
                                        (0061) ;------------------------
                                        (0062) 
                                        (0063) 
                                        (0064) ;------------------------
                                        (0065) ; Variable Allocation
                                        (0066) ;------------------------
                                        (0067) 
                                        (0068) 
                                        (0069) ;---------------------------------------------------
                                        (0070) ; Insert your custom declarations above this banner
                                        (0071) ;---------------------------------------------------
                                        (0072) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0073) 
                                        (0074) AREA UserModules (ROM, REL)
                                        (0075) 
                                        (0076) .LITERAL
                                        (0077) ADCMaxNegX4Table:
                                        (0078) ; Bits  7    8    9   10   11   12   13
                                        (0079)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0080) 
                                        (0081) ADCMaxPosX4Table:
                                        (0082) IF (ADC_DATA_FORMAT)
                                        (0083) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0084)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0085) ELSE
                                        (0086) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0087)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0088) 
                                        (0089)  ENDIF
                                        (0090) .ENDLITERAL
                                        (0091) 
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;  FUNCTION NAME: _ADC_CNT_ISR (Counter8 Interrupt)
                                        (0094) ;
                                        (0095) ;
                                        (0096) ;  DESCRIPTION:
                                        (0097) ;     Increment the upper (software) half on the counter whenever the
                                        (0098) ;     lower (hardware) half of the counter underflows.  This counter
                                        (0099) ;     should start out at the most negative value (0xFF).
                                        (0100) ;
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;
                                        (0103) _ADC_CNT_ISR:
0E4D: 76 0E    INC   [0xE]              (0104)    inc [ADC_cCounterU]
                                        (0105)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0106)    ;---------------------------------------------------
                                        (0107)    ; Insert your custom assembly code below this banner
                                        (0108)    ;---------------------------------------------------
                                        (0109)    ;   NOTE: interrupt service routines must preserve
                                        (0110)    ;   the values of the A and X CPU registers.
                                        (0111)    
                                        (0112)    ;---------------------------------------------------
                                        (0113)    ; Insert your custom assembly code above this banner
                                        (0114)    ;---------------------------------------------------
                                        (0115)    
                                        (0116)    ;---------------------------------------------------
                                        (0117)    ; Insert a lcall to a C function below this banner
                                        (0118)    ; and un-comment the lines between these banners
                                        (0119)    ;---------------------------------------------------
                                        (0120)    
                                        (0121)    ;PRESERVE_CPU_CONTEXT
                                        (0122)    ;lcall _My_C_Function
                                        (0123)    ;RESTORE_CPU_CONTEXT
                                        (0124)    
                                        (0125)    ;---------------------------------------------------
                                        (0126)    ; Insert a lcall to a C function above this banner
                                        (0127)    ; and un-comment the lines between these banners
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ;@PSoC_UserCode_END@ (Do not change this line.)
0E4F: 7E       RETI                     (0130)    reti
                                        (0131) 
                                        (0132) 
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;  FUNCTION NAME: _ADC_PWM16_ISR  (PWM16 Interrupt)
                                        (0135) ;
                                        (0136) ;  DESCRIPTION:
                                        (0137) ;     This ISR is called when the ADC has completed and integrate cycle.
                                        (0138) ;     The ADC value is calculated and stored in a global location before
                                        (0139) ;     the end of the ISR.
                                        (0140) ;
                                        (0141) ;-----------------------------------------------------------------------------
                                        (0142) ;
                                        (0143) _ADC_PWM16_ISR:
0E50: 41 23 FE AND   REG[0x23],0xFE     (0144)    and   reg[ADC_bCounter_CR0], ~ADC_fDBLK_ENABLE          ; Disable Counter
                                        (0145) IF ADC_NoAZ
0E53: 43 82 20 OR    REG[0x82],0x20     (0146)    or    reg[ADC_bfAtoDcr2], ADC_fAutoZero                 ; Put Integrator in AutoZero
                                        (0147) ENDIF
0E56: 43 83 10 OR    REG[0x83],0x10     (0148)    or   reg[ADC_bfAtoDcr3],ADC_fFSW0                       ; Put Integrator in reset
0E59: 71 01    OR    F,0x1              
                                        (0149) 
                                        (0150)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0151)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0152)    M8C_EnableGInt
0E5B: 40       NOP                      (0153)    nop                                                     ; Wait a couple cycles
0E5C: 70 FE    AND   F,0xFE             
                                        (0154)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0E5E: 08       PUSH  A                  (0155)    push  A                                                 ; Save the Accumulator
0E5F: 5D 20    MOV   A,REG[0x20]        (0156)    mov   A,reg[ADC_bCount]                                 ; Read counter value  (Bogus read puts value in Period register)
0E61: 5D 22    MOV   A,REG[0x22]        (0157)    mov   A,reg[ADC_bCompare]                               ; Read counter value
0E63: 78       DEC   A                  (0158)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
0E64: 73       CPL   A                  (0159)    cpl   A                                                 ; Invert the value
0E65: D0 03    JNC   0x0E69             (0160)    jnc   ADC_INT_CALCV                                     ; if carry, then inc MSB as well
0E67: 76 0E    INC   [0xE]              (0161)    inc   [ADC_cCounterU]
                                        (0162) ADC_INT_CALCV:
0E69: 53 10    MOV   [0x10],A           (0163)    mov   [(ADC_iResult + LowByte)], A                      ; Store LSB value
0E6B: 51 0E    MOV   A,[0xE]            (0164)    mov   A, [ADC_cCounterU]                                ; Store MSB from temp counter
0E6D: 53 0F    MOV   [0xF],A            (0165)    mov   [(ADC_iResult + HighByte)], A
                                        (0166)                                                            ; The new value has been stored,
                                        (0167)                                                            ; so get counters ready for next reading first.
0E6F: 62 21 FF MOV   REG[0x21],0xFF     (0168)    mov   reg[ADC_bPeriod], ffh                             ; Initialize counter to FF - Set to overflow after 256 counts
0E72: 43 23 01 OR    REG[0x23],0x1      (0169)    or    reg[ADC_bCounter_CR0],ADC_fDBLK_ENABLE            ; Enable Counter
                                        (0170) 
                                        (0171) IF (ADC_DATA_FORMAT)                                       ; Only check for Negative numbers if SIGNED result
                                        (0172)    mov   A, [ADC_bfStatus]                                 ; Get Status with Resolution
                                        (0173)    and   A, ADC_bRES_MASK                                  ; Mask of resolution
                                        (0174)    index ADCMaxNegX4Table                                  ; Get Maximum negative value from table
                                        (0175)    mov   [ADC_cCounterU], A                                ; Place result back into MSB of counter
                                        (0176) ELSE
0E75: 55 0E 00 MOV   [0xE],0x0          (0177)    mov   [ADC_cCounterU], 00h                              ; Place result back into MSB of counter
                                        (0178) ENDIF
                                        (0179) 
                                        (0180)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0181)    ;---------------------------------------------------
                                        (0182)    ; If the input is muxed with multiple inputs
                                        (0183)    ; this is a good place to change inputs.
                                        (0184)    ; Insert your custom code below this banner
                                        (0185)    ;---------------------------------------------------
                                        (0186)    ;   NOTE: interrupt service routines must preserve
                                        (0187)    ;   the values of the A and X CPU registers. At this
                                        (0188)    ;   point A is already preserved and will be restored;
                                        (0189)    ;   however, if you use X, you must take care of it
                                        (0190)    ;   here!
                                        (0191) 
                                        (0192)    ;---------------------------------------------------
                                        (0193)    ; Insert your custom code above this banner
                                        (0194)    ;---------------------------------------------------
                                        (0195)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0196) 
0E78: 41 83 EF AND   REG[0x83],0xEF     (0197)    and   reg[ADC_bfAtoDcr3],~ADC_fFSW0                     ; Take Integrator out of reset
                                        (0198) IF ADC_NoAZ
0E7B: 41 82 DF AND   REG[0x82],0xDF     (0199)    and   reg[ADC_bfAtoDcr2],~ADC_fAutoZero                 ; Take Integrator out of AutoZero
                                        (0200) ENDIF
                                        (0201) 
                                        (0202)    ;****************************************************************************
                                        (0203)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0204)    ;                          ; if stack space isn't at a premium.
                                        (0205)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0206)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0207)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0208)    ;        successful acquisition of the next byte.
                                        (0209)    ;****************************************************************************
                                        (0210) IF (ADC_DATA_FORMAT)                             ; Only check for Negative numbers if SIGNED result
                                        (0211) 
                                        (0212)                                                  ; Negative Overflow Check
                                        (0213)    tst   [(ADC_iResult + HighByte)],80h
                                        (0214)    jnz   ADC_NOT_POVFL2
                                        (0215) 
                                        (0216) ENDIF
                                        (0217)                                                  ; Postive Overflow Check
                                        (0218)                                                  ; Get MSB of Max Positive value x4 + 1
0E7E: 51 11    MOV   A,[0x11]           (0219)    mov   A,[ADC_bfStatus]                        ; Get Status with Resolution
0E80: 21 0F    AND   A,0xF              (0220)    and   A,ADC_bRES_MASK                         ; Mask of resolution normalized to 0
0E82: FF C2    INDEX 0x0E46             (0221)    index ADCMaxPosX4Table                        ; Get Maximum positive value x4 + 1 from table
0E84: 08       PUSH  A                  (0222)    push  A
0E85: 22 0F    AND   A,[0xF]            (0223)    and   A, [(ADC_iResult + HighByte)]
0E87: A0 0B    JZ    0x0E93             (0224)    jz    ADC_NOT_POVFL
                                        (0225)                                                  ; Positive overflow, fix it - set to Max Positive + 1
0E89: 18       POP   A                  (0226)    pop   A
0E8A: 11 01    SUB   A,0x1              (0227)    sub   A, 01h
                                        (0228) 
                                        (0229)                                                  ; Force most positive * 4 into result
0E8C: 53 0F    MOV   [0xF],A            (0230)    mov   [(ADC_iResult + HighByte)], A
0E8E: 55 10 FF MOV   [0x10],0xFF        (0231)    mov   [(ADC_iResult + LowByte)], ffh
0E91: 80 02    JMP   0x0E94             (0232)    jmp   ADC_NOT_POVFL2
                                        (0233) ADC_NOT_POVFL:
0E93: 18       POP   A                  (0234)    pop   A
                                        (0235) 
                                        (0236) ADC_NOT_POVFL2:
0E94: 68 0F    ASR   [0xF]              (0237)    asr   [(ADC_iResult + HighByte)]              ; Shift MSB and LSB right twice to divide by four
0E96: 6E 10    RRC   [0x10]             (0238)    rrc   [(ADC_iResult + LowByte)]               ; Remember digital clock 4 times analog clock
0E98: 68 0F    ASR   [0xF]              (0239)    asr   [(ADC_iResult + HighByte)]
0E9A: 6E 10    RRC   [0x10]             (0240)    rrc   [(ADC_iResult + LowByte)]
                                        (0241) 
                                        (0242)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0243)    ;---------------------------------------------------
                                        (0244)    ; Data is ready at this point.
                                        (0245)    ; If processing Data at Interrupt level - add
                                        (0246)    ; User Code to handle the data below this banner
                                        (0247)    ;---------------------------------------------------
                                        (0248)    ;   NOTE: interrupt service routines must preserve
                                        (0249)    ;   the values of the A and X CPU registers. At this
                                        (0250)    ;   point A is already preserved and will be restored;
                                        (0251)    ;   however, if you use X, you must take care of it
                                        (0252)    ;   here!
                                        (0253) 
                                        (0254)    ;---------------------------------------------------
                                        (0255)    ; Insert your custom code above this banner
                                        (0256)    ;---------------------------------------------------
                                        (0257)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0258) 
0E9C: 18       POP   A                  (0259)    pop   A                                       ; Restore A, not used any more
                                        (0260) 
0E9D: 2E 11 10 OR    [0x11],0x10        (0261)    or    [ADC_bfStatus],ADC_fDATA_READY          ; Set Data ready bit
                                        (0262) 
0EA0: 47 12 FF TST   [0x12],0xFF        (0263)    tst   [ADC_bSampC], ffh                       ; If sample_counter == 0 -->> continuous data collection
0EA3: A0 17    JZ    0x0EBB             (0264)    jz    ADC_END_PWM16_ISR
                                        (0265) 
0EA5: 7A 12    DEC   [0x12]             (0266)    dec   [ADC_bSampC]                            ; Dec sample counter and check for zero
0EA7: B0 13    JNZ   0x0EBB             (0267)    jnz   ADC_END_PWM16_ISR
                                        (0268) 
                                        (0269)    ;**********************************************
                                        (0270)    ; Turn off ADC
                                        (0271)    ;**********************************************
0EA9: 41 27 FE AND   REG[0x27],0xFE     (0272)    and   reg[ADC_fPWM_LSB_CR0], ~ADC_fDBLK_ENABLE              ; Disable the PWM
0EAC: 41 23 FE AND   REG[0x23],0xFE     (0273)    and   reg[ADC_bCounter_CR0], ~ADC_fDBLK_ENABLE              ; Disable the Counter
                                        (0274) IF ADC_NoAZ
0EAF: 43 82 20 OR    REG[0x82],0x20     (0275)    or    reg[ADC_bfAtoDcr2], ADC_fAutoZero                     ; Put the Integrator into Autozero mode
                                        (0276) ENDIF
0EB2: 43 83 10 OR    REG[0x83],0x10     (0277)    or    reg[ADC_bfAtoDcr3], ADC_fFSW0                         ; Put Integrator into reset
0EB5: 41 E1 FB AND   REG[0xE1],0xFB     (0278)    and   reg[ADC_bfPWM16_INT_REG], ~ADC_bfPWM16_Mask           ; Disable interrupts
0EB8: 41 E1 FE AND   REG[0xE1],0xFE     (0279)    and   reg[ADC_bfCounter_INT_REG], ~ADC_bfCounter_Mask
                                        (0280) 
                                        (0281) ADC_END_PWM16_ISR:
0EBB: 7E       RETI                     (0282)    reti
                                        (0283) 
                                        (0284) ; End of File ADCINT.asm
FILE: lib\adc.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0EBC: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  ADC.asm
                                        (0004) ;;  Version: 4.00, Updated on 2015/3/4 at 22:21:28
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "ADC.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ADC_Start
                                        (0030) export _ADC_Start
                                        (0031) export  ADC_SetPower
                                        (0032) export _ADC_SetPower
                                        (0033) export  ADC_Stop
                                        (0034) export _ADC_Stop
                                        (0035) export  ADC_GetSamples
                                        (0036) export _ADC_GetSamples
                                        (0037) export  ADC_StopAD
                                        (0038) export _ADC_StopAD
                                        (0039) export  ADC_fIsData
                                        (0040) export _ADC_fIsData
                                        (0041) export  ADC_fIsDataAvailable
                                        (0042) export _ADC_fIsDataAvailable
                                        (0043) export  ADC_iGetData
                                        (0044) export _ADC_iGetData
                                        (0045) export  ADC_ClearFlag
                                        (0046) export _ADC_ClearFlag
                                        (0047) export  ADC_iGetDataClearFlag
                                        (0048) export _ADC_iGetDataClearFlag
                                        (0049) export  ADC_SetResolution
                                        (0050) export _ADC_SetResolution
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) LowByte:       equ 1
                                        (0056) HighByte:      equ 0
                                        (0057) 
                                        (0058) ; Calctime parameters
                                        (0059) wCalcTime:     equ   ADC_bCALCTIME
                                        (0060) 
                                        (0061) AREA UserModules (ROM, REL)
                                        (0062) 
                                        (0063) .SECTION
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;  FUNCTION NAME: ADC_Start
                                        (0066) ;  FUNCTION NAME: ADC_SetPower
                                        (0067) ;
                                        (0068) ;  DESCRIPTION:
                                        (0069) ;  Applies power setting to the module's analog PSoc block.
                                        (0070) ;
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;
                                        (0073) ;  ARGUMENTS:
                                        (0074) ;   A  Contains power level setting 0 to 3
                                        (0075) ;
                                        (0076) ;  RETURNS:  NA
                                        (0077) ;
                                        (0078) ;  SIDE EFFECTS:
                                        (0079) ;    The A and X registers may be modified by this or future implementations
                                        (0080) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0082) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0083) ;    functions.
                                        (0084) ;          
                                        (0085) ;    Currently only the page pointer registers listed below are modified:
                                        (0086) ;          CUR_PP
                                        (0087) ;
                                        (0088)  ADC_Start:
                                        (0089) _ADC_Start:
                                        (0090)  ADC_SetPower:
                                        (0091) _ADC_SetPower:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0094)    RAM_SETPAGE_CUR >ADC_bfStatus
                                        (0095)    
0EBF: 4F       MOV   X,SP               (0096)    mov   X, SP                                       ; Get location of next location on stack
0EC0: 21 03    AND   A,0x3              (0097)    and   A,ADC_bfPOWERMASK                           ; Mask only the valid power setting bits
0EC2: 08       PUSH  A                  (0098)    push  A                                           ; Save power value on temp location
0EC3: 5D 83    MOV   A,REG[0x83]        (0099)    mov   A, reg[ADC_bfAtoDcr3]                       ; Get current value of AtoDcr3
0EC5: 21 FC    AND   A,0xFC             (0100)    and   A, ~ADC_bfPOWERMASK                         ; Mask off old power value
0EC7: 2B 00    OR    A,[X+0]            (0101)    or    A, [X]                                      ; OR in new power value
0EC9: 29 F0    OR    A,0xF0             (0102)    or    A, f0h                                      ; Make sure other register is set correctly
0ECB: 60 83    MOV   REG[0x83],A        (0103)    mov   reg[ADC_bfAtoDcr3], A                       ; Reload CR with new power value
                                        (0104) 
0ECD: 49 82 01 TST   REG[0x82],0x1      (0105)    tst   reg[ADC_bfAtoDcr2], ADC_fRES_SET
0ED0: A0 05    JZ    0x0ED6             (0106)    jz    .DoNotLoadRes
0ED2: 50 05    MOV   A,0x5              (0107)    mov   A,ADC_bNUMBITS - ADC_bMINRES                           ; get and set the resolution
0ED4: 53 11    MOV   [0x11],A           (0108)    mov   [ADC_bfStatus], A              ; place it in the status variable
                                        (0109) .DoNotLoadRes:
0ED6: 18       POP   A                  (0110)    pop   A                                           ; Restore the stack and power value
0ED7: 70 3F    AND   F,0x3F             
0ED9: 71 C0    OR    F,0xC0             
                                        (0111)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_4
0EDB: 7F       RET                      (0113)    ret
                                        (0114) .ENDSECTION
                                        (0115) 
                                        (0116) .SECTION
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;  FUNCTION NAME: ADC_Stop
                                        (0119) ;
                                        (0120) ;  DESCRIPTION:
                                        (0121) ;  Removes power from the module's analog PSoc block, but the digital
                                        (0122) ;  blocks keep on running.
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: None
                                        (0127) ;
                                        (0128) ;  RETURNS:   NA
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  ADC_Stop:
                                        (0138) _ADC_Stop:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
0EDC: 41 83 FC AND   REG[0x83],0xFC     (0140)    and   reg[ADC_bfAtoDcr3], ~ADC_bfPOWERMASK
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0EDF: 7F       RET                      (0142)    ret
0EE0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0143) .ENDSECTION
                                        (0144) 
                                        (0145) .SECTION
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;  FUNCTION NAME: ADC_Get_Samples
                                        (0148) ;
                                        (0149) ;  DESCRIPTION:
                                        (0150) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0151) ;  is set whenever a new data value is available.
                                        (0152) ;
                                        (0153) ;-----------------------------------------------------------------------------
                                        (0154) ;
                                        (0155) ;  ARGUMENTS:
                                        (0156) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0157) ;     continuously.
                                        (0158) ;
                                        (0159) ;  RETURNS:  NA
                                        (0160) ;
                                        (0161) ;  SIDE EFFECTS:
                                        (0162) ;    The A and X registers may be modified by this or future implementations
                                        (0163) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0164) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0165) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0166) ;    functions.
                                        (0167) ;          
                                        (0168) ;    Currently only the page pointer registers listed below are modified:
                                        (0169) ;          CUR_PP
                                        (0170) ;
                                        (0171)  ADC_GetSamples:
                                        (0172) _ADC_GetSamples:
                                        (0173)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0174)    RAM_SETPAGE_CUR >ADC_bfStatus
0EE3: 53 12    MOV   [0x12],A           (0175)    mov   [ADC_bSampC], A                                   ; Store sample count
                                        (0176)                                                            ; Interrupts, Put A/D in reset
0EE5: 51 11    MOV   A,[0x11]           (0177)    mov   A,[ADC_bfStatus]                                  ; get and set the resolution
0EE7: 21 0F    AND   A,0xF              (0178)    and   A,ADC_bRES_MASK
0EE9: 01 07    ADD   A,0x7              (0179)    add   A,ADC_bMINRES
0EEB: 90 5B    CALL  _ADC_SetResolution (0180)    call  ADC_SetResolution
                                        (0181) 
                                        (0182) ADC_LoadMSBCounter:                                        ; The PWM has been setup by SetResolution, now set the upper
                                        (0183)                                                            ; counter which will be the same as the period.
                                        (0184)                                                            ; Reset MSB of counter to most negative value
                                        (0185) 
0EED: 5D 2A    MOV   A,REG[0x2A]        (0186)    mov   A,reg[ADC_bPWM_IntTime_MSB]                       ; Get MSB of PWM and move it into RAM
0EEF: 53 0E    MOV   [0xE],A            (0187)    mov   [ADC_cCounterU], A                                ; Use counter as temp location
0EF1: 50 00    MOV   A,0x0              (0188)    mov   A, 00h                                            ; Load A with zero for the calculation
0EF3: 12 0E    SUB   A,[0xE]            (0189)    sub   A, [ADC_cCounterU]                                ; 0 - MSB_PWM = MSB_of_most_neg_value
0EF5: 67       ASR   A                  (0190)    asr   A                                                 ; Half the range (+ and -)
                                        (0191) IF (ADC_DATA_FORMAT)
                                        (0192)    mov   [ADC_cCounterU], A                                ; Place result back into MSB of counter
                                        (0193) ELSE
0EF6: 55 0E 00 MOV   [0xE],0x0          (0194)    mov   [ADC_cCounterU], 00h                              ; Always start at zero for unsigned values
                                        (0195) ENDIF
0EF9: 5D 26    MOV   A,REG[0x26]        (0196)    mov   A, reg[ADC_bPWM_IntTime_LSB]                      ; Dummy Read  - required do not remove
0EFB: 62 21 FF MOV   REG[0x21],0xFF     (0197)    mov   reg[ADC_bPeriod], FFh                             ; Make sure counter starts at FF
                                        (0198) 
0EFE: 41 83 EF AND   REG[0x83],0xEF     (0199)    and   reg[ADC_bfAtoDcr3],~ADC_fFSW0                     ; Take Integrator out of reset
                                        (0200) IF ADC_NoAZ
0F01: 41 82 DF AND   REG[0x82],0xDF     (0201)     and  reg[ADC_bfAtoDcr2],~ADC_fAutoZero                 ; Take Integrator out of AutoZero
                                        (0202) ENDIF
                                        (0203) 
                                        (0204)                                                                ; Enable the A/D and Start it!
0F04: 43 23 05 OR    REG[0x23],0x5      (0205)    or    reg[ADC_bCounter_CR0], (ADC_fDBLK_ENABLE|ADC_fPULSE_WIDE)   ; Enable the Counter
0F07: 43 27 01 OR    REG[0x27],0x1      (0206)    or    reg[ADC_fPWM_LSB_CR0], ADC_fDBLK_ENABLE               ; Enable PWM
0F0A: 43 E1 04 OR    REG[0xE1],0x4      (0207)    or    reg[ADC_bfPWM16_INT_REG], ADC_bfPWM16_Mask            ; Enable Counter interrupts
0F0D: 43 E1 01 OR    REG[0xE1],0x1      (0208)    or    reg[ADC_bfCounter_INT_REG], ADC_bfCounter_Mask
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_4
0F10: 7F       RET                      (0210)    ret
                                        (0211) .ENDSECTION
                                        (0212) 
                                        (0213) .SECTION
                                        (0214) ;-----------------------------------------------------------------------------
                                        (0215) ;  FUNCTION NAME: ADC_StopAD
                                        (0216) ;
                                        (0217) ;  DESCRIPTION:
                                        (0218) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0219) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0220) ;
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:  None
                                        (0224) ;
                                        (0225) ;  RETURNS: NA
                                        (0226) ;
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  ADC_StopAD:
                                        (0235) _ADC_StopAD:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0F11: 41 27 FE AND   REG[0x27],0xFE     (0237)    and   reg[ADC_fPWM_LSB_CR0], ~ADC_fDBLK_ENABLE              ; Disable the PWM
                                        (0238) 
0F14: 41 23 FE AND   REG[0x23],0xFE     (0239)    and   reg[ADC_bCounter_CR0], ~ADC_fDBLK_ENABLE              ; Disable the Counter
                                        (0240) 
                                        (0241) IF ADC_NoAZ
0F17: 43 82 20 OR    REG[0x82],0x20     (0242)    or   reg[ADC_bfAtoDcr2], ADC_fAutoZero                      ; Put the Integrator into Autozero mode
                                        (0243) ENDIF
                                        (0244) 
0F1A: 43 83 10 OR    REG[0x83],0x10     (0245)    or   reg[ADC_bfAtoDcr3], ADC_fFSW0                          ; Put Integrator into reset
0F1D: 08       PUSH  A                  (0246)    push A
0F1E: 41 E1 FB AND   REG[0xE1],0xFB     
0F21: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0247)    M8C_DisableIntMask ADC_bfPWM16_INT_REG, ADC_bfPWM16_Mask    ; Disable interrupts
                                        (0248)    M8C_DisableIntMask ADC_bfCounter_INT_REG, ADC_bfCounter_Mask
0F24: 18       POP   A                  (0249)    pop  A
                                        (0250)    RAM_EPILOGUE RAM_USE_CLASS_1
0F25: 7F       RET                      (0251)    ret
0F26: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0252) .ENDSECTION
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: ADC_fIsData
                                        (0257) ;  FUNCTION NAME: ADC_fIsDataAvailable
                                        (0258) ;
                                        (0259) ;  DESCRIPTION:
                                        (0260) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0261) ;  value is available.
                                        (0262) ;
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;
                                        (0265) ;  ARGUMENTS: None
                                        (0266) ;
                                        (0267) ;  RETURNS:
                                        (0268) ;  A  Returns data status  A == 0 no data available
                                        (0269) ;                          A != 0 data available
                                        (0270) ;
                                        (0271) ;  SIDE EFFECTS:
                                        (0272) ;    The A and X registers may be modified by this or future implementations
                                        (0273) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0274) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0275) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0276) ;    functions.
                                        (0277) ;          
                                        (0278) ;    Currently only the page pointer registers listed below are modified: 
                                        (0279) ;          CUR_PP
                                        (0280) ;
                                        (0281)  ADC_fIsData:
                                        (0282) _ADC_fIsData:
                                        (0283)  ADC_fIsDataAvailable:
                                        (0284) _ADC_fIsDataAvailable:
                                        (0285)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0286)    RAM_SETPAGE_CUR >ADC_bfStatus
0F29: 51 11    MOV   A,[0x11]           (0287)    mov   A, [ADC_bfStatus]                            ; Get status byte
0F2B: 21 10    AND   A,0x10             (0288)    and   A, ADC_fDATA_READY                           ; Mask off other bits
                                        (0289)    RAM_EPILOGUE RAM_USE_CLASS_4
0F2D: 7F       RET                      (0290)    ret
0F2E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0291) .ENDSECTION
                                        (0292) 
                                        (0293) .SECTION
                                        (0294) ;-----------------------------------------------------------------------------
                                        (0295) ;  FUNCTION NAME: ADC_iGetDataClearFlag
                                        (0296) ;  FUNCTION NAME: ADC_iGetData
                                        (0297) ;
                                        (0298) ;  DESCRIPTION:
                                        (0299) ;  Returns the data from the A/D.  Does not check if data is available.
                                        (0300) ;  iGetDataClearFlag clears the result ready flag as well.
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: None
                                        (0305) ;
                                        (0306) ;  RETURNS:
                                        (0307) ;  A:X  return the ADC result.
                                        (0308) ;
                                        (0309) ;  SIDE EFFECTS:
                                        (0310) ;    The A and X registers may be modified by this or future implementations
                                        (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0314) ;    functions.
                                        (0315) ;          
                                        (0316) ;    Currently only the page pointer registers listed below are modified: 
                                        (0317) ;          CUR_PP
                                        (0318) ;
                                        (0319)  ADC_iGetDataClearFlag:
                                        (0320) _ADC_iGetDataClearFlag:   
                                        (0321)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0322)    RAM_SETPAGE_CUR >ADC_bfStatus
0F31: 26 11 EF AND   [0x11],0xEF        (0323)    and   [ADC_bfStatus], ~ADC_fDATA_READY  ; Clear Data ready bit
0F34: 58 0F    MOV   X,[0xF]            (0324)    mov   X, [(ADC_iResult + HighByte)]
0F36: 51 10    MOV   A,[0x10]           (0325)    mov   A, [(ADC_iResult + LowByte)]
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_4
0F38: 7F       RET                      (0327)    ret
0F39: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0328) 
                                        (0329) 
                                        (0330)  ADC_iGetData:
                                        (0331) _ADC_iGetData:
                                        (0332)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0333)    RAM_SETPAGE_CUR >ADC_iResult
0F3C: 58 0F    MOV   X,[0xF]            (0334)    mov   X, [(ADC_iResult + HighByte)]
0F3E: 51 10    MOV   A,[0x10]           (0335)    mov   A, [(ADC_iResult + LowByte)]
                                        (0336)    RAM_EPILOGUE RAM_USE_CLASS_4
0F40: 7F       RET                      (0337)    ret
0F41: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0338) .ENDSECTION
                                        (0339) 
                                        (0340) .SECTION
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) ;  FUNCTION NAME: ADC_ClearFlag
                                        (0343) ;
                                        (0344) ;  DESCRIPTION:
                                        (0345) ;  Clears the data ready flag.
                                        (0346) ;
                                        (0347) ;-----------------------------------------------------------------------------
                                        (0348) ;
                                        (0349) ;  ARGUMENTS: None
                                        (0350) ;
                                        (0351) ;  RETURNS: NA
                                        (0352) ;
                                        (0353) ;  SIDE EFFECTS:
                                        (0354) ;    The A and X registers may be modified by this or future implementations
                                        (0355) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0356) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0357) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0358) ;    functions.
                                        (0359) ;          
                                        (0360) ;    Currently only the page pointer registers listed below are modified: 
                                        (0361) ;          CUR_PP
                                        (0362) ;
                                        (0363)  ADC_ClearFlag:
                                        (0364) _ADC_ClearFlag:
                                        (0365)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0366)    RAM_SETPAGE_CUR >ADC_bfStatus
0F44: 26 11 EF AND   [0x11],0xEF        (0367)    and   [ADC_bfStatus], ~ADC_fDATA_READY  ; Clear Data ready bit
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
0F47: 7F       RET                      (0369)    ret
0F48: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: ADC_SetResolution
                                        (0375) ;
                                        (0376) ;  DESCRIPTION:
                                        (0377) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0378) ;
                                        (0379) ;-----------------------------------------------------------------------------
                                        (0380) ;
                                        (0381) ;  ARGUMENTS:
                                        (0382) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0383) ;
                                        (0384) ;  RETURNS:  NA
                                        (0385) ;
                                        (0386) ;  SIDE EFFECTS:
                                        (0387) ;    The A and X registers may be modified by this or future implementations
                                        (0388) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0389) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0390) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0391) ;    functions.
                                        (0392) ;          
                                        (0393) ;    Currently only the page pointer registers listed below are modified: 
                                        (0394) ;          CUR_PP
                                        (0395) ;
                                        (0396) ;     This function halts the PWM and the counter to sync the A/D , but
                                        (0397) ;     does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0398) ;     should be called.
                                        (0399) ;
                                        (0400)  ADC_SetResolution:
                                        (0401) _ADC_SetResolution:
                                        (0402)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0403)    RAM_SETPAGE_CUR >ADC_bfStatus
                                        (0404)    
0F4B: 41 82 FE AND   REG[0x82],0xFE     (0405)    and   reg[ADC_bfAtoDcr2], ~ADC_fRES_SET
                                        (0406) 
0F4E: 9F C1    CALL  _ADC_StopAD        (0407)    call  ADC_StopAD                                ; Stop the A/D if it is running
0F50: 55 11 00 MOV   [0x11],0x0         (0408)    mov   [ADC_bfStatus], 00h                       ; and clear status and old resolution
                                        (0409) 
                                        (0410)                                                    ; Check for resolution to be within min and max values
0F53: 39 07    CMP   A,0x7              (0411)    cmp   A,ADC_bMINRES                             ; Check low end of resolution
0F55: D0 05    JNC   0x0F5B             (0412)    jnc   ADC_CHECKHI
0F57: 50 07    MOV   A,0x7              (0413)    mov   A,ADC_bMINRES                             ; Too low - load legal low value
0F59: 80 07    JMP   0x0F61             (0414)    jmp   ADC_RES_OK
                                        (0415) 
                                        (0416) ADC_CHECKHI:                                       ; Check high end of resolution
0F5B: 39 0D    CMP   A,0xD              (0417)    cmp   A,ADC_bMAXRES
0F5D: C0 03    JC    0x0F61             (0418)    jc    ADC_RES_OK
0F5F: 50 0D    MOV   A,0xD              (0419)    mov   A,ADC_bMAXRES                             ; Too high - load legal Max value
                                        (0420) 
                                        (0421) ADC_RES_OK:
                                        (0422)                                                    ; Calculate compare value for the PWM which
                                        (0423)                                                    ; computes the integrate time
0F61: 11 07    SUB   A,0x7              (0424)    sub   A, ADC_bMINRES                            ; Normalize with min resolution
0F63: 2C 11    OR    [0x11],A           (0425)    or    [ADC_bfStatus], A
                                        (0426)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0427)                                                    ; is running 4x so 128*4=512 or 0x0200
0F65: 01 01    ADD   A,0x1              (0428)    add   A,01h                                     ; The MSB is 02h.
0F67: 5C       MOV   X,A                (0429)    mov   X,A
0F68: 50 01    MOV   A,0x1              (0430)    mov   A,01h
                                        (0431) 
                                        (0432) ADC_CALC_INTTIME:                                  ; Now shift the MSB left for every bit of resolution of min (7).
0F6A: 64       ASL   A                  (0433)    asl   A
0F6B: 79       DEC   X                  (0434)    dec   X
0F6C: BF FD    JNZ   0x0F6A             (0435)    jnz   ADC_CALC_INTTIME
                                        (0436) 
                                        (0437) ADC_LOAD_INTTIME:                                  ; Load compare value and Calc time into registers
                                        (0438)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
0F6E: 62 26 00 MOV   REG[0x26],0x0      (0439)    mov   reg[ADC_bPWM_IntTime_LSB], 00h
0F71: 60 2A    MOV   REG[0x2A],A        (0440)    mov   reg[ADC_bPWM_IntTime_MSB], A
                                        (0441) 
                                        (0442)                                                    ; Load the CalcTime into the PWM Period
0F73: 62 25 0A MOV   REG[0x25],0xA      (0443)    mov   reg[ADC_bPWM_Period_LSB], <wCalcTime
0F76: 01 00    ADD   A,0x0              (0444)    add   A, >wCalcTime
0F78: 60 29    MOV   REG[0x29],A        (0445)    mov   reg[ADC_bPWM_Period_MSB],A
                                        (0446)    RAM_EPILOGUE RAM_USE_CLASS_4
0F7A: 7F       RET                      (0447)    ret
                                        (0448) .ENDSECTION
                                        (0449) ; End of File ADC.asm
FILE: C:\Users\student\DOCUME~1\PSOCDE~1.4PR\FIE862~1\FINAL_~1\FINAL_~1\main.c
(0001) #include <m8c.h>        // part specific constants and macros
(0002) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0003) #include "stdlib.h"		// Add this header to use the ftoa function
(0004) #include "stdio.h"
(0005) #include "math.h"
(0006) 
(0007) // @ params of architecture
(0008) #define N_WORDS 32		// N_LIGHT_BINS * N_TEMP_BINS
(0009) #define LEN_V 64		// length of (sensed, spoken) vocab pair table
(0010) //#define y 150
(0011) //#define z 150
(0012) #define x 1000			// x >= (z + y) max_words
(0013) #define L 10000			// total time of listening 
(0014) #define M 10000			// total time of speaking
(0015) #define k 10			// total nmber of epochs
(0016) 
(0017) int MIN_LIGHT_READING = 0;
(0018) int MAX_LIGHT_READING = 1000;
(0019) int MIN_TEMP_READING = 0;
(0020) int MAX_TEMP_READING = 60;
(0021) BYTE N_LIGHT_BINS = 8;
(0022) BYTE N_TEMP_BINS = 4;
(0023) 
(0024) int iData;				// Variable that stores the ADC result
(0025) float fVolts;			// Variable that stores the converted voltage value
(0026) float fScaleFactor;		// Variable that stores the volts/count scale factor
(0027) char *pResult;			// Pointer used to store the result returned by ftoa function
(0028) int iStatus;			// Status variable for the ftoa function
(0029) int light_reading;		// light reading in int
(0030) int temp_reading;		// temperature reading in int
(0031) char light_buffer[17];	// char buffer to display light 
(0032) char temp_buffer[17];	// char buffer to display temperature
(0033) 
(0034) typedef struct Tx_Rx_pair {
(0035) 	BYTE tx_word;		// 1 byte spoken word
(0036) 	BYTE rx_word;		// 1 byte listened word
(0037) 	BYTE freq;			// 1 byte
(0038) 	// BYTE light_bin;		// 1 byte
(0039) 	// BYTE temp_bin;		// 1 byte
(0040) } tx_rx_pair;
(0041) tx_rx_pair tx_rx_table[LEN_V];
(0042) 
(0043) // maps a transmitted word with the light and temperature bins
(0044) typedef struct Map_Tx_To_T_L {
(0045) 	//BYTE tx_word;		// 1 byte spoken word
(0046) 	BYTE light_bin;		// 1 byte
(0047) 	BYTE temp_bin;		// 1 byte
(0048) } map_Tx_TL;
(0049) map_Tx_TL tx_map[N_WORDS];
(0050) 
(0051) BYTE word_counter;
(0052) BYTE n_pairs;
(0053) 
(0054) // function protype definitions
(0055) void wait(int);
(0056) BYTE get_light_bin(int);
(0057) BYTE get_temp_bin(int);
(0058) BYTE get_word(BYTE, BYTE);
(0059) void insert_tx_rx_table(BYTE, BYTE, BYTE, BYTE);
(0060) BYTE infer(BYTE);
(0061) void reorder(void);
(0062) 
(0063) //temperature functions
(0064) TEMP_I2C_ADDR = 0x18;
(0065) TEMP_AMB_REG = 0x05;
(0066) typedef struct {
(0067) 	BYTE highByte;
(0068) 	BYTE lowByte;
(0069) } Temp_I2C_Buffer;
(0070) 
(0071) 
(0072) void Temp_I2C_Init(void);
(0073) void Temp_Set_RegPtr(BYTE);
(0074) void read_temp(Temp_I2C_Buffer*);
(0075) int display_temp(Temp_I2C_Buffer);
(0076) 
(0077) void wait(int ms) { 
__UserModules_end|__text_start|_wait|_wait:
  i                    --> X+2
  j                    --> X+0
  ms                   --> X-5
    0F7B: 10       PUSH  X
    0F7C: 4F       MOV   X,SP
    0F7D: 38 04    ADD   SP,0x4
(0078) //	ms delay at 3MHz clock
(0079) 	int i, j;
(0080) 	for(i = 0; i < ms; i++)
    0F7F: 56 03 00 MOV   [X+3],0x0
    0F82: 56 02 00 MOV   [X+2],0x0
    0F85: 80 1D    JMP   0x0FA3
(0081) 		for(j = 0; j < 120; j++);
    0F87: 56 01 00 MOV   [X+1],0x0
    0F8A: 56 00 00 MOV   [X+0],0x0
    0F8D: 77 01    INC   [X+1]
    0F8F: 0F 00 00 ADC   [X+0],0x0
    0F92: 52 01    MOV   A,[X+1]
    0F94: 11 78    SUB   A,0x78
    0F96: 52 00    MOV   A,[X+0]
    0F98: 31 80    XOR   A,0x80
    0F9A: 19 80    SBB   A,0x80
    0F9C: CF F0    JC    0x0F8D
    0F9E: 77 03    INC   [X+3]
    0FA0: 0F 02 00 ADC   [X+2],0x0
    0FA3: 52 03    MOV   A,[X+3]
    0FA5: 13 FC    SUB   A,[X-4]
    0FA7: 52 FB    MOV   A,[X-5]
    0FA9: 31 80    XOR   A,0x80
    0FAB: 62 D0 01 MOV   REG[0xD0],0x1
    0FAE: 53 7D    MOV   [__rX],A
    0FB0: 52 02    MOV   A,[X+2]
    0FB2: 31 80    XOR   A,0x80
    0FB4: 1A 7D    SBB   A,[__rX]
    0FB6: CF D0    JC    0x0F87
    0FB8: 38 FC    ADD   SP,0xFC
    0FBA: 20       POP   X
    0FBB: 7F       RET   
(0082) }
(0083) 
(0084) BYTE get_light_bin(int light_reading) {
_get_light_bin:
  step_size            --> X+1
  bin                  --> X+0
  light_reading        --> X-5
    0FBC: 10       PUSH  X
    0FBD: 4F       MOV   X,SP
    0FBE: 38 09    ADD   SP,0x9
(0085) 	// @param: light_reading: current light reading
(0086) 	float step_size = (MAX_LIGHT_READING - MIN_LIGHT_READING) / N_LIGHT_BINS;
    0FC0: 62 D0 01 MOV   REG[0xD0],0x1
    0FC3: 51 A7    MOV   A,[N_LIGHT_BINS]
    0FC5: 62 D0 01 MOV   REG[0xD0],0x1
    0FC8: 53 88    MOV   [__r1],A
    0FCA: 62 D0 01 MOV   REG[0xD0],0x1
    0FCD: 51 9B    MOV   A,[MAX_LIGHT_READING+1]
    0FCF: 62 D0 01 MOV   REG[0xD0],0x1
    0FD2: 12 97    SUB   A,[MIN_LIGHT_READING+1]
    0FD4: 62 D0 01 MOV   REG[0xD0],0x1
    0FD7: 53 86    MOV   [__r3],A
    0FD9: 62 D0 01 MOV   REG[0xD0],0x1
    0FDC: 51 9A    MOV   A,[MAX_LIGHT_READING]
    0FDE: 62 D0 01 MOV   REG[0xD0],0x1
    0FE1: 1A 96    SBB   A,[MIN_LIGHT_READING]
    0FE3: 62 D0 01 MOV   REG[0xD0],0x1
    0FE6: 53 87    MOV   [__r2],A
    0FE8: 50 00    MOV   A,0x0
    0FEA: 08       PUSH  A
    0FEB: 51 88    MOV   A,[__r1]
    0FED: 08       PUSH  A
    0FEE: 51 87    MOV   A,[__r2]
    0FF0: 08       PUSH  A
    0FF1: 51 86    MOV   A,[__r3]
    0FF3: 08       PUSH  A
    0FF4: 7C 23 14 LCALL 0x2314
    0FF7: 18       POP   A
    0FF8: 53 88    MOV   [__r1],A
    0FFA: 18       POP   A
    0FFB: 53 89    MOV   [__r0],A
    0FFD: 38 FE    ADD   SP,0xFE
    0FFF: 51 88    MOV   A,[__r1]
    1001: 54 04    MOV   [X+4],A
    1003: 51 89    MOV   A,[__r0]
    1005: 54 03    MOV   [X+3],A
    1007: 48 03 80 TST   [X+3],0x80
    100A: A0 09    JZ    0x1014
    100C: 56 02 FF MOV   [X+2],0xFF
    100F: 56 01 FF MOV   [X+1],0xFF
    1012: 80 07    JMP   0x101A
    1014: 56 02 00 MOV   [X+2],0x0
    1017: 56 01 00 MOV   [X+1],0x0
    101A: 52 01    MOV   A,[X+1]
    101C: 08       PUSH  A
    101D: 52 02    MOV   A,[X+2]
    101F: 08       PUSH  A
    1020: 52 03    MOV   A,[X+3]
    1022: 08       PUSH  A
    1023: 52 04    MOV   A,[X+4]
    1025: 08       PUSH  A
    1026: 62 D0 01 MOV   REG[0xD0],0x1
    1029: 7C 28 5F LCALL 0x285F
    102C: 18       POP   A
    102D: 54 04    MOV   [X+4],A
    102F: 18       POP   A
    1030: 54 03    MOV   [X+3],A
    1032: 18       POP   A
    1033: 54 02    MOV   [X+2],A
    1035: 18       POP   A
    1036: 54 01    MOV   [X+1],A
(0087) 	BYTE bin = (BYTE)ceil((light_reading - MIN_LIGHT_READING)/ step_size);
    1038: 62 D0 01 MOV   REG[0xD0],0x1
FILE: C:\Users\student\DOCUME~1\PSOCDE~1.4PR\FIE862~1\FINAL_~1\FINAL_~1\main.c
(0088) 	bin = bin == 0 ? 1 : bin;
    1151: 3D 00 00 CMP   [X+0],0x0
    1154: B0 09    JNZ   0x115E
    1156: 56 08 01 MOV   [X+8],0x1
    1159: 56 07 00 MOV   [X+7],0x0
    115C: 80 08    JMP   0x1165
    115E: 52 00    MOV   A,[X+0]
    1160: 54 08    MOV   [X+8],A
    1162: 56 07 00 MOV   [X+7],0x0
    1165: 62 D0 01 MOV   REG[0xD0],0x1
    1168: 52 08    MOV   A,[X+8]
    116A: 54 00    MOV   [X+0],A
(0089) 	return bin;
    116C: 52 00    MOV   A,[X+0]
    116E: 38 F7    ADD   SP,0xF7
    1170: 20       POP   X
    1171: 7F       RET   
(0090) }
(0091) 
(0092) BYTE get_temp_bin(int temp_reading) {
_get_temp_bin:
  step_size            --> X+1
  bin                  --> X+0
  temp_reading         --> X-5
    1172: 10       PUSH  X
    1173: 4F       MOV   X,SP
    1174: 38 09    ADD   SP,0x9
(0093) 	// @param: temp_reading: current temp reading
(0094) 	float step_size = (MAX_TEMP_READING - MIN_TEMP_READING) / N_TEMP_BINS;
    1176: 62 D0 01 MOV   REG[0xD0],0x1
    1179: 51 A6    MOV   A,[N_TEMP_BINS]
    117B: 62 D0 01 MOV   REG[0xD0],0x1
    117E: 53 88    MOV   [__r1],A
    1180: 62 D0 01 MOV   REG[0xD0],0x1
    1183: 51 91    MOV   A,[MAX_TEMP_READING+1]
    1185: 62 D0 01 MOV   REG[0xD0],0x1
    1188: 12 9F    SUB   A,[MIN_TEMP_READING+1]
    118A: 62 D0 01 MOV   REG[0xD0],0x1
    118D: 53 86    MOV   [__r3],A
    118F: 62 D0 01 MOV   REG[0xD0],0x1
    1192: 51 90    MOV   A,[MAX_TEMP_READING]
    1194: 62 D0 01 MOV   REG[0xD0],0x1
    1197: 1A 9E    SBB   A,[MIN_TEMP_READING]
    1199: 62 D0 01 MOV   REG[0xD0],0x1
    119C: 53 87    MOV   [__r2],A
    119E: 50 00    MOV   A,0x0
    11A0: 08       PUSH  A
    11A1: 51 88    MOV   A,[__r1]
    11A3: 08       PUSH  A
    11A4: 51 87    MOV   A,[__r2]
    11A6: 08       PUSH  A
    11A7: 51 86    MOV   A,[__r3]
    11A9: 08       PUSH  A
    11AA: 7C 23 14 LCALL 0x2314
    11AD: 18       POP   A
    11AE: 53 88    MOV   [__r1],A
    11B0: 18       POP   A
    11B1: 53 89    MOV   [__r0],A
    11B3: 38 FE    ADD   SP,0xFE
    11B5: 51 88    MOV   A,[__r1]
    11B7: 54 04    MOV   [X+4],A
    11B9: 51 89    MOV   A,[__r0]
    11BB: 54 03    MOV   [X+3],A
    11BD: 48 03 80 TST   [X+3],0x80
    11C0: A0 09    JZ    0x11CA
    11C2: 56 02 FF MOV   [X+2],0xFF
    11C5: 56 01 FF MOV   [X+1],0xFF
    11C8: 80 07    JMP   0x11D0
    11CA: 56 02 00 MOV   [X+2],0x0
    11CD: 56 01 00 MOV   [X+1],0x0
    11D0: 52 01    MOV   A,[X+1]
    11D2: 08       PUSH  A
    11D3: 52 02    MOV   A,[X+2]
    11D5: 08       PUSH  A
    11D6: 52 03    MOV   A,[X+3]
    11D8: 08       PUSH  A
    11D9: 52 04    MOV   A,[X+4]
    11DB: 08       PUSH  A
    11DC: 62 D0 01 MOV   REG[0xD0],0x1
    11DF: 7C 28 5F LCALL 0x285F
    11E2: 18       POP   A
    11E3: 54 04    MOV   [X+4],A
    11E5: 18       POP   A
    11E6: 54 03    MOV   [X+3],A
    11E8: 18       POP   A
    11E9: 54 02    MOV   [X+2],A
    11EB: 18       POP   A
    11EC: 54 01    MOV   [X+1],A
(0095) 	BYTE bin = (BYTE)ceil((temp_reading - MIN_TEMP_READING) / step_size);
    11EE: 62 D0 01 MOV   REG[0xD0],0x1
FILE: C:\Users\student\DOCUME~1\PSOCDE~1.4PR\FIE862~1\FINAL_~1\FINAL_~1\main.c
(0096) 	bin = bin == 0 ? 1 : bin;
    1307: 3D 00 00 CMP   [X+0],0x0
    130A: B0 09    JNZ   0x1314
    130C: 56 08 01 MOV   [X+8],0x1
    130F: 56 07 00 MOV   [X+7],0x0
    1312: 80 08    JMP   0x131B
    1314: 52 00    MOV   A,[X+0]
    1316: 54 08    MOV   [X+8],A
    1318: 56 07 00 MOV   [X+7],0x0
    131B: 62 D0 01 MOV   REG[0xD0],0x1
    131E: 52 08    MOV   A,[X+8]
    1320: 54 00    MOV   [X+0],A
(0097) 	return bin;
    1322: 52 00    MOV   A,[X+0]
    1324: 38 F7    ADD   SP,0xF7
    1326: 20       POP   X
    1327: 7F       RET   
(0098) }
(0099) 
(0100) BYTE get_word(BYTE light_bin, BYTE temp_bin) {
_get_word:
  temp_bin             --> X-5
  light_bin            --> X-4
    1328: 10       PUSH  X
    1329: 4F       MOV   X,SP
(0101) 	// @param: light_bin, temp_bin: light & temperature bins
(0102) 	// returns encoded light and temperature bins using a hash function
(0103) 	return 1 + (light_bin - 1) * N_TEMP_BINS + (temp_bin - 1);
    132A: 62 D0 01 MOV   REG[0xD0],0x1
    132D: 52 FC    MOV   A,[X-4]
    132F: 11 01    SUB   A,0x1
    1331: 53 89    MOV   [__r0],A
    1333: 62 D0 01 MOV   REG[0xD0],0x1
    1336: 51 A6    MOV   A,[N_TEMP_BINS]
    1338: 60 E8    MOV   REG[0xE8],A
    133A: 62 D0 01 MOV   REG[0xD0],0x1
    133D: 51 89    MOV   A,[__r0]
    133F: 60 E9    MOV   REG[0xE9],A
    1341: 40       NOP   
    1342: 5D EB    MOV   A,REG[0xEB]
    1344: 53 89    MOV   [__r0],A
    1346: 06 89 01 ADD   [__r0],0x1
    1349: 52 FB    MOV   A,[X-5]
    134B: 11 01    SUB   A,0x1
    134D: 04 89    ADD   [__r0],A
    134F: 51 89    MOV   A,[__r0]
    1351: 20       POP   X
    1352: 7F       RET   
(0104)     //return light_bin
(0105) }
(0106) 
(0107) void insert_tx_rx_table(BYTE light_bin, BYTE temp_bin, BYTE rx_word, BYTE tx_word) {
_insert_tx_rx_table:
  i                    --> X+0
  tx_word              --> X-7
  rx_word              --> X-6
  temp_bin             --> X-5
  light_bin            --> X-4
    1353: 10       PUSH  X
    1354: 4F       MOV   X,SP
    1355: 38 01    ADD   SP,0x1
(0108)     BYTE i;
(0109)     for (i = 0; i < n_pairs; i++) {
    1357: 56 00 00 MOV   [X+0],0x0
    135A: 80 7F    JMP   0x13DA
(0110)         if (tx_rx_table[i].rx_word == rx_word && tx_rx_table[i].tx_word == tx_word) {
    135C: 62 D0 01 MOV   REG[0xD0],0x1
    135F: 52 00    MOV   A,[X+0]
    1361: 53 88    MOV   [__r1],A
    1363: 50 00    MOV   A,0x0
    1365: 08       PUSH  A
    1366: 51 88    MOV   A,[__r1]
    1368: 08       PUSH  A
    1369: 50 00    MOV   A,0x0
    136B: 08       PUSH  A
    136C: 50 03    MOV   A,0x3
    136E: 08       PUSH  A
    136F: 7C 28 CA LCALL 0x28CA
    1372: 38 FC    ADD   SP,0xFC
    1374: 51 7D    MOV   A,[__rX]
    1376: 53 88    MOV   [__r1],A
    1378: 51 7C    MOV   A,[__rY]
    137A: 53 89    MOV   [__r0],A
    137C: 51 88    MOV   A,[__r1]
    137E: 01 14    ADD   A,0x14
    1380: 53 86    MOV   [__r3],A
    1382: 51 89    MOV   A,[__r0]
    1384: 09 00    ADC   A,0x0
    1386: 60 D4    MOV   REG[0xD4],A
    1388: 3E 86    MVI   A,[__r3]
    138A: 3B FA    CMP   A,[X-6]
    138C: B0 4B    JNZ   0x13D8
    138E: 06 88 13 ADD   [__r1],0x13
    1391: 0E 89 00 ADC   [__r0],0x0
    1394: 51 89    MOV   A,[__r0]
    1396: 60 D4    MOV   REG[0xD4],A
    1398: 3E 88    MVI   A,[__r1]
    139A: 3B F9    CMP   A,[X-7]
    139C: B0 3B    JNZ   0x13D8
(0111)             tx_rx_table[i].freq++;
    139E: 52 00    MOV   A,[X+0]
    13A0: 53 88    MOV   [__r1],A
    13A2: 50 00    MOV   A,0x0
    13A4: 08       PUSH  A
    13A5: 51 88    MOV   A,[__r1]
    13A7: 08       PUSH  A
    13A8: 50 00    MOV   A,0x0
    13AA: 08       PUSH  A
    13AB: 50 03    MOV   A,0x3
    13AD: 08       PUSH  A
    13AE: 7C 28 CA LCALL 0x28CA
    13B1: 38 FC    ADD   SP,0xFC
    13B3: 51 7D    MOV   A,[__rX]
    13B5: 53 88    MOV   [__r1],A
    13B7: 51 7C    MOV   A,[__rY]
    13B9: 53 89    MOV   [__r0],A
    13BB: 06 88 15 ADD   [__r1],0x15
    13BE: 0E 89 00 ADC   [__r0],0x0
    13C1: 51 89    MOV   A,[__r0]
    13C3: 60 D4    MOV   REG[0xD4],A
    13C5: 3E 88    MVI   A,[__r1]
    13C7: 7A 88    DEC   [__r1]
    13C9: 53 87    MOV   [__r2],A
    13CB: 06 87 01 ADD   [__r2],0x1
    13CE: 51 89    MOV   A,[__r0]
    13D0: 60 D5    MOV   REG[0xD5],A
    13D2: 51 87    MOV   A,[__r2]
    13D4: 3F 88    MVI   [__r1],A
(0112)             return;
    13D6: 80 ED    JMP   0x14C4
(0113)         }
(0114)     }
    13D8: 77 00    INC   [X+0]
    13DA: 62 D0 01 MOV   REG[0xD0],0x1
    13DD: 52 00    MOV   A,[X+0]
    13DF: 3A AA    CMP   A,[n_pairs]
    13E1: CF 7A    JC    0x135C
(0115) 
(0116) 	if (n_pairs < LEN_V) {
    13E3: 62 D0 01 MOV   REG[0xD0],0x1
    13E6: 3C AA 40 CMP   [n_pairs],0x40
    13E9: D0 DA    JNC   0x14C4
(0117) 		// insert and update index
(0118) 		tx_rx_table[n_pairs].tx_word = tx_word;
    13EB: 62 D0 01 MOV   REG[0xD0],0x1
    13EE: 51 AA    MOV   A,[n_pairs]
    13F0: 62 D0 01 MOV   REG[0xD0],0x1
    13F3: 53 88    MOV   [__r1],A
    13F5: 50 00    MOV   A,0x0
    13F7: 08       PUSH  A
    13F8: 51 88    MOV   A,[__r1]
    13FA: 08       PUSH  A
    13FB: 50 00    MOV   A,0x0
    13FD: 08       PUSH  A
    13FE: 50 03    MOV   A,0x3
    1400: 08       PUSH  A
    1401: 7C 28 CA LCALL 0x28CA
    1404: 38 FC    ADD   SP,0xFC
    1406: 51 7D    MOV   A,[__rX]
    1408: 53 88    MOV   [__r1],A
    140A: 51 7C    MOV   A,[__rY]
    140C: 53 89    MOV   [__r0],A
    140E: 06 88 13 ADD   [__r1],0x13
    1411: 0E 89 00 ADC   [__r0],0x0
    1414: 51 89    MOV   A,[__r0]
    1416: 60 D5    MOV   REG[0xD5],A
    1418: 52 F9    MOV   A,[X-7]
    141A: 3F 88    MVI   [__r1],A
(0119) 		tx_rx_table[n_pairs].rx_word = rx_word;
    141C: 62 D0 01 MOV   REG[0xD0],0x1
    141F: 51 AA    MOV   A,[n_pairs]
    1421: 62 D0 01 MOV   REG[0xD0],0x1
    1424: 53 88    MOV   [__r1],A
    1426: 50 00    MOV   A,0x0
    1428: 08       PUSH  A
    1429: 51 88    MOV   A,[__r1]
    142B: 08       PUSH  A
    142C: 50 00    MOV   A,0x0
    142E: 08       PUSH  A
    142F: 50 03    MOV   A,0x3
    1431: 08       PUSH  A
    1432: 7C 28 CA LCALL 0x28CA
    1435: 38 FC    ADD   SP,0xFC
    1437: 51 7D    MOV   A,[__rX]
    1439: 53 88    MOV   [__r1],A
    143B: 51 7C    MOV   A,[__rY]
    143D: 53 89    MOV   [__r0],A
    143F: 06 88 14 ADD   [__r1],0x14
    1442: 0E 89 00 ADC   [__r0],0x0
    1445: 51 89    MOV   A,[__r0]
    1447: 60 D5    MOV   REG[0xD5],A
    1449: 52 FA    MOV   A,[X-6]
    144B: 3F 88    MVI   [__r1],A
(0120) 		tx_rx_table[n_pairs].freq = 1;
    144D: 62 D0 01 MOV   REG[0xD0],0x1
    1450: 51 AA    MOV   A,[n_pairs]
    1452: 62 D0 01 MOV   REG[0xD0],0x1
    1455: 53 88    MOV   [__r1],A
    1457: 50 00    MOV   A,0x0
    1459: 08       PUSH  A
    145A: 51 88    MOV   A,[__r1]
    145C: 08       PUSH  A
    145D: 50 00    MOV   A,0x0
    145F: 08       PUSH  A
    1460: 50 03    MOV   A,0x3
    1462: 08       PUSH  A
    1463: 7C 28 CA LCALL 0x28CA
    1466: 38 FC    ADD   SP,0xFC
    1468: 51 7D    MOV   A,[__rX]
    146A: 53 88    MOV   [__r1],A
    146C: 51 7C    MOV   A,[__rY]
    146E: 53 89    MOV   [__r0],A
    1470: 06 88 15 ADD   [__r1],0x15
    1473: 0E 89 00 ADC   [__r0],0x0
    1476: 51 89    MOV   A,[__r0]
    1478: 60 D5    MOV   REG[0xD5],A
    147A: 50 01    MOV   A,0x1
    147C: 3F 88    MVI   [__r1],A
(0121) 		n_pairs++;	// move to the next index
    147E: 62 D0 01 MOV   REG[0xD0],0x1
    1481: 76 AA    INC   [n_pairs]
(0122) 		tx_map[tx_word - 1].temp_bin = temp_bin;
    1483: 62 D0 01 MOV   REG[0xD0],0x1
    1486: 52 F9    MOV   A,[X-7]
    1488: 53 88    MOV   [__r1],A
    148A: 55 89 00 MOV   [__r0],0x0
    148D: 16 88 01 SUB   [__r1],0x1
    1490: 1E 89 00 SBB   [__r0],0x0
    1493: 65 88    ASL   [__r1]
    1495: 6B 89    RLC   [__r0]
    1497: 06 88 01 ADD   [__r1],0x1
    149A: 0E 89 01 ADC   [__r0],0x1
    149D: 51 89    MOV   A,[__r0]
    149F: 60 D5    MOV   REG[0xD5],A
    14A1: 52 FB    MOV   A,[X-5]
    14A3: 3F 88    MVI   [__r1],A
(0123) 		tx_map[tx_word - 1].light_bin = light_bin;
    14A5: 52 F9    MOV   A,[X-7]
    14A7: 53 88    MOV   [__r1],A
    14A9: 55 89 00 MOV   [__r0],0x0
    14AC: 16 88 01 SUB   [__r1],0x1
    14AF: 1E 89 00 SBB   [__r0],0x0
    14B2: 65 88    ASL   [__r1]
    14B4: 6B 89    RLC   [__r0]
    14B6: 06 88 00 ADD   [__r1],0x0
    14B9: 0E 89 01 ADC   [__r0],0x1
    14BC: 51 89    MOV   A,[__r0]
    14BE: 60 D5    MOV   REG[0xD5],A
    14C0: 52 FC    MOV   A,[X-4]
    14C2: 3F 88    MVI   [__r1],A
(0124) 	}
    14C4: 38 FF    ADD   SP,0xFF
    14C6: 20       POP   X
    14C7: 7F       RET   
(0125) }
(0126) 
(0127) BYTE infer(BYTE rx_word) {
_infer:
  inferred_word        --> X+2
  max_f                --> X+1
  i                    --> X+0
  rx_word              --> X-4
    14C8: 10       PUSH  X
    14C9: 4F       MOV   X,SP
    14CA: 38 03    ADD   SP,0x3
(0128)     // find the tx_word which occur the most with rx_word
(0129)     BYTE max_f;
(0130)     BYTE i, inferred_word;
(0131)     max_f = 0;
    14CC: 56 01 00 MOV   [X+1],0x0
(0132)     for (i = 0; i < n_pairs; i++) {
    14CF: 56 00 00 MOV   [X+0],0x0
    14D2: 80 A2    JMP   0x1575
(0133)         if (tx_rx_table[i].rx_word == rx_word && tx_rx_table[i].freq > max_f) {
    14D4: 62 D0 01 MOV   REG[0xD0],0x1
    14D7: 52 00    MOV   A,[X+0]
    14D9: 53 88    MOV   [__r1],A
    14DB: 50 00    MOV   A,0x0
    14DD: 08       PUSH  A
    14DE: 51 88    MOV   A,[__r1]
    14E0: 08       PUSH  A
    14E1: 50 00    MOV   A,0x0
    14E3: 08       PUSH  A
    14E4: 50 03    MOV   A,0x3
    14E6: 08       PUSH  A
    14E7: 7C 28 CA LCALL 0x28CA
    14EA: 38 FC    ADD   SP,0xFC
    14EC: 51 7D    MOV   A,[__rX]
    14EE: 53 88    MOV   [__r1],A
    14F0: 51 7C    MOV   A,[__rY]
    14F2: 53 89    MOV   [__r0],A
    14F4: 51 88    MOV   A,[__r1]
    14F6: 01 14    ADD   A,0x14
    14F8: 53 86    MOV   [__r3],A
    14FA: 51 89    MOV   A,[__r0]
    14FC: 09 00    ADC   A,0x0
    14FE: 60 D4    MOV   REG[0xD4],A
    1500: 3E 86    MVI   A,[__r3]
    1502: 3B FC    CMP   A,[X-4]
    1504: B0 6E    JNZ   0x1573
    1506: 06 88 15 ADD   [__r1],0x15
    1509: 0E 89 00 ADC   [__r0],0x0
    150C: 51 89    MOV   A,[__r0]
    150E: 60 D4    MOV   REG[0xD4],A
    1510: 3E 88    MVI   A,[__r1]
    1512: 53 89    MOV   [__r0],A
    1514: 52 01    MOV   A,[X+1]
    1516: 3A 89    CMP   A,[__r0]
    1518: D0 5A    JNC   0x1573
(0134)             max_f = tx_rx_table[i].freq;
    151A: 62 D0 01 MOV   REG[0xD0],0x1
    151D: 52 00    MOV   A,[X+0]
    151F: 53 88    MOV   [__r1],A
    1521: 50 00    MOV   A,0x0
    1523: 08       PUSH  A
    1524: 51 88    MOV   A,[__r1]
    1526: 08       PUSH  A
    1527: 50 00    MOV   A,0x0
    1529: 08       PUSH  A
    152A: 50 03    MOV   A,0x3
    152C: 08       PUSH  A
    152D: 7C 28 CA LCALL 0x28CA
    1530: 38 FC    ADD   SP,0xFC
    1532: 51 7D    MOV   A,[__rX]
    1534: 53 88    MOV   [__r1],A
    1536: 51 7C    MOV   A,[__rY]
    1538: 53 89    MOV   [__r0],A
    153A: 06 88 15 ADD   [__r1],0x15
    153D: 0E 89 00 ADC   [__r0],0x0
    1540: 51 89    MOV   A,[__r0]
    1542: 60 D4    MOV   REG[0xD4],A
    1544: 3E 88    MVI   A,[__r1]
    1546: 54 01    MOV   [X+1],A
(0135)             inferred_word = tx_rx_table[i].tx_word;
    1548: 52 00    MOV   A,[X+0]
    154A: 53 88    MOV   [__r1],A
    154C: 50 00    MOV   A,0x0
    154E: 08       PUSH  A
    154F: 51 88    MOV   A,[__r1]
    1551: 08       PUSH  A
    1552: 50 00    MOV   A,0x0
    1554: 08       PUSH  A
    1555: 50 03    MOV   A,0x3
    1557: 08       PUSH  A
    1558: 7C 28 CA LCALL 0x28CA
    155B: 38 FC    ADD   SP,0xFC
    155D: 51 7D    MOV   A,[__rX]
    155F: 53 88    MOV   [__r1],A
    1561: 51 7C    MOV   A,[__rY]
    1563: 53 89    MOV   [__r0],A
    1565: 06 88 13 ADD   [__r1],0x13
    1568: 0E 89 00 ADC   [__r0],0x0
    156B: 51 89    MOV   A,[__r0]
    156D: 60 D4    MOV   REG[0xD4],A
    156F: 3E 88    MVI   A,[__r1]
    1571: 54 02    MOV   [X+2],A
(0136)         }
(0137)     }
    1573: 77 00    INC   [X+0]
    1575: 62 D0 01 MOV   REG[0xD0],0x1
    1578: 52 00    MOV   A,[X+0]
    157A: 3A AA    CMP   A,[n_pairs]
    157C: CF 57    JC    0x14D4
(0138)     return inferred_word;
    157E: 52 02    MOV   A,[X+2]
    1580: 62 D0 01 MOV   REG[0xD0],0x1
    1583: 38 FD    ADD   SP,0xFD
    1585: 20       POP   X
    1586: 7F       RET   
(0139) }
(0140) 
(0141) void reorder(void) {
_reorder:
  temp                 --> X+3
  i                    --> X+2
  key                  --> X+1
  j                    --> X+0
    1587: 10       PUSH  X
    1588: 4F       MOV   X,SP
    1589: 38 06    ADD   SP,0x6
(0142) 	CHAR i, j;
(0143) 	BYTE key;
(0144) 	tx_rx_pair temp;
(0145) 	j = 0;
    158B: 56 00 00 MOV   [X+0],0x0
(0146)     for (i = 1; i < n_pairs; i++) {
    158E: 56 02 01 MOV   [X+2],0x1
    1591: 81 79    JMP   0x170B
(0147) 		temp = tx_rx_table[i];
    1593: 62 D0 01 MOV   REG[0xD0],0x1
    1596: 52 02    MOV   A,[X+2]
    1598: 53 88    MOV   [__r1],A
    159A: 55 89 00 MOV   [__r0],0x0
    159D: 47 88 80 TST   [__r1],0x80
    15A0: A0 04    JZ    0x15A5
    15A2: 55 89 FF MOV   [__r0],0xFF
    15A5: 62 D0 01 MOV   REG[0xD0],0x1
    15A8: 51 89    MOV   A,[__r0]
    15AA: 08       PUSH  A
    15AB: 51 88    MOV   A,[__r1]
    15AD: 08       PUSH  A
    15AE: 50 00    MOV   A,0x0
    15B0: 08       PUSH  A
    15B1: 50 03    MOV   A,0x3
    15B3: 08       PUSH  A
    15B4: 7C 28 CA LCALL 0x28CA
    15B7: 38 FC    ADD   SP,0xFC
    15B9: 51 7D    MOV   A,[__rX]
    15BB: 53 88    MOV   [__r1],A
    15BD: 51 7C    MOV   A,[__rY]
    15BF: 53 89    MOV   [__r0],A
    15C1: 06 88 13 ADD   [__r1],0x13
    15C4: 0E 89 00 ADC   [__r0],0x0
    15C7: 5A 86    MOV   [__r3],X
    15C9: 06 86 03 ADD   [__r3],0x3
    15CC: 51 89    MOV   A,[__r0]
    15CE: 60 D4    MOV   REG[0xD4],A
    15D0: 62 D5 07 MOV   REG[0xD5],0x7
    15D3: 3E 88    MVI   A,[__r1]
    15D5: 3F 86    MVI   [__r3],A
    15D7: 3E 88    MVI   A,[__r1]
    15D9: 3F 86    MVI   [__r3],A
    15DB: 3E 88    MVI   A,[__r1]
    15DD: 3F 86    MVI   [__r3],A
(0148) 		key = tx_rx_table[i].freq;
    15DF: 52 02    MOV   A,[X+2]
    15E1: 53 88    MOV   [__r1],A
    15E3: 55 89 00 MOV   [__r0],0x0
    15E6: 47 88 80 TST   [__r1],0x80
    15E9: A0 04    JZ    0x15EE
    15EB: 55 89 FF MOV   [__r0],0xFF
    15EE: 62 D0 01 MOV   REG[0xD0],0x1
    15F1: 51 89    MOV   A,[__r0]
    15F3: 08       PUSH  A
    15F4: 51 88    MOV   A,[__r1]
    15F6: 08       PUSH  A
    15F7: 50 00    MOV   A,0x0
    15F9: 08       PUSH  A
    15FA: 50 03    MOV   A,0x3
    15FC: 08       PUSH  A
    15FD: 7C 28 CA LCALL 0x28CA
    1600: 38 FC    ADD   SP,0xFC
    1602: 51 7D    MOV   A,[__rX]
    1604: 53 88    MOV   [__r1],A
    1606: 51 7C    MOV   A,[__rY]
    1608: 53 89    MOV   [__r0],A
    160A: 06 88 15 ADD   [__r1],0x15
    160D: 0E 89 00 ADC   [__r0],0x0
    1610: 51 89    MOV   A,[__r0]
    1612: 60 D4    MOV   REG[0xD4],A
    1614: 3E 88    MVI   A,[__r1]
    1616: 54 01    MOV   [X+1],A
(0149)         j = i - 1;
    1618: 52 02    MOV   A,[X+2]
    161A: 11 01    SUB   A,0x1
    161C: 54 00    MOV   [X+0],A
    161E: 80 53    JMP   0x1672
(0150) 		
(0151) 
(0152)         while (j >= 0 && tx_rx_table[j].freq > key) {
(0153)             tx_rx_table[j + 1] = tx_rx_table[j];
    1620: 62 D0 01 MOV   REG[0xD0],0x1
    1623: 52 00    MOV   A,[X+0]
    1625: 53 88    MOV   [__r1],A
    1627: 55 89 00 MOV   [__r0],0x0
    162A: 47 88 80 TST   [__r1],0x80
    162D: A0 04    JZ    0x1632
    162F: 55 89 FF MOV   [__r0],0xFF
    1632: 62 D0 01 MOV   REG[0xD0],0x1
    1635: 51 89    MOV   A,[__r0]
    1637: 08       PUSH  A
    1638: 51 88    MOV   A,[__r1]
    163A: 08       PUSH  A
    163B: 50 00    MOV   A,0x0
    163D: 08       PUSH  A
    163E: 50 03    MOV   A,0x3
    1640: 08       PUSH  A
    1641: 7C 28 CA LCALL 0x28CA
    1644: 38 FC    ADD   SP,0xFC
    1646: 51 7D    MOV   A,[__rX]
    1648: 53 88    MOV   [__r1],A
    164A: 51 7C    MOV   A,[__rY]
    164C: 53 89    MOV   [__r0],A
    164E: 51 88    MOV   A,[__r1]
    1650: 01 13    ADD   A,0x13
    1652: 53 86    MOV   [__r3],A
    1654: 51 89    MOV   A,[__r0]
    1656: 09 00    ADC   A,0x0
    1658: 06 88 16 ADD   [__r1],0x16
    165B: 0E 89 00 ADC   [__r0],0x0
    165E: 60 D4    MOV   REG[0xD4],A
    1660: 51 89    MOV   A,[__r0]
    1662: 60 D5    MOV   REG[0xD5],A
    1664: 3E 86    MVI   A,[__r3]
    1666: 3F 88    MVI   [__r1],A
    1668: 3E 86    MVI   A,[__r3]
    166A: 3F 88    MVI   [__r1],A
    166C: 3E 86    MVI   A,[__r3]
    166E: 3F 88    MVI   [__r1],A
(0154)             j--;
    1670: 7B 00    DEC   [X+0]
(0155)         }
    1672: 48 00 80 TST   [X+0],0x80
    1675: B0 43    JNZ   0x16B9
    1677: 62 D0 01 MOV   REG[0xD0],0x1
    167A: 52 00    MOV   A,[X+0]
    167C: 53 88    MOV   [__r1],A
    167E: 55 89 00 MOV   [__r0],0x0
    1681: 47 88 80 TST   [__r1],0x80
    1684: A0 04    JZ    0x1689
    1686: 55 89 FF MOV   [__r0],0xFF
    1689: 62 D0 01 MOV   REG[0xD0],0x1
    168C: 51 89    MOV   A,[__r0]
    168E: 08       PUSH  A
    168F: 51 88    MOV   A,[__r1]
    1691: 08       PUSH  A
    1692: 50 00    MOV   A,0x0
    1694: 08       PUSH  A
    1695: 50 03    MOV   A,0x3
    1697: 08       PUSH  A
    1698: 7C 28 CA LCALL 0x28CA
    169B: 38 FC    ADD   SP,0xFC
    169D: 51 7D    MOV   A,[__rX]
    169F: 53 88    MOV   [__r1],A
    16A1: 51 7C    MOV   A,[__rY]
    16A3: 53 89    MOV   [__r0],A
    16A5: 06 88 15 ADD   [__r1],0x15
    16A8: 0E 89 00 ADC   [__r0],0x0
    16AB: 51 89    MOV   A,[__r0]
    16AD: 60 D4    MOV   REG[0xD4],A
    16AF: 3E 88    MVI   A,[__r1]
    16B1: 53 89    MOV   [__r0],A
    16B3: 52 01    MOV   A,[X+1]
    16B5: 3A 89    CMP   A,[__r0]
    16B7: CF 68    JC    0x1620
(0156)         tx_rx_table[j + 1] = temp;
    16B9: 62 D0 01 MOV   REG[0xD0],0x1
    16BC: 55 89 07 MOV   [__r0],0x7
    16BF: 5A 88    MOV   [__r1],X
    16C1: 06 88 03 ADD   [__r1],0x3
    16C4: 52 00    MOV   A,[X+0]
    16C6: 53 86    MOV   [__r3],A
    16C8: 55 87 00 MOV   [__r2],0x0
    16CB: 47 86 80 TST   [__r3],0x80
    16CE: A0 04    JZ    0x16D3
    16D0: 55 87 FF MOV   [__r2],0xFF
    16D3: 62 D0 01 MOV   REG[0xD0],0x1
    16D6: 51 87    MOV   A,[__r2]
    16D8: 08       PUSH  A
    16D9: 51 86    MOV   A,[__r3]
    16DB: 08       PUSH  A
    16DC: 50 00    MOV   A,0x0
    16DE: 08       PUSH  A
    16DF: 50 03    MOV   A,0x3
    16E1: 08       PUSH  A
    16E2: 7C 28 CA LCALL 0x28CA
    16E5: 38 FC    ADD   SP,0xFC
    16E7: 51 7D    MOV   A,[__rX]
    16E9: 53 86    MOV   [__r3],A
    16EB: 51 7C    MOV   A,[__rY]
    16ED: 53 87    MOV   [__r2],A
    16EF: 06 86 16 ADD   [__r3],0x16
    16F2: 0E 87 00 ADC   [__r2],0x0
    16F5: 51 89    MOV   A,[__r0]
    16F7: 60 D4    MOV   REG[0xD4],A
    16F9: 51 87    MOV   A,[__r2]
    16FB: 60 D5    MOV   REG[0xD5],A
    16FD: 3E 88    MVI   A,[__r1]
    16FF: 3F 86    MVI   [__r3],A
    1701: 3E 88    MVI   A,[__r1]
    1703: 3F 86    MVI   [__r3],A
    1705: 3E 88    MVI   A,[__r1]
    1707: 3F 86    MVI   [__r3],A
(0157)     }
    1709: 77 02    INC   [X+2]
    170B: 62 D0 01 MOV   REG[0xD0],0x1
    170E: 51 AA    MOV   A,[n_pairs]
    1710: 62 D0 01 MOV   REG[0xD0],0x1
    1713: 53 88    MOV   [__r1],A
    1715: 55 89 00 MOV   [__r0],0x0
    1718: 52 02    MOV   A,[X+2]
    171A: 53 86    MOV   [__r3],A
    171C: 55 87 00 MOV   [__r2],0x0
    171F: 47 86 80 TST   [__r3],0x80
    1722: A0 04    JZ    0x1727
    1724: 55 87 FF MOV   [__r2],0xFF
    1727: 62 D0 01 MOV   REG[0xD0],0x1
    172A: 51 86    MOV   A,[__r3]
    172C: 12 88    SUB   A,[__r1]
    172E: 51 89    MOV   A,[__r0]
    1730: 31 80    XOR   A,0x80
    1732: 53 7D    MOV   [__rX],A
    1734: 51 87    MOV   A,[__r2]
    1736: 31 80    XOR   A,0x80
    1738: 1A 7D    SBB   A,[__rX]
    173A: CE 58    JC    0x1593
    173C: 38 FA    ADD   SP,0xFA
    173E: 20       POP   X
    173F: 7F       RET   
(0158) }
(0159) 
(0160) 
(0161) //temperature functions
(0162) void Temp_I2C_Init(void) {
(0163) 	I2CHW_Start();                      // Start the I2CHW
_Temp_I2C_Init:
    1740: 10       PUSH  X
    1741: 7C 0A 63 LCALL _I2CHW_Start
(0164) 	I2CHW_EnableInt();              	// Enable the I2C interrupt
    1744: 7C 0A 66 LCALL _I2CHW_EnableInt
(0165) 	I2CHW_EnableMstr();                 // Enable I2CHW module in Master configuration
    1747: 7C 0A 71 LCALL _I2CHW_EnableMstr
    174A: 20       POP   X
    174B: 7F       RET   
(0166) }
(0167) 
(0168) void Temp_Set_RegPtr(BYTE RegAddress) {
_Temp_Set_RegPtr:
  RegAddress           --> X-4
    174C: 10       PUSH  X
    174D: 4F       MOV   X,SP
(0169) 	I2CHW_bWriteBytes(TEMP_I2C_ADDR, &RegAddress, 1, I2CHW_CompleteXfer);
    174E: 10       PUSH  X
    174F: 50 00    MOV   A,0x0
    1751: 08       PUSH  A
    1752: 50 01    MOV   A,0x1
    1754: 08       PUSH  A
    1755: 62 D0 01 MOV   REG[0xD0],0x1
    1758: 5A 88    MOV   [__r1],X
    175A: 16 88 04 SUB   [__r1],0x4
    175D: 50 07    MOV   A,0x7
    175F: 08       PUSH  A
    1760: 51 88    MOV   A,[__r1]
    1762: 08       PUSH  A
    1763: 62 D0 01 MOV   REG[0xD0],0x1
    1766: 51 8F    MOV   A,[TEMP_I2C_ADDR+1]
    1768: 62 D0 01 MOV   REG[0xD0],0x1
    176B: 08       PUSH  A
    176C: 7C 0A CD LCALL _I2CHW_bWriteBytes
    176F: 38 FB    ADD   SP,0xFB
    1771: 20       POP   X
(0170) 	while (!(I2CHW_bReadI2CStatus() & I2CHW_WR_COMPLETE));
    1772: 10       PUSH  X
    1773: 7C 0E 2B LCALL _I2CHW_bReadI2CStatus
    1776: 20       POP   X
    1777: 62 D0 01 MOV   REG[0xD0],0x1
    177A: 53 89    MOV   [__r0],A
    177C: 47 89 40 TST   [__r0],0x40
    177F: AF F2    JZ    0x1772
(0171) 	I2CHW_ClrWrStatus();
    1781: 10       PUSH  X
    1782: 7C 0E 38 LCALL _I2CHW_ClrWrStatus
    1785: 20       POP   X
    1786: 20       POP   X
    1787: 7F       RET   
(0172) }
(0173) 
(0174) void read_temp(Temp_I2C_Buffer* ts) {
_read_temp:
  ts                   --> X-5
    1788: 10       PUSH  X
    1789: 4F       MOV   X,SP
(0175) 	// set address pointer to desired register in MCP9808, 
(0176) 	// default resolution is 0.25c/bit on startup
(0177) 	Temp_Set_RegPtr(TEMP_AMB_REG);
    178A: 62 D0 01 MOV   REG[0xD0],0x1
    178D: 51 99    MOV   A,[TEMP_AMB_REG+1]
    178F: 62 D0 01 MOV   REG[0xD0],0x1
    1792: 08       PUSH  A
    1793: 9F B7    CALL  _Temp_Set_RegPtr
    1795: 38 FF    ADD   SP,0xFF
(0178) 	I2CHW_fReadBytes(TEMP_I2C_ADDR, (char*)&(ts -> highByte), 2, I2CHW_CompleteXfer);
    1797: 10       PUSH  X
    1798: 50 00    MOV   A,0x0
    179A: 08       PUSH  A
    179B: 50 02    MOV   A,0x2
    179D: 08       PUSH  A
    179E: 52 FB    MOV   A,[X-5]
    17A0: 08       PUSH  A
    17A1: 52 FC    MOV   A,[X-4]
    17A3: 08       PUSH  A
    17A4: 62 D0 01 MOV   REG[0xD0],0x1
    17A7: 51 8F    MOV   A,[TEMP_I2C_ADDR+1]
    17A9: 62 D0 01 MOV   REG[0xD0],0x1
    17AC: 08       PUSH  A
    17AD: 7C 0A 89 LCALL _I2CHW_fReadBytes
    17B0: 38 FB    ADD   SP,0xFB
    17B2: 20       POP   X
(0179) 	while (!(I2CHW_bReadI2CStatus() & I2CHW_RD_COMPLETE));
    17B3: 10       PUSH  X
    17B4: 7C 0E 2B LCALL _I2CHW_bReadI2CStatus
    17B7: 20       POP   X
    17B8: 62 D0 01 MOV   REG[0xD0],0x1
    17BB: 53 89    MOV   [__r0],A
    17BD: 47 89 04 TST   [__r0],0x4
    17C0: AF F2    JZ    0x17B3
(0180) 	I2CHW_ClrWrStatus();
    17C2: 10       PUSH  X
    17C3: 7C 0E 38 LCALL _I2CHW_ClrWrStatus
    17C6: 20       POP   X
    17C7: 20       POP   X
    17C8: 7F       RET   
(0181) }
(0182) 
(0183) int display_temp(Temp_I2C_Buffer ts){
_display_temp:
  low                  --> X+3
  temp_reading         --> X+1
  high                 --> X+0
  ts                   --> X-5
    17C9: 10       PUSH  X
    17CA: 4F       MOV   X,SP
    17CB: 38 04    ADD   SP,0x4
(0184) 	char high = ts.highByte;
    17CD: 62 D0 01 MOV   REG[0xD0],0x1
    17D0: 52 FC    MOV   A,[X-4]
    17D2: 53 88    MOV   [__r1],A
    17D4: 52 FB    MOV   A,[X-5]
    17D6: 60 D4    MOV   REG[0xD4],A
    17D8: 3E 88    MVI   A,[__r1]
    17DA: 54 00    MOV   [X+0],A
(0185) 	char low = ts.lowByte;
    17DC: 52 FC    MOV   A,[X-4]
    17DE: 01 01    ADD   A,0x1
    17E0: 53 88    MOV   [__r1],A
    17E2: 52 FB    MOV   A,[X-5]
    17E4: 09 00    ADC   A,0x0
    17E6: 60 D4    MOV   REG[0xD4],A
    17E8: 3E 88    MVI   A,[__r1]
    17EA: 54 03    MOV   [X+3],A
(0186) 	int temp_reading = 0;
    17EC: 56 02 00 MOV   [X+2],0x0
    17EF: 56 01 00 MOV   [X+1],0x0
(0187) 	high = high & 0x0F;
    17F2: 27 00 0F AND   [X+0],0xF
(0188) 	
(0189) 	if ((high & 0x08) != 0)
    17F5: 48 00 08 TST   [X+0],0x8
    17F8: A0 07    JZ    0x1800
(0190) 		temp_reading += 128;
    17FA: 07 02 80 ADD   [X+2],0x80
    17FD: 0F 01 00 ADC   [X+1],0x0
(0191) 	if ((high & 0x04) != 0)
    1800: 48 00 04 TST   [X+0],0x4
    1803: A0 07    JZ    0x180B
(0192) 		temp_reading += 64;
    1805: 07 02 40 ADD   [X+2],0x40
    1808: 0F 01 00 ADC   [X+1],0x0
(0193) 	if ((high & 0x02) != 0)
    180B: 48 00 02 TST   [X+0],0x2
    180E: A0 07    JZ    0x1816
(0194) 		temp_reading += 32;
    1810: 07 02 20 ADD   [X+2],0x20
    1813: 0F 01 00 ADC   [X+1],0x0
(0195) 	if ((high & 0x01) != 0)
    1816: 48 00 01 TST   [X+0],0x1
    1819: A0 07    JZ    0x1821
(0196) 		temp_reading += 16;
    181B: 07 02 10 ADD   [X+2],0x10
    181E: 0F 01 00 ADC   [X+1],0x0
(0197) 	if ((low & 0x80) != 0)
    1821: 48 03 80 TST   [X+3],0x80
    1824: A0 07    JZ    0x182C
(0198) 		temp_reading += 8;
    1826: 07 02 08 ADD   [X+2],0x8
    1829: 0F 01 00 ADC   [X+1],0x0
(0199) 	if ((low & 0x40) != 0)
    182C: 48 03 40 TST   [X+3],0x40
    182F: A0 07    JZ    0x1837
(0200) 		temp_reading += 4;
    1831: 07 02 04 ADD   [X+2],0x4
    1834: 0F 01 00 ADC   [X+1],0x0
(0201) 	if ((low & 0x20) != 0)
    1837: 48 03 20 TST   [X+3],0x20
    183A: A0 07    JZ    0x1842
(0202) 		temp_reading += 2;
    183C: 07 02 02 ADD   [X+2],0x2
    183F: 0F 01 00 ADC   [X+1],0x0
(0203) 	if ((low & 0x10) != 0)
    1842: 48 03 10 TST   [X+3],0x10
    1845: A0 06    JZ    0x184C
(0204) 		temp_reading += 1;
    1847: 77 02    INC   [X+2]
    1849: 0F 01 00 ADC   [X+1],0x0
(0205) 	
(0206) 	//LCD_PrCString("Temp: ");
(0207)     csprintf(temp_buffer, "%d", temp_reading);
    184C: 52 01    MOV   A,[X+1]
    184E: 08       PUSH  A
    184F: 52 02    MOV   A,[X+2]
    1851: 08       PUSH  A
    1852: 50 01    MOV   A,0x1
    1854: 08       PUSH  A
    1855: 50 DE    MOV   A,0xDE
    1857: 08       PUSH  A
    1858: 50 01    MOV   A,0x1
    185A: 08       PUSH  A
    185B: 50 59    MOV   A,0x59
    185D: 08       PUSH  A
    185E: 7C 30 03 LCALL _csprintf
    1861: 38 FA    ADD   SP,0xFA
(0208)     LCD_PrString(temp_buffer);
    1863: 10       PUSH  X
    1864: 50 01    MOV   A,0x1
    1866: 08       PUSH  A
    1867: 50 59    MOV   A,0x59
    1869: 5C       MOV   X,A
    186A: 18       POP   A
    186B: 7C 08 E8 LCALL _LCD_PrString
    186E: 20       POP   X
(0209) 	return temp_reading;
    186F: 62 D0 01 MOV   REG[0xD0],0x1
    1872: 52 02    MOV   A,[X+2]
    1874: 53 88    MOV   [__r1],A
    1876: 52 01    MOV   A,[X+1]
    1878: 53 89    MOV   [__r0],A
    187A: 38 FC    ADD   SP,0xFC
    187C: 20       POP   X
    187D: 7F       RET   
(0210) }
(0211) 
(0212) #pragma interrupt_handler Timer_ISR
(0213) /* Timer ISR in C where timer interrupts are processed */
(0214) void Timer_ISR(void)
(0215) {
_Timer_ISR:
    187E: 71 C0    OR    F,0xC0
    1880: 08       PUSH  A
    1881: 5D D0    MOV   A,REG[0xD0]
    1883: 08       PUSH  A
    1884: 5D D3    MOV   A,REG[0xD3]
    1886: 08       PUSH  A
    1887: 5D D4    MOV   A,REG[0xD4]
    1889: 08       PUSH  A
    188A: 5D D5    MOV   A,REG[0xD5]
    188C: 08       PUSH  A
    188D: 62 D0 01 MOV   REG[0xD0],0x1
    1890: 51 89    MOV   A,[__r0]
    1892: 08       PUSH  A
    1893: 51 88    MOV   A,[__r1]
    1895: 08       PUSH  A
    1896: 51 87    MOV   A,[__r2]
    1898: 08       PUSH  A
    1899: 51 86    MOV   A,[__r3]
    189B: 08       PUSH  A
    189C: 51 85    MOV   A,[__r4]
    189E: 08       PUSH  A
    189F: 51 84    MOV   A,[__r5]
    18A1: 08       PUSH  A
    18A2: 51 83    MOV   A,[__r6]
    18A4: 08       PUSH  A
    18A5: 51 82    MOV   A,[__r7]
    18A7: 08       PUSH  A
    18A8: 51 81    MOV   A,[__r8]
    18AA: 08       PUSH  A
    18AB: 51 80    MOV   A,[__r9]
    18AD: 08       PUSH  A
    18AE: 51 7F    MOV   A,[__r10]
    18B0: 08       PUSH  A
    18B1: 51 7E    MOV   A,[__r11]
    18B3: 08       PUSH  A
    18B4: 51 7D    MOV   A,[__rX]
    18B6: 08       PUSH  A
    18B7: 51 7C    MOV   A,[__rY]
    18B9: 08       PUSH  A
    18BA: 51 7B    MOV   A,[__rZ]
    18BC: 08       PUSH  A
(0216) 	reorder();
    18BD: 9C C8    CALL  _reorder
    18BF: 62 D0 01 MOV   REG[0xD0],0x1
    18C2: 18       POP   A
    18C3: 53 7B    MOV   [__rZ],A
    18C5: 18       POP   A
    18C6: 53 7C    MOV   [__rY],A
    18C8: 18       POP   A
    18C9: 53 7D    MOV   [__rX],A
    18CB: 18       POP   A
    18CC: 53 7E    MOV   [__r11],A
    18CE: 18       POP   A
    18CF: 53 7F    MOV   [__r10],A
    18D1: 18       POP   A
    18D2: 53 80    MOV   [__r9],A
    18D4: 18       POP   A
    18D5: 53 81    MOV   [__r8],A
    18D7: 18       POP   A
    18D8: 53 82    MOV   [__r7],A
    18DA: 18       POP   A
    18DB: 53 83    MOV   [__r6],A
    18DD: 18       POP   A
    18DE: 53 84    MOV   [__r5],A
    18E0: 18       POP   A
    18E1: 53 85    MOV   [__r4],A
    18E3: 18       POP   A
    18E4: 53 86    MOV   [__r3],A
    18E6: 18       POP   A
    18E7: 53 87    MOV   [__r2],A
    18E9: 18       POP   A
    18EA: 53 88    MOV   [__r1],A
    18EC: 18       POP   A
    18ED: 53 89    MOV   [__r0],A
    18EF: 18       POP   A
    18F0: 60 D5    MOV   REG[0xD5],A
    18F2: 18       POP   A
    18F3: 60 D4    MOV   REG[0xD4],A
    18F5: 18       POP   A
    18F6: 60 D3    MOV   REG[0xD3],A
    18F8: 18       POP   A
    18F9: 60 D0    MOV   REG[0xD0],A
    18FB: 18       POP   A
    18FC: 7E       RETI  
(0217) }
(0218) 
(0219) void main(void) {
_main:
  acc_buffer           --> X+58
  mae                  --> X+54
  mae_float            --> X+53
  mae_int              --> X+49
  acc_float            --> X+48
  acc_int              --> X+44
  pred_temp_bin        --> X+43
  pred_light_bin       --> X+42
  ts1                  --> X+40
  n_iter               --> X+38
  n_correct            --> X+36
  sae                  --> X+32
  accuracy             --> X+28
  rx_word              --> X+27
  temp_bin             --> X+26
  light_bin            --> X+25
  n_predictions        --> X+23
  iter                 --> X+21
  n_epochs             --> X+20
  inferred_word        --> X+19
  tx_word              --> X+18
  clear_screen         --> X+2
  rx_status            --> X+1
  tx_status            --> X+0
    18FD: 10       PUSH  X
    18FE: 4F       MOV   X,SP
    18FF: 38 47    ADD   SP,0x47
(0220) 	char clear_screen[16] = "                ";         // to clear the LCD
    1901: 62 D0 01 MOV   REG[0xD0],0x1
    1904: 55 88 A0 MOV   [__r1],0xA0
    1907: 55 89 01 MOV   [__r0],0x1
    190A: 5A 86    MOV   [__r3],X
    190C: 06 86 02 ADD   [__r3],0x2
    190F: 62 D5 07 MOV   REG[0xD5],0x7
    1912: 10       PUSH  X
    1913: 55 7D 00 MOV   [__rX],0x0
    1916: 51 89    MOV   A,[__r0]
    1918: 58 88    MOV   X,[__r1]
    191A: 08       PUSH  A
    191B: 28       ROMX  
    191C: 62 D0 01 MOV   REG[0xD0],0x1
    191F: 3F 86    MVI   [__r3],A
    1921: 18       POP   A
    1922: 75       INC   X
    1923: 09 00    ADC   A,0x0
    1925: 76 7D    INC   [__rX]
    1927: 3C 7D 10 CMP   [__rX],0x10
    192A: BF EF    JNZ   0x191A
    192C: 20       POP   X
(0221) 	char acc_buffer[] = "0.00";
    192D: 55 88 B0 MOV   [__r1],0xB0
    1930: 55 89 01 MOV   [__r0],0x1
    1933: 5A 86    MOV   [__r3],X
    1935: 06 86 3A ADD   [__r3],0x3A
    1938: 62 D5 07 MOV   REG[0xD5],0x7
    193B: 10       PUSH  X
    193C: 55 7D 00 MOV   [__rX],0x0
    193F: 51 89    MOV   A,[__r0]
    1941: 58 88    MOV   X,[__r1]
    1943: 08       PUSH  A
    1944: 28       ROMX  
    1945: 62 D0 01 MOV   REG[0xD0],0x1
    1948: 3F 86    MVI   [__r3],A
    194A: 18       POP   A
    194B: 75       INC   X
    194C: 09 00    ADC   A,0x0
    194E: 76 7D    INC   [__rX]
    1950: 3C 7D 05 CMP   [__rX],0x5
    1953: BF EF    JNZ   0x1943
    1955: 20       POP   X
(0222) 	//char mae_buffer[] = "000.00";
(0223) 	Temp_I2C_Buffer ts1;
(0224) /*#############################################################################*/
(0225) 	BYTE light_bin;
(0226) 	BYTE temp_bin;
(0227) 	BYTE pred_light_bin;
(0228) 	BYTE pred_temp_bin;
(0229) 	BYTE rx_word;
(0230) 	BYTE tx_word;
(0231) 	BYTE inferred_word;
(0232) 	BYTE tx_status;                                 // UART tx status
(0233) 	BYTE rx_status;                                 // UART rx status
(0234) 	BYTE n_epochs;
(0235) 	int iter;
(0236) 	int n_iter;
(0237) 	int n_predictions;
(0238) 	int n_correct;
(0239) 	float accuracy;
(0240) 	float acc_int;
(0241) 	BYTE acc_float;
(0242) 	float mae_int;
(0243) 	BYTE mae_float;
(0244) 	float sae;
(0245) 	float mae;
(0246)    
(0247)    	n_pairs = 0;
    1956: 62 D0 01 MOV   REG[0xD0],0x1
    1959: 55 AA 00 MOV   [n_pairs],0x0
(0248) 	n_correct = 0;
    195C: 56 25 00 MOV   [X+37],0x0
    195F: 56 24 00 MOV   [X+36],0x0
(0249) 	n_predictions = 0;
    1962: 56 18 00 MOV   [X+24],0x0
    1965: 56 17 00 MOV   [X+23],0x0
(0250) 	accuracy = 0.0;
    1968: 56 1C 00 MOV   [X+28],0x0
    196B: 56 1D 00 MOV   [X+29],0x0
    196E: 56 1E 00 MOV   [X+30],0x0
    1971: 56 1F 00 MOV   [X+31],0x0
(0251) 	sae = 0.0;
    1974: 56 20 00 MOV   [X+32],0x0
    1977: 56 21 00 MOV   [X+33],0x0
    197A: 56 22 00 MOV   [X+34],0x0
    197D: 56 23 00 MOV   [X+35],0x0
(0252) 	mae = 0.0;
    1980: 56 36 00 MOV   [X+54],0x0
    1983: 56 37 00 MOV   [X+55],0x0
    1986: 56 38 00 MOV   [X+56],0x0
    1989: 56 39 00 MOV   [X+57],0x0
(0253) 	//int counter = 0;
(0254) /*#############################################################################*/
(0255) 
(0256)     PGA_Start(PGA_HIGHPOWER); 						// Start PGA with Highpower
    198C: 10       PUSH  X
    198D: 50 03    MOV   A,0x3
    198F: 7C 08 6C LCALL PGA_SetPower|PGA_Start|_PGA_Start|_PGA_SetPower
(0257) 	LCD_Start();
    1992: 7C 09 BE LCALL LCD_Init|LCD_Start|_LCD_Init|_LCD_Start
(0258) 	PWM8_Speaker_Start();
    1995: 7C 08 2E LCALL _PWM8_Speaker_Start
    1998: 20       POP   X
(0259) 	M8C_EnableGInt; 								// Enable Global Interrupts
    1999: 71 01    OR    F,0x1
(0260) 	ADC_Start(ADC_HIGHPOWER); 						// Start ADC by powering SC block at High Power
    199B: 10       PUSH  X
    199C: 50 03    MOV   A,0x3
    199E: 7C 0E BC LCALL _ADC_SetPower|ADC_Start|_ADC_Start|ADC_SetPower
(0261) 	ADC_GetSamples(0); 								// Have ADC run continuously
    19A1: 50 00    MOV   A,0x0
    19A3: 7C 0E E0 LCALL _ADC_GetSamples
    19A6: 20       POP   X
(0262) 	fScaleFactor = (float)5 / (float)4096;			// Calculate Scale Factor.
    19A7: 62 D0 00 MOV   REG[0xD0],0x0
    19AA: 55 F3 3A MOV   [fScaleFactor],0x3A
    19AD: 55 F4 A0 MOV   [fScaleFactor+1],0xA0
    19B0: 55 F5 00 MOV   [fScaleFactor+2],0x0
    19B3: 55 F6 00 MOV   [fScaleFactor+3],0x0
(0263) 	// for(counter = 0; counter < 15; counter++)		// Infinite loop
(0264) 	//Timer32_1_Start();
(0265) 	
(0266) 	/* Enable Timer Interrupt. This library function writes into INT_MSK0 register */
(0267) 	//Timer32_1_EnableInt();
(0268) 	//counter = 1;
(0269) 		
(0270) 	Temp_I2C_Init();                                // Start the I2C HW for MCP9808 temperature sensor
    19B6: 9D 88    CALL  _Temp_I2C_Init
(0271) 	M8C_EnableIntMask(INT_MSK0, INT_MSK0_GPIO);     // Enable GPIO interrupt
    19B8: 43 E0 20 OR    REG[0xE0],0x20
(0272) 	
(0273) 	// UART
(0274)     UART_Start(UART_PARITY_NONE);                   // Enable UART and no parity
    19BB: 10       PUSH  X
    19BC: 50 00    MOV   A,0x0
    19BE: 7C 06 5B LCALL _UART_Start
(0275)     UART_CmdReset();
    19C1: 7C 07 8D LCALL _UART_CmdReset
    19C4: 20       POP   X
(0276) 	n_epochs = 0;
    19C5: 56 14 00 MOV   [X+20],0x0
(0277) 	iter = 0;
    19C8: 56 16 00 MOV   [X+22],0x0
    19CB: 56 15 00 MOV   [X+21],0x0
(0278) 	n_iter = (L + M) / x;
    19CE: 56 27 14 MOV   [X+39],0x14
    19D1: 56 26 00 MOV   [X+38],0x0
    19D4: 7D 22 BE LJMP  0x22BE
(0279) 	while (n_epochs < 3)
(0280) 	{
(0281) 		LCD_Position(0,0);
    19D7: 10       PUSH  X
    19D8: 50 00    MOV   A,0x0
    19DA: 57 00    MOV   X,0x0
    19DC: 7C 0A 31 LCALL _LCD_Position
    19DF: 20       POP   X
(0282) 		LCD_PrString(clear_screen);		
    19E0: 62 D0 01 MOV   REG[0xD0],0x1
    19E3: 5A 88    MOV   [__r1],X
    19E5: 06 88 02 ADD   [__r1],0x2
    19E8: 10       PUSH  X
    19E9: 50 07    MOV   A,0x7
    19EB: 08       PUSH  A
    19EC: 51 88    MOV   A,[__r1]
    19EE: 5C       MOV   X,A
    19EF: 18       POP   A
    19F0: 7C 08 E8 LCALL _LCD_PrString
(0283) 		LCD_Position(1,0);
    19F3: 57 00    MOV   X,0x0
    19F5: 50 01    MOV   A,0x1
    19F7: 7C 0A 31 LCALL _LCD_Position
    19FA: 20       POP   X
(0284) 		LCD_PrString(clear_screen);
    19FB: 62 D0 01 MOV   REG[0xD0],0x1
    19FE: 5A 88    MOV   [__r1],X
    1A00: 06 88 02 ADD   [__r1],0x2
    1A03: 10       PUSH  X
    1A04: 50 07    MOV   A,0x7
    1A06: 08       PUSH  A
    1A07: 51 88    MOV   A,[__r1]
    1A09: 5C       MOV   X,A
    1A0A: 18       POP   A
    1A0B: 7C 08 E8 LCALL _LCD_PrString
    1A0E: 20       POP   X
(0285) 		if (iter < n_iter) {
    1A0F: 52 16    MOV   A,[X+22]
    1A11: 13 27    SUB   A,[X+39]
    1A13: 52 26    MOV   A,[X+38]
    1A15: 31 80    XOR   A,0x80
    1A17: 62 D0 01 MOV   REG[0xD0],0x1
    1A1A: 53 7D    MOV   [__rX],A
    1A1C: 52 15    MOV   A,[X+21]
    1A1E: 31 80    XOR   A,0x80
    1A20: 1A 7D    SBB   A,[__rX]
    1A22: D4 04    JNC   0x1E27
(0286) 			while(ADC_fIsDataAvailable() == 0); 		// Loop until value ready
    1A24: 10       PUSH  X
    1A25: 7C 0F 26 LCALL _ADC_fIsData|ADC_fIsDataAvailable|_ADC_fIsDataAvailable
    1A28: 20       POP   X
    1A29: 62 D0 01 MOV   REG[0xD0],0x1
    1A2C: 39 00    CMP   A,0x0
    1A2E: AF F5    JZ    0x1A24
(0287) 			iData = ADC_iGetData();						// Read ADC result
    1A30: 10       PUSH  X
    1A31: 7C 0F 39 LCALL _ADC_iGetData
    1A34: 62 D0 01 MOV   REG[0xD0],0x1
    1A37: 5A 89    MOV   [__r0],X
    1A39: 20       POP   X
    1A3A: 08       PUSH  A
    1A3B: 51 89    MOV   A,[__r0]
    1A3D: 62 D0 01 MOV   REG[0xD0],0x1
    1A40: 53 9C    MOV   [iData],A
    1A42: 18       POP   A
    1A43: 53 9D    MOV   [iData+1],A
(0288) 			ADC_ClearFlag(); 							// Clear ADC flag
    1A45: 10       PUSH  X
    1A46: 7C 0F 41 LCALL _ADC_ClearFlag
    1A49: 20       POP   X
(0289) 			fVolts = fScaleFactor*(float)iData;			// Calculate voltage using ADC result and scale factor
    1A4A: 62 D0 01 MOV   REG[0xD0],0x1
    1A4D: 51 9D    MOV   A,[iData+1]
    1A4F: 62 D0 01 MOV   REG[0xD0],0x1
    1A52: 53 86    MOV   [__r3],A
    1A54: 62 D0 01 MOV   REG[0xD0],0x1
    1A57: 51 9C    MOV   A,[iData]
    1A59: 62 D0 01 MOV   REG[0xD0],0x1
    1A5C: 53 87    MOV   [__r2],A
    1A5E: 47 87 80 TST   [__r2],0x80
    1A61: A0 09    JZ    0x1A6B
    1A63: 55 88 FF MOV   [__r1],0xFF
    1A66: 55 89 FF MOV   [__r0],0xFF
    1A69: 80 0A    JMP   0x1A74
    1A6B: 62 D0 01 MOV   REG[0xD0],0x1
    1A6E: 55 88 00 MOV   [__r1],0x0
    1A71: 55 89 00 MOV   [__r0],0x0
    1A74: 62 D0 01 MOV   REG[0xD0],0x1
    1A77: 51 89    MOV   A,[__r0]
    1A79: 08       PUSH  A
    1A7A: 51 88    MOV   A,[__r1]
    1A7C: 08       PUSH  A
    1A7D: 51 87    MOV   A,[__r2]
    1A7F: 08       PUSH  A
    1A80: 51 86    MOV   A,[__r3]
    1A82: 08       PUSH  A
    1A83: 7C 28 5F LCALL 0x285F
    1A86: 18       POP   A
    1A87: 53 86    MOV   [__r3],A
    1A89: 18       POP   A
    1A8A: 53 87    MOV   [__r2],A
    1A8C: 18       POP   A
    1A8D: 53 88    MOV   [__r1],A
    1A8F: 18       POP   A
    1A90: 08       PUSH  A
    1A91: 51 88    MOV   A,[__r1]
    1A93: 08       PUSH  A
    1A94: 51 87    MOV   A,[__r2]
    1A96: 08       PUSH  A
    1A97: 51 86    MOV   A,[__r3]
    1A99: 08       PUSH  A
    1A9A: 62 D0 00 MOV   REG[0xD0],0x0
    1A9D: 51 F3    MOV   A,[fScaleFactor]
    1A9F: 08       PUSH  A
    1AA0: 51 F4    MOV   A,[fScaleFactor+1]
    1AA2: 08       PUSH  A
    1AA3: 51 F5    MOV   A,[fScaleFactor+2]
    1AA5: 08       PUSH  A
    1AA6: 51 F6    MOV   A,[fScaleFactor+3]
    1AA8: 08       PUSH  A
    1AA9: 62 D0 01 MOV   REG[0xD0],0x1
    1AAC: 7C 26 BE LCALL 0x26BE
    1AAF: 18       POP   A
    1AB0: 62 D0 01 MOV   REG[0xD0],0x1
    1AB3: 53 8D    MOV   [fVolts+3],A
    1AB5: 18       POP   A
    1AB6: 53 8C    MOV   [fVolts+2],A
    1AB8: 18       POP   A
    1AB9: 53 8B    MOV   [fVolts+1],A
    1ABB: 18       POP   A
    1ABC: 53 8A    MOV   [fVolts],A
    1ABE: 38 FC    ADD   SP,0xFC
(0290) 			light_reading = (int)(fVolts * 800) / 3.7;
    1AC0: 51 8A    MOV   A,[fVolts]
    1AC2: 08       PUSH  A
    1AC3: 51 8B    MOV   A,[fVolts+1]
    1AC5: 08       PUSH  A
    1AC6: 51 8C    MOV   A,[fVolts+2]
    1AC8: 08       PUSH  A
    1AC9: 51 8D    MOV   A,[fVolts+3]
    1ACB: 08       PUSH  A
    1ACC: 50 44    MOV   A,0x44
    1ACE: 08       PUSH  A
    1ACF: 50 48    MOV   A,0x48
    1AD1: 08       PUSH  A
    1AD2: 50 00    MOV   A,0x0
    1AD4: 08       PUSH  A
    1AD5: 08       PUSH  A
    1AD6: 62 D0 01 MOV   REG[0xD0],0x1
    1AD9: 7C 26 BE LCALL 0x26BE
    1ADC: 18       POP   A
    1ADD: 53 86    MOV   [__r3],A
    1ADF: 18       POP   A
    1AE0: 53 87    MOV   [__r2],A
    1AE2: 18       POP   A
    1AE3: 53 88    MOV   [__r1],A
    1AE5: 18       POP   A
    1AE6: 38 FC    ADD   SP,0xFC
    1AE8: 08       PUSH  A
    1AE9: 51 88    MOV   A,[__r1]
    1AEB: 08       PUSH  A
    1AEC: 51 87    MOV   A,[__r2]
    1AEE: 08       PUSH  A
    1AEF: 51 86    MOV   A,[__r3]
    1AF1: 08       PUSH  A
    1AF2: 7C 23 6D LCALL 0x236D
    1AF5: 18       POP   A
    1AF6: 53 88    MOV   [__r1],A
    1AF8: 18       POP   A
    1AF9: 53 89    MOV   [__r0],A
    1AFB: 38 FE    ADD   SP,0xFE
    1AFD: 51 88    MOV   A,[__r1]
    1AFF: 53 86    MOV   [__r3],A
    1B01: 51 89    MOV   A,[__r0]
    1B03: 53 87    MOV   [__r2],A
    1B05: 47 87 80 TST   [__r2],0x80
    1B08: A0 09    JZ    0x1B12
    1B0A: 55 88 FF MOV   [__r1],0xFF
    1B0D: 55 89 FF MOV   [__r0],0xFF
    1B10: 80 0A    JMP   0x1B1B
    1B12: 62 D0 01 MOV   REG[0xD0],0x1
    1B15: 55 88 00 MOV   [__r1],0x0
    1B18: 55 89 00 MOV   [__r0],0x0
    1B1B: 62 D0 01 MOV   REG[0xD0],0x1
    1B1E: 51 89    MOV   A,[__r0]
    1B20: 08       PUSH  A
    1B21: 51 88    MOV   A,[__r1]
    1B23: 08       PUSH  A
    1B24: 51 87    MOV   A,[__r2]
    1B26: 08       PUSH  A
    1B27: 51 86    MOV   A,[__r3]
    1B29: 08       PUSH  A
    1B2A: 7C 28 5F LCALL 0x285F
    1B2D: 18       POP   A
    1B2E: 53 86    MOV   [__r3],A
    1B30: 18       POP   A
    1B31: 53 87    MOV   [__r2],A
    1B33: 18       POP   A
    1B34: 53 88    MOV   [__r1],A
    1B36: 18       POP   A
    1B37: 53 89    MOV   [__r0],A
    1B39: 50 40    MOV   A,0x40
    1B3B: 08       PUSH  A
    1B3C: 50 6C    MOV   A,0x6C
    1B3E: 08       PUSH  A
    1B3F: 50 CC    MOV   A,0xCC
    1B41: 08       PUSH  A
    1B42: 50 CD    MOV   A,0xCD
    1B44: 08       PUSH  A
    1B45: 51 89    MOV   A,[__r0]
    1B47: 08       PUSH  A
    1B48: 51 88    MOV   A,[__r1]
    1B4A: 08       PUSH  A
    1B4B: 51 87    MOV   A,[__r2]
    1B4D: 08       PUSH  A
    1B4E: 51 86    MOV   A,[__r3]
    1B50: 08       PUSH  A
    1B51: 7C 25 DB LCALL 0x25DB
    1B54: 18       POP   A
    1B55: 53 86    MOV   [__r3],A
    1B57: 18       POP   A
    1B58: 53 87    MOV   [__r2],A
    1B5A: 18       POP   A
    1B5B: 53 88    MOV   [__r1],A
    1B5D: 18       POP   A
    1B5E: 38 FC    ADD   SP,0xFC
    1B60: 08       PUSH  A
    1B61: 51 88    MOV   A,[__r1]
    1B63: 08       PUSH  A
    1B64: 51 87    MOV   A,[__r2]
    1B66: 08       PUSH  A
    1B67: 51 86    MOV   A,[__r3]
    1B69: 08       PUSH  A
    1B6A: 7C 23 6D LCALL 0x236D
    1B6D: 18       POP   A
    1B6E: 62 D0 01 MOV   REG[0xD0],0x1
    1B71: 53 A3    MOV   [light_reading+1],A
    1B73: 18       POP   A
    1B74: 53 A2    MOV   [light_reading],A
    1B76: 38 FE    ADD   SP,0xFE
(0291) 			csprintf(light_buffer, "%d", light_reading);
    1B78: 51 A2    MOV   A,[light_reading]
    1B7A: 08       PUSH  A
    1B7B: 51 A3    MOV   A,[light_reading+1]
    1B7D: 08       PUSH  A
    1B7E: 50 01    MOV   A,0x1
    1B80: 08       PUSH  A
    1B81: 50 DE    MOV   A,0xDE
    1B83: 08       PUSH  A
    1B84: 50 01    MOV   A,0x1
    1B86: 08       PUSH  A
    1B87: 50 6A    MOV   A,0x6A
    1B89: 08       PUSH  A
    1B8A: 7C 30 03 LCALL _csprintf
    1B8D: 38 FA    ADD   SP,0xFA
(0292) 			
(0293) 			LCD_Position(0,0);							// Set LCD position to row 1 column 0
    1B8F: 10       PUSH  X
    1B90: 50 00    MOV   A,0x0
    1B92: 57 00    MOV   X,0x0
    1B94: 7C 0A 31 LCALL _LCD_Position
(0294) 			LCD_PrCString("L=");
    1B97: 50 01    MOV   A,0x1
    1B99: 08       PUSH  A
    1B9A: 50 DB    MOV   A,0xDB
    1B9C: 5C       MOV   X,A
    1B9D: 18       POP   A
    1B9E: 7C 08 AC LCALL _LCD_PrCString
(0295) 			LCD_PrString(light_buffer);
    1BA1: 50 01    MOV   A,0x1
    1BA3: 08       PUSH  A
    1BA4: 50 6A    MOV   A,0x6A
    1BA6: 5C       MOV   X,A
    1BA7: 18       POP   A
    1BA8: 7C 08 E8 LCALL _LCD_PrString
(0296) 			
(0297) 			LCD_Position(0,6);
    1BAB: 57 06    MOV   X,0x6
    1BAD: 50 00    MOV   A,0x0
    1BAF: 7C 0A 31 LCALL _LCD_Position
(0298) 			LCD_PrCString("T=");
    1BB2: 50 01    MOV   A,0x1
    1BB4: 08       PUSH  A
    1BB5: 50 D8    MOV   A,0xD8
    1BB7: 5C       MOV   X,A
    1BB8: 18       POP   A
    1BB9: 7C 08 AC LCALL _LCD_PrCString
    1BBC: 20       POP   X
(0299) 			read_temp(&ts1);
    1BBD: 62 D0 01 MOV   REG[0xD0],0x1
    1BC0: 5A 88    MOV   [__r1],X
    1BC2: 06 88 28 ADD   [__r1],0x28
    1BC5: 50 07    MOV   A,0x7
    1BC7: 08       PUSH  A
    1BC8: 51 88    MOV   A,[__r1]
    1BCA: 08       PUSH  A
    1BCB: 9B BB    CALL  _read_temp
(0300) 			temp_reading = display_temp(ts1);
    1BCD: 62 D0 01 MOV   REG[0xD0],0x1
    1BD0: 5A 88    MOV   [__r1],X
    1BD2: 06 88 28 ADD   [__r1],0x28
    1BD5: 5A 86    MOV   [__r3],X
    1BD7: 06 86 3F ADD   [__r3],0x3F
    1BDA: 62 D4 07 MOV   REG[0xD4],0x7
    1BDD: 62 D5 07 MOV   REG[0xD5],0x7
    1BE0: 3E 88    MVI   A,[__r1]
    1BE2: 3F 86    MVI   [__r3],A
    1BE4: 3E 88    MVI   A,[__r1]
    1BE6: 3F 86    MVI   [__r3],A
    1BE8: 5A 88    MOV   [__r1],X
    1BEA: 06 88 3F ADD   [__r1],0x3F
    1BED: 50 07    MOV   A,0x7
    1BEF: 08       PUSH  A
    1BF0: 51 88    MOV   A,[__r1]
    1BF2: 08       PUSH  A
    1BF3: 9B D4    CALL  _display_temp
    1BF5: 38 FC    ADD   SP,0xFC
    1BF7: 62 D0 01 MOV   REG[0xD0],0x1
    1BFA: 51 88    MOV   A,[__r1]
    1BFC: 08       PUSH  A
    1BFD: 51 89    MOV   A,[__r0]
    1BFF: 62 D0 01 MOV   REG[0xD0],0x1
    1C02: 53 A0    MOV   [temp_reading],A
    1C04: 18       POP   A
    1C05: 53 A1    MOV   [temp_reading+1],A
(0301) 			
(0302) 			LCD_Position(0,12);							
    1C07: 10       PUSH  X
    1C08: 57 0C    MOV   X,0xC
    1C0A: 50 00    MOV   A,0x0
    1C0C: 7C 0A 31 LCALL _LCD_Position
(0303) 			LCD_PrHexByte(n_pairs);
    1C0F: 62 D0 01 MOV   REG[0xD0],0x1
    1C12: 51 AA    MOV   A,[n_pairs]
    1C14: 7C 08 CE LCALL _LCD_PrHexByte
    1C17: 20       POP   X
(0304) 			
(0305) 			//word_counter = 0;
(0306) 			light_bin = get_light_bin(light_reading);
    1C18: 62 D0 01 MOV   REG[0xD0],0x1
    1C1B: 51 A2    MOV   A,[light_reading]
    1C1D: 08       PUSH  A
    1C1E: 51 A3    MOV   A,[light_reading+1]
    1C20: 08       PUSH  A
    1C21: 7C 0F BC LCALL _get_light_bin
    1C24: 38 FE    ADD   SP,0xFE
    1C26: 54 19    MOV   [X+25],A
(0307) 			temp_bin = get_temp_bin(temp_reading);
    1C28: 62 D0 01 MOV   REG[0xD0],0x1
    1C2B: 51 A0    MOV   A,[temp_reading]
    1C2D: 08       PUSH  A
    1C2E: 51 A1    MOV   A,[temp_reading+1]
    1C30: 08       PUSH  A
    1C31: 7C 11 72 LCALL _get_temp_bin
    1C34: 62 D0 01 MOV   REG[0xD0],0x1
    1C37: 54 1A    MOV   [X+26],A
(0308) 	        tx_word = get_word(light_bin, temp_bin);
    1C39: 52 1A    MOV   A,[X+26]
    1C3B: 08       PUSH  A
    1C3C: 52 19    MOV   A,[X+25]
    1C3E: 08       PUSH  A
    1C3F: 7C 13 28 LCALL _get_word
    1C42: 38 FC    ADD   SP,0xFC
    1C44: 62 D0 01 MOV   REG[0xD0],0x1
    1C47: 54 12    MOV   [X+18],A
(0309) 			
(0310) 			tx_status = UART_bReadTxStatus();
    1C49: 10       PUSH  X
    1C4A: 7C 06 6E LCALL bUART_ReadTxStatus|UART_bReadTxStatus|_UART_bReadTxStatus|_bUART_ReadTxStatus
    1C4D: 20       POP   X
    1C4E: 62 D0 01 MOV   REG[0xD0],0x1
    1C51: 54 00    MOV   [X+0],A
(0311) 			UART_SendData(tx_word);
    1C53: 10       PUSH  X
    1C54: 52 12    MOV   A,[X+18]
    1C56: 7C 06 6B LCALL _UART_SendData
    1C59: 20       POP   X
(0312) 			do{
(0313) 				tx_status = UART_bReadTxStatus();
    1C5A: 10       PUSH  X
    1C5B: 7C 06 6E LCALL bUART_ReadTxStatus|UART_bReadTxStatus|_UART_bReadTxStatus|_bUART_ReadTxStatus
    1C5E: 20       POP   X
    1C5F: 62 D0 01 MOV   REG[0xD0],0x1
    1C62: 54 00    MOV   [X+0],A
(0314) 				LCD_Position(1,0);
    1C64: 10       PUSH  X
    1C65: 57 00    MOV   X,0x0
    1C67: 50 01    MOV   A,0x1
    1C69: 7C 0A 31 LCALL _LCD_Position
(0315) 				LCD_PrCString("Tx:");
    1C6C: 50 01    MOV   A,0x1
    1C6E: 08       PUSH  A
    1C6F: 50 D4    MOV   A,0xD4
    1C71: 5C       MOV   X,A
    1C72: 18       POP   A
    1C73: 7C 08 AC LCALL _LCD_PrCString
    1C76: 20       POP   X
(0316) 			} while ( ~tx_status & UART_TX_COMPLETE );
    1C77: 62 D0 01 MOV   REG[0xD0],0x1
    1C7A: 52 00    MOV   A,[X+0]
    1C7C: 73       CPL   A
    1C7D: 53 89    MOV   [__r0],A
    1C7F: 26 89 20 AND   [__r0],0x20
    1C82: BF D7    JNZ   0x1C5A
(0317) 			
(0318) 			LCD_Position(1,3);
    1C84: 10       PUSH  X
    1C85: 57 03    MOV   X,0x3
    1C87: 50 01    MOV   A,0x1
    1C89: 7C 0A 31 LCALL _LCD_Position
    1C8C: 20       POP   X
(0319) 			LCD_PrHexByte(tx_word);
    1C8D: 10       PUSH  X
    1C8E: 52 12    MOV   A,[X+18]
    1C90: 7C 08 CE LCALL _LCD_PrHexByte
    1C93: 20       POP   X
(0320) 			wait(x);
    1C94: 50 03    MOV   A,0x3
    1C96: 08       PUSH  A
    1C97: 50 E8    MOV   A,0xE8
    1C99: 08       PUSH  A
    1C9A: 7C 0F 7B LCALL __UserModules_end|__text_start|_wait|_wait
    1C9D: 38 FE    ADD   SP,0xFE
(0321) 
(0322) 		//insert receiving code UART
(0323) 			UART_CmdReset();                          	// Reset command buffer 
    1C9F: 10       PUSH  X
    1CA0: 7C 07 8D LCALL _UART_CmdReset
    1CA3: 20       POP   X
(0324) 			do {
(0325) 				LCD_Position(1,6);
    1CA4: 10       PUSH  X
    1CA5: 57 06    MOV   X,0x6
    1CA7: 50 01    MOV   A,0x1
    1CA9: 7C 0A 31 LCALL _LCD_Position
(0326) 				LCD_PrCString("Rx:");
    1CAC: 50 01    MOV   A,0x1
    1CAE: 08       PUSH  A
    1CAF: 50 D0    MOV   A,0xD0
    1CB1: 5C       MOV   X,A
    1CB2: 18       POP   A
    1CB3: 7C 08 AC LCALL _LCD_PrCString
(0327) 				rx_status = UART_bReadRxStatus();
    1CB6: 7C 06 74 LCALL bUART_ReadRxStatus|UART_bReadRxStatus|_UART_bReadRxStatus|_bUART_ReadRxStatus
    1CB9: 20       POP   X
    1CBA: 62 D0 01 MOV   REG[0xD0],0x1
    1CBD: 54 01    MOV   [X+1],A
(0328) 			} while ( ~ rx_status & UART_RX_REG_FULL );
    1CBF: 62 D0 01 MOV   REG[0xD0],0x1
    1CC2: 52 01    MOV   A,[X+1]
    1CC4: 73       CPL   A
    1CC5: 53 89    MOV   [__r0],A
    1CC7: 26 89 08 AND   [__r0],0x8
    1CCA: BF D9    JNZ   0x1CA4
(0329) 
(0330) 			rx_word = UART_bReadRxData();
    1CCC: 10       PUSH  X
    1CCD: 7C 06 71 LCALL bUART_ReadRxData|_UART_bReadRxData|_bUART_ReadRxData|UART_bReadRxData
    1CD0: 20       POP   X
    1CD1: 62 D0 01 MOV   REG[0xD0],0x1
    1CD4: 54 1B    MOV   [X+27],A
(0331) 
(0332) 			LCD_Position(1,9);
    1CD6: 10       PUSH  X
    1CD7: 57 09    MOV   X,0x9
    1CD9: 50 01    MOV   A,0x1
    1CDB: 7C 0A 31 LCALL _LCD_Position
    1CDE: 20       POP   X
(0333) 			LCD_PrHexByte(rx_word);
    1CDF: 10       PUSH  X
    1CE0: 52 1B    MOV   A,[X+27]
    1CE2: 7C 08 CE LCALL _LCD_PrHexByte
    1CE5: 20       POP   X
(0334) 			
(0335) 			// insert word pairs (tx_word, rx_word) into vocab table
(0336) 	        insert_tx_rx_table(light_bin, temp_bin, rx_word, tx_word);		// temp_bin hard coded to 1
    1CE6: 52 12    MOV   A,[X+18]
    1CE8: 08       PUSH  A
    1CE9: 52 1B    MOV   A,[X+27]
    1CEB: 08       PUSH  A
    1CEC: 52 1A    MOV   A,[X+26]
    1CEE: 08       PUSH  A
    1CEF: 52 19    MOV   A,[X+25]
    1CF1: 08       PUSH  A
    1CF2: 7C 13 53 LCALL _insert_tx_rx_table
(0337) 			inferred_word = infer(rx_word);
    1CF5: 52 1B    MOV   A,[X+27]
    1CF7: 08       PUSH  A
    1CF8: 7C 14 C8 LCALL _infer
    1CFB: 38 FB    ADD   SP,0xFB
    1CFD: 62 D0 01 MOV   REG[0xD0],0x1
    1D00: 54 13    MOV   [X+19],A
(0338) 			
(0339) 			LCD_Position(1,12);
    1D02: 10       PUSH  X
    1D03: 57 0C    MOV   X,0xC
    1D05: 50 01    MOV   A,0x1
    1D07: 7C 0A 31 LCALL _LCD_Position
(0340) 			LCD_PrCString("P:");
    1D0A: 50 01    MOV   A,0x1
    1D0C: 08       PUSH  A
    1D0D: 50 CD    MOV   A,0xCD
    1D0F: 5C       MOV   X,A
    1D10: 18       POP   A
    1D11: 7C 08 AC LCALL _LCD_PrCString
(0341) 			LCD_Position(1,14);
    1D14: 57 0E    MOV   X,0xE
    1D16: 50 01    MOV   A,0x1
    1D18: 7C 0A 31 LCALL _LCD_Position
    1D1B: 20       POP   X
(0342) 			LCD_PrHexByte(inferred_word);
    1D1C: 10       PUSH  X
    1D1D: 52 13    MOV   A,[X+19]
    1D1F: 7C 08 CE LCALL _LCD_PrHexByte
    1D22: 20       POP   X
(0343) 			wait(x);
    1D23: 50 03    MOV   A,0x3
    1D25: 08       PUSH  A
    1D26: 50 E8    MOV   A,0xE8
    1D28: 08       PUSH  A
    1D29: 7C 0F 7B LCALL __UserModules_end|__text_start|_wait|_wait
    1D2C: 38 FE    ADD   SP,0xFE
(0344) 			
(0345) 			// Evaluation metrics: Accuracy & MAE
(0346) 			n_predictions++;
    1D2E: 77 18    INC   [X+24]
    1D30: 0F 17 00 ADC   [X+23],0x0
(0347) 			if (inferred_word == tx_word) n_correct++;
    1D33: 52 13    MOV   A,[X+19]
    1D35: 3B 12    CMP   A,[X+18]
    1D37: B0 06    JNZ   0x1D3E
    1D39: 77 25    INC   [X+37]
    1D3B: 0F 24 00 ADC   [X+36],0x0
(0348) 			
(0349) 			pred_light_bin = tx_map[inferred_word].light_bin;
    1D3E: 62 D0 01 MOV   REG[0xD0],0x1
    1D41: 52 13    MOV   A,[X+19]
    1D43: 53 88    MOV   [__r1],A
    1D45: 55 89 00 MOV   [__r0],0x0
    1D48: 65 88    ASL   [__r1]
    1D4A: 6B 89    RLC   [__r0]
    1D4C: 06 88 00 ADD   [__r1],0x0
    1D4F: 0E 89 01 ADC   [__r0],0x1
    1D52: 51 89    MOV   A,[__r0]
    1D54: 60 D4    MOV   REG[0xD4],A
    1D56: 3E 88    MVI   A,[__r1]
    1D58: 54 2A    MOV   [X+42],A
(0350) 			pred_temp_bin = tx_map[inferred_word].temp_bin;
    1D5A: 52 13    MOV   A,[X+19]
    1D5C: 53 88    MOV   [__r1],A
    1D5E: 55 89 00 MOV   [__r0],0x0
    1D61: 65 88    ASL   [__r1]
    1D63: 6B 89    RLC   [__r0]
    1D65: 06 88 01 ADD   [__r1],0x1
    1D68: 0E 89 01 ADC   [__r0],0x1
    1D6B: 51 89    MOV   A,[__r0]
    1D6D: 60 D4    MOV   REG[0xD4],A
    1D6F: 3E 88    MVI   A,[__r1]
    1D71: 54 2B    MOV   [X+43],A
(0351) 			sae += abs(pred_light_bin - light_bin) + abs(pred_temp_bin - temp_bin);
    1D73: 52 19    MOV   A,[X+25]
    1D75: 53 88    MOV   [__r1],A
    1D77: 55 89 00 MOV   [__r0],0x0
    1D7A: 52 2A    MOV   A,[X+42]
    1D7C: 12 88    SUB   A,[__r1]
    1D7E: 53 88    MOV   [__r1],A
    1D80: 50 00    MOV   A,0x0
    1D82: 1A 89    SBB   A,[__r0]
    1D84: 08       PUSH  A
    1D85: 51 88    MOV   A,[__r1]
    1D87: 08       PUSH  A
    1D88: 7C 35 A2 LCALL _abs
    1D8B: 62 D0 01 MOV   REG[0xD0],0x1
    1D8E: 51 88    MOV   A,[__r1]
    1D90: 54 42    MOV   [X+66],A
    1D92: 51 89    MOV   A,[__r0]
    1D94: 54 41    MOV   [X+65],A
    1D96: 52 1A    MOV   A,[X+26]
    1D98: 53 86    MOV   [__r3],A
    1D9A: 55 87 00 MOV   [__r2],0x0
    1D9D: 52 2B    MOV   A,[X+43]
    1D9F: 12 86    SUB   A,[__r3]
    1DA1: 53 86    MOV   [__r3],A
    1DA3: 50 00    MOV   A,0x0
    1DA5: 1A 87    SBB   A,[__r2]
    1DA7: 08       PUSH  A
    1DA8: 51 86    MOV   A,[__r3]
    1DAA: 08       PUSH  A
    1DAB: 7C 35 A2 LCALL _abs
    1DAE: 38 FC    ADD   SP,0xFC
    1DB0: 62 D0 01 MOV   REG[0xD0],0x1
    1DB3: 52 42    MOV   A,[X+66]
    1DB5: 02 88    ADD   A,[__r1]
    1DB7: 53 88    MOV   [__r1],A
    1DB9: 52 41    MOV   A,[X+65]
    1DBB: 0A 89    ADC   A,[__r0]
    1DBD: 53 89    MOV   [__r0],A
    1DBF: 51 88    MOV   A,[__r1]
    1DC1: 53 86    MOV   [__r3],A
    1DC3: 51 89    MOV   A,[__r0]
    1DC5: 53 87    MOV   [__r2],A
    1DC7: 47 87 80 TST   [__r2],0x80
    1DCA: A0 09    JZ    0x1DD4
    1DCC: 55 88 FF MOV   [__r1],0xFF
    1DCF: 55 89 FF MOV   [__r0],0xFF
    1DD2: 80 0A    JMP   0x1DDD
    1DD4: 62 D0 01 MOV   REG[0xD0],0x1
    1DD7: 55 88 00 MOV   [__r1],0x0
    1DDA: 55 89 00 MOV   [__r0],0x0
    1DDD: 62 D0 01 MOV   REG[0xD0],0x1
    1DE0: 51 89    MOV   A,[__r0]
    1DE2: 08       PUSH  A
    1DE3: 51 88    MOV   A,[__r1]
    1DE5: 08       PUSH  A
    1DE6: 51 87    MOV   A,[__r2]
    1DE8: 08       PUSH  A
    1DE9: 51 86    MOV   A,[__r3]
    1DEB: 08       PUSH  A
    1DEC: 7C 28 5F LCALL 0x285F
    1DEF: 18       POP   A
    1DF0: 53 86    MOV   [__r3],A
    1DF2: 18       POP   A
    1DF3: 53 87    MOV   [__r2],A
    1DF5: 18       POP   A
    1DF6: 53 88    MOV   [__r1],A
    1DF8: 18       POP   A
    1DF9: 08       PUSH  A
    1DFA: 51 88    MOV   A,[__r1]
    1DFC: 08       PUSH  A
    1DFD: 51 87    MOV   A,[__r2]
    1DFF: 08       PUSH  A
    1E00: 51 86    MOV   A,[__r3]
    1E02: 08       PUSH  A
    1E03: 52 20    MOV   A,[X+32]
    1E05: 08       PUSH  A
    1E06: 52 21    MOV   A,[X+33]
    1E08: 08       PUSH  A
    1E09: 52 22    MOV   A,[X+34]
    1E0B: 08       PUSH  A
    1E0C: 52 23    MOV   A,[X+35]
    1E0E: 08       PUSH  A
    1E0F: 7C 24 7E LCALL 0x247E
    1E12: 18       POP   A
    1E13: 54 23    MOV   [X+35],A
    1E15: 18       POP   A
    1E16: 54 22    MOV   [X+34],A
    1E18: 18       POP   A
    1E19: 54 21    MOV   [X+33],A
    1E1B: 18       POP   A
    1E1C: 54 20    MOV   [X+32],A
    1E1E: 38 FC    ADD   SP,0xFC
(0352) 			iter++;
    1E20: 77 16    INC   [X+22]
    1E22: 0F 15 00 ADC   [X+21],0x0
(0353) 		}
    1E25: 84 98    JMP   0x22BE
(0354) 
(0355) 	// after L + M seconds compute accuracy and mae then reorder
(0356) 		else {
(0357) 			mae = sae / n_predictions;
    1E27: 62 D0 01 MOV   REG[0xD0],0x1
    1E2A: 52 18    MOV   A,[X+24]
    1E2C: 53 86    MOV   [__r3],A
    1E2E: 52 17    MOV   A,[X+23]
    1E30: 53 87    MOV   [__r2],A
    1E32: 47 87 80 TST   [__r2],0x80
    1E35: A0 09    JZ    0x1E3F
    1E37: 55 88 FF MOV   [__r1],0xFF
    1E3A: 55 89 FF MOV   [__r0],0xFF
    1E3D: 80 0A    JMP   0x1E48
    1E3F: 62 D0 01 MOV   REG[0xD0],0x1
    1E42: 55 88 00 MOV   [__r1],0x0
    1E45: 55 89 00 MOV   [__r0],0x0
    1E48: 62 D0 01 MOV   REG[0xD0],0x1
    1E4B: 51 89    MOV   A,[__r0]
    1E4D: 08       PUSH  A
    1E4E: 51 88    MOV   A,[__r1]
    1E50: 08       PUSH  A
    1E51: 51 87    MOV   A,[__r2]
    1E53: 08       PUSH  A
    1E54: 51 86    MOV   A,[__r3]
    1E56: 08       PUSH  A
    1E57: 7C 28 5F LCALL 0x285F
    1E5A: 18       POP   A
    1E5B: 53 86    MOV   [__r3],A
    1E5D: 18       POP   A
    1E5E: 53 87    MOV   [__r2],A
    1E60: 18       POP   A
    1E61: 53 88    MOV   [__r1],A
    1E63: 18       POP   A
    1E64: 08       PUSH  A
    1E65: 51 88    MOV   A,[__r1]
    1E67: 08       PUSH  A
    1E68: 51 87    MOV   A,[__r2]
    1E6A: 08       PUSH  A
    1E6B: 51 86    MOV   A,[__r3]
    1E6D: 08       PUSH  A
    1E6E: 52 20    MOV   A,[X+32]
    1E70: 08       PUSH  A
    1E71: 52 21    MOV   A,[X+33]
    1E73: 08       PUSH  A
    1E74: 52 22    MOV   A,[X+34]
    1E76: 08       PUSH  A
    1E77: 52 23    MOV   A,[X+35]
    1E79: 08       PUSH  A
    1E7A: 7C 25 DB LCALL 0x25DB
    1E7D: 18       POP   A
    1E7E: 54 39    MOV   [X+57],A
    1E80: 18       POP   A
    1E81: 54 38    MOV   [X+56],A
    1E83: 18       POP   A
    1E84: 54 37    MOV   [X+55],A
    1E86: 18       POP   A
    1E87: 54 36    MOV   [X+54],A
    1E89: 38 FC    ADD   SP,0xFC
(0358) 			accuracy = n_correct * 1.0 / n_predictions;
    1E8B: 52 18    MOV   A,[X+24]
    1E8D: 53 86    MOV   [__r3],A
    1E8F: 52 17    MOV   A,[X+23]
    1E91: 53 87    MOV   [__r2],A
    1E93: 47 87 80 TST   [__r2],0x80
    1E96: A0 09    JZ    0x1EA0
    1E98: 55 88 FF MOV   [__r1],0xFF
    1E9B: 55 89 FF MOV   [__r0],0xFF
    1E9E: 80 0A    JMP   0x1EA9
    1EA0: 62 D0 01 MOV   REG[0xD0],0x1
    1EA3: 55 88 00 MOV   [__r1],0x0
    1EA6: 55 89 00 MOV   [__r0],0x0
    1EA9: 62 D0 01 MOV   REG[0xD0],0x1
    1EAC: 51 89    MOV   A,[__r0]
    1EAE: 08       PUSH  A
    1EAF: 51 88    MOV   A,[__r1]
    1EB1: 08       PUSH  A
    1EB2: 51 87    MOV   A,[__r2]
    1EB4: 08       PUSH  A
    1EB5: 51 86    MOV   A,[__r3]
    1EB7: 08       PUSH  A
    1EB8: 7C 28 5F LCALL 0x285F
    1EBB: 18       POP   A
    1EBC: 53 86    MOV   [__r3],A
    1EBE: 18       POP   A
    1EBF: 53 87    MOV   [__r2],A
    1EC1: 18       POP   A
    1EC2: 53 88    MOV   [__r1],A
    1EC4: 18       POP   A
    1EC5: 53 89    MOV   [__r0],A
    1EC7: 52 25    MOV   A,[X+37]
    1EC9: 53 82    MOV   [__r7],A
    1ECB: 52 24    MOV   A,[X+36]
    1ECD: 53 83    MOV   [__r6],A
    1ECF: 47 83 80 TST   [__r6],0x80
    1ED2: A0 09    JZ    0x1EDC
    1ED4: 55 84 FF MOV   [__r5],0xFF
    1ED7: 55 85 FF MOV   [__r4],0xFF
    1EDA: 80 0A    JMP   0x1EE5
    1EDC: 62 D0 01 MOV   REG[0xD0],0x1
    1EDF: 55 84 00 MOV   [__r5],0x0
    1EE2: 55 85 00 MOV   [__r4],0x0
    1EE5: 62 D0 01 MOV   REG[0xD0],0x1
    1EE8: 51 85    MOV   A,[__r4]
    1EEA: 08       PUSH  A
    1EEB: 51 84    MOV   A,[__r5]
    1EED: 08       PUSH  A
    1EEE: 51 83    MOV   A,[__r6]
    1EF0: 08       PUSH  A
    1EF1: 51 82    MOV   A,[__r7]
    1EF3: 08       PUSH  A
    1EF4: 7C 28 5F LCALL 0x285F
    1EF7: 18       POP   A
    1EF8: 53 82    MOV   [__r7],A
    1EFA: 18       POP   A
    1EFB: 53 83    MOV   [__r6],A
    1EFD: 18       POP   A
    1EFE: 53 84    MOV   [__r5],A
    1F00: 18       POP   A
    1F01: 08       PUSH  A
    1F02: 51 84    MOV   A,[__r5]
    1F04: 08       PUSH  A
    1F05: 51 83    MOV   A,[__r6]
    1F07: 08       PUSH  A
    1F08: 51 82    MOV   A,[__r7]
    1F0A: 08       PUSH  A
    1F0B: 50 3F    MOV   A,0x3F
    1F0D: 08       PUSH  A
    1F0E: 50 80    MOV   A,0x80
    1F10: 08       PUSH  A
    1F11: 50 00    MOV   A,0x0
    1F13: 08       PUSH  A
    1F14: 08       PUSH  A
    1F15: 7C 26 BE LCALL 0x26BE
    1F18: 18       POP   A
    1F19: 53 82    MOV   [__r7],A
    1F1B: 18       POP   A
    1F1C: 53 83    MOV   [__r6],A
    1F1E: 18       POP   A
    1F1F: 53 84    MOV   [__r5],A
    1F21: 18       POP   A
    1F22: 53 85    MOV   [__r4],A
    1F24: 38 FC    ADD   SP,0xFC
    1F26: 51 89    MOV   A,[__r0]
    1F28: 08       PUSH  A
    1F29: 51 88    MOV   A,[__r1]
    1F2B: 08       PUSH  A
    1F2C: 51 87    MOV   A,[__r2]
    1F2E: 08       PUSH  A
    1F2F: 51 86    MOV   A,[__r3]
    1F31: 08       PUSH  A
    1F32: 51 85    MOV   A,[__r4]
    1F34: 08       PUSH  A
    1F35: 51 84    MOV   A,[__r5]
    1F37: 08       PUSH  A
    1F38: 51 83    MOV   A,[__r6]
    1F3A: 08       PUSH  A
    1F3B: 51 82    MOV   A,[__r7]
    1F3D: 08       PUSH  A
    1F3E: 7C 25 DB LCALL 0x25DB
    1F41: 18       POP   A
    1F42: 54 1F    MOV   [X+31],A
    1F44: 18       POP   A
    1F45: 54 1E    MOV   [X+30],A
    1F47: 18       POP   A
    1F48: 54 1D    MOV   [X+29],A
    1F4A: 18       POP   A
    1F4B: 54 1C    MOV   [X+28],A
    1F4D: 38 FC    ADD   SP,0xFC
(0359) 			
(0360) 			acc_float = (BYTE) modf(accuracy, &acc_int);
    1F4F: 5A 88    MOV   [__r1],X
    1F51: 06 88 2C ADD   [__r1],0x2C
    1F54: 50 07    MOV   A,0x7
    1F56: 08       PUSH  A
    1F57: 51 88    MOV   A,[__r1]
    1F59: 08       PUSH  A
    1F5A: 52 1C    MOV   A,[X+28]
    1F5C: 08       PUSH  A
    1F5D: 52 1D    MOV   A,[X+29]
    1F5F: 08       PUSH  A
    1F60: 52 1E    MOV   A,[X+30]
    1F62: 08       PUSH  A
    1F63: 52 1F    MOV   A,[X+31]
    1F65: 08       PUSH  A
    1F66: 7C 2F 11 LCALL _modff
    1F69: 38 FA    ADD   SP,0xFA
    1F6B: 62 D0 01 MOV   REG[0xD0],0x1
    1F6E: 50 47    MOV   A,0x47
    1F70: 08       PUSH  A
    1F71: 50 00    MOV   A,0x0
    1F73: 08       PUSH  A
    1F74: 08       PUSH  A
    1F75: 08       PUSH  A
    1F76: 51 89    MOV   A,[__r0]
    1F78: 08       PUSH  A
    1F79: 51 88    MOV   A,[__r1]
    1F7B: 08       PUSH  A
    1F7C: 51 87    MOV   A,[__r2]
    1F7E: 08       PUSH  A
    1F7F: 51 86    MOV   A,[__r3]
    1F81: 08       PUSH  A
    1F82: 7C 25 7E LCALL 0x257E
    1F85: 38 F8    ADD   SP,0xF8
    1F87: 39 FF    CMP   A,0xFF
    1F89: A0 47    JZ    0x1FD1
    1F8B: 50 47    MOV   A,0x47
    1F8D: 08       PUSH  A
    1F8E: 50 00    MOV   A,0x0
    1F90: 08       PUSH  A
    1F91: 08       PUSH  A
    1F92: 08       PUSH  A
    1F93: 51 89    MOV   A,[__r0]
    1F95: 08       PUSH  A
    1F96: 51 88    MOV   A,[__r1]
    1F98: 08       PUSH  A
    1F99: 51 87    MOV   A,[__r2]
    1F9B: 08       PUSH  A
    1F9C: 51 86    MOV   A,[__r3]
    1F9E: 08       PUSH  A
    1F9F: 7C 27 E8 LCALL 0x27E8
    1FA2: 18       POP   A
    1FA3: 53 82    MOV   [__r7],A
    1FA5: 18       POP   A
    1FA6: 53 83    MOV   [__r6],A
    1FA8: 18       POP   A
    1FA9: 53 84    MOV   [__r5],A
    1FAB: 18       POP   A
    1FAC: 38 FC    ADD   SP,0xFC
    1FAE: 08       PUSH  A
    1FAF: 51 84    MOV   A,[__r5]
    1FB1: 08       PUSH  A
    1FB2: 51 83    MOV   A,[__r6]
    1FB4: 08       PUSH  A
    1FB5: 51 82    MOV   A,[__r7]
    1FB7: 08       PUSH  A
    1FB8: 7C 23 6D LCALL 0x236D
    1FBB: 18       POP   A
    1FBC: 53 84    MOV   [__r5],A
    1FBE: 18       POP   A
    1FBF: 53 85    MOV   [__r4],A
    1FC1: 38 FE    ADD   SP,0xFE
    1FC3: 51 84    MOV   A,[__r5]
    1FC5: 01 00    ADD   A,0x0
    1FC7: 54 40    MOV   [X+64],A
    1FC9: 51 85    MOV   A,[__r4]
    1FCB: 09 80    ADC   A,0x80
    1FCD: 54 3F    MOV   [X+63],A
    1FCF: 80 23    JMP   0x1FF3
    1FD1: 62 D0 01 MOV   REG[0xD0],0x1
    1FD4: 51 89    MOV   A,[__r0]
    1FD6: 08       PUSH  A
    1FD7: 51 88    MOV   A,[__r1]
    1FD9: 08       PUSH  A
    1FDA: 51 87    MOV   A,[__r2]
    1FDC: 08       PUSH  A
    1FDD: 51 86    MOV   A,[__r3]
    1FDF: 08       PUSH  A
    1FE0: 7C 23 6D LCALL 0x236D
    1FE3: 18       POP   A
    1FE4: 53 88    MOV   [__r1],A
    1FE6: 18       POP   A
    1FE7: 53 89    MOV   [__r0],A
    1FE9: 38 FE    ADD   SP,0xFE
    1FEB: 51 88    MOV   A,[__r1]
    1FED: 54 40    MOV   [X+64],A
    1FEF: 51 89    MOV   A,[__r0]
    1FF1: 54 3F    MOV   [X+63],A
    1FF3: 62 D0 01 MOV   REG[0xD0],0x1
    1FF6: 52 40    MOV   A,[X+64]
    1FF8: 54 30    MOV   [X+48],A
(0361) 			mae_float = (BYTE) modf(accuracy, &mae_int);
    1FFA: 5A 88    MOV   [__r1],X
    1FFC: 06 88 31 ADD   [__r1],0x31
    1FFF: 50 07    MOV   A,0x7
    2001: 08       PUSH  A
    2002: 51 88    MOV   A,[__r1]
    2004: 08       PUSH  A
    2005: 52 1C    MOV   A,[X+28]
    2007: 08       PUSH  A
    2008: 52 1D    MOV   A,[X+29]
    200A: 08       PUSH  A
    200B: 52 1E    MOV   A,[X+30]
    200D: 08       PUSH  A
    200E: 52 1F    MOV   A,[X+31]
    2010: 08       PUSH  A
    2011: 7C 2F 11 LCALL _modff
    2014: 38 FA    ADD   SP,0xFA
    2016: 62 D0 01 MOV   REG[0xD0],0x1
    2019: 50 47    MOV   A,0x47
    201B: 08       PUSH  A
    201C: 50 00    MOV   A,0x0
    201E: 08       PUSH  A
    201F: 08       PUSH  A
    2020: 08       PUSH  A
    2021: 51 89    MOV   A,[__r0]
    2023: 08       PUSH  A
    2024: 51 88    MOV   A,[__r1]
    2026: 08       PUSH  A
    2027: 51 87    MOV   A,[__r2]
    2029: 08       PUSH  A
    202A: 51 86    MOV   A,[__r3]
    202C: 08       PUSH  A
    202D: 7C 25 7E LCALL 0x257E
    2030: 38 F8    ADD   SP,0xF8
    2032: 39 FF    CMP   A,0xFF
    2034: A0 47    JZ    0x207C
    2036: 50 47    MOV   A,0x47
    2038: 08       PUSH  A
    2039: 50 00    MOV   A,0x0
    203B: 08       PUSH  A
    203C: 08       PUSH  A
    203D: 08       PUSH  A
    203E: 51 89    MOV   A,[__r0]
    2040: 08       PUSH  A
    2041: 51 88    MOV   A,[__r1]
    2043: 08       PUSH  A
    2044: 51 87    MOV   A,[__r2]
    2046: 08       PUSH  A
    2047: 51 86    MOV   A,[__r3]
    2049: 08       PUSH  A
    204A: 7C 27 E8 LCALL 0x27E8
    204D: 18       POP   A
    204E: 53 82    MOV   [__r7],A
    2050: 18       POP   A
    2051: 53 83    MOV   [__r6],A
    2053: 18       POP   A
    2054: 53 84    MOV   [__r5],A
    2056: 18       POP   A
    2057: 38 FC    ADD   SP,0xFC
    2059: 08       PUSH  A
    205A: 51 84    MOV   A,[__r5]
    205C: 08       PUSH  A
    205D: 51 83    MOV   A,[__r6]
    205F: 08       PUSH  A
    2060: 51 82    MOV   A,[__r7]
    2062: 08       PUSH  A
    2063: 7C 23 6D LCALL 0x236D
    2066: 18       POP   A
    2067: 53 84    MOV   [__r5],A
    2069: 18       POP   A
    206A: 53 85    MOV   [__r4],A
    206C: 38 FE    ADD   SP,0xFE
    206E: 51 84    MOV   A,[__r5]
    2070: 01 00    ADD   A,0x0
    2072: 54 42    MOV   [X+66],A
    2074: 51 85    MOV   A,[__r4]
    2076: 09 80    ADC   A,0x80
    2078: 54 41    MOV   [X+65],A
    207A: 80 23    JMP   0x209E
    207C: 62 D0 01 MOV   REG[0xD0],0x1
    207F: 51 89    MOV   A,[__r0]
    2081: 08       PUSH  A
    2082: 51 88    MOV   A,[__r1]
    2084: 08       PUSH  A
    2085: 51 87    MOV   A,[__r2]
    2087: 08       PUSH  A
    2088: 51 86    MOV   A,[__r3]
    208A: 08       PUSH  A
    208B: 7C 23 6D LCALL 0x236D
    208E: 18       POP   A
    208F: 53 88    MOV   [__r1],A
    2091: 18       POP   A
    2092: 53 89    MOV   [__r0],A
    2094: 38 FE    ADD   SP,0xFE
    2096: 51 88    MOV   A,[__r1]
    2098: 54 42    MOV   [X+66],A
    209A: 51 89    MOV   A,[__r0]
    209C: 54 41    MOV   [X+65],A
    209E: 62 D0 01 MOV   REG[0xD0],0x1
    20A1: 52 42    MOV   A,[X+66]
    20A3: 54 35    MOV   [X+53],A
(0362) 			
(0363) 			LCD_Position(0,0);
    20A5: 10       PUSH  X
    20A6: 50 00    MOV   A,0x0
    20A8: 57 00    MOV   X,0x0
    20AA: 7C 0A 31 LCALL _LCD_Position
    20AD: 20       POP   X
(0364) 			LCD_PrString(clear_screen);		
    20AE: 62 D0 01 MOV   REG[0xD0],0x1
    20B1: 5A 88    MOV   [__r1],X
    20B3: 06 88 02 ADD   [__r1],0x2
    20B6: 10       PUSH  X
    20B7: 50 07    MOV   A,0x7
    20B9: 08       PUSH  A
    20BA: 51 88    MOV   A,[__r1]
    20BC: 5C       MOV   X,A
    20BD: 18       POP   A
    20BE: 7C 08 E8 LCALL _LCD_PrString
(0365) 			LCD_Position(1,0);
    20C1: 57 00    MOV   X,0x0
    20C3: 50 01    MOV   A,0x1
    20C5: 7C 0A 31 LCALL _LCD_Position
    20C8: 20       POP   X
(0366) 			LCD_PrString(clear_screen);
    20C9: 62 D0 01 MOV   REG[0xD0],0x1
    20CC: 5A 88    MOV   [__r1],X
    20CE: 06 88 02 ADD   [__r1],0x2
    20D1: 10       PUSH  X
    20D2: 50 07    MOV   A,0x7
    20D4: 08       PUSH  A
    20D5: 51 88    MOV   A,[__r1]
    20D7: 5C       MOV   X,A
    20D8: 18       POP   A
    20D9: 7C 08 E8 LCALL _LCD_PrString
(0367) 			
(0368) 			LCD_Position(0,0);
    20DC: 50 00    MOV   A,0x0
    20DE: 57 00    MOV   X,0x0
    20E0: 7C 0A 31 LCALL _LCD_Position
(0369) 			LCD_PrCString("Ep:");
    20E3: 50 01    MOV   A,0x1
    20E5: 08       PUSH  A
    20E6: 50 C9    MOV   A,0xC9
    20E8: 5C       MOV   X,A
    20E9: 18       POP   A
    20EA: 7C 08 AC LCALL _LCD_PrCString
(0370) 			LCD_Position(0,3);
    20ED: 57 03    MOV   X,0x3
    20EF: 50 00    MOV   A,0x0
    20F1: 7C 0A 31 LCALL _LCD_Position
    20F4: 20       POP   X
(0371) 			LCD_PrHexByte(n_epochs + 1);
    20F5: 62 D0 01 MOV   REG[0xD0],0x1
    20F8: 52 14    MOV   A,[X+20]
    20FA: 01 01    ADD   A,0x1
    20FC: 10       PUSH  X
    20FD: 7C 08 CE LCALL _LCD_PrHexByte
(0372) 			
(0373) 			LCD_Position(0,7);
    2100: 57 07    MOV   X,0x7
    2102: 50 00    MOV   A,0x0
    2104: 7C 0A 31 LCALL _LCD_Position
(0374) 			LCD_PrCString("Ac:");
    2107: 50 01    MOV   A,0x1
    2109: 08       PUSH  A
    210A: 50 C5    MOV   A,0xC5
    210C: 5C       MOV   X,A
    210D: 18       POP   A
    210E: 7C 08 AC LCALL _LCD_PrCString
(0375) 			LCD_Position(0,10);
    2111: 57 0A    MOV   X,0xA
    2113: 50 00    MOV   A,0x0
    2115: 7C 0A 31 LCALL _LCD_Position
    2118: 20       POP   X
(0376) 			LCD_PrHexByte((BYTE)acc_int);
    2119: 50 47    MOV   A,0x47
    211B: 08       PUSH  A
    211C: 50 00    MOV   A,0x0
    211E: 08       PUSH  A
    211F: 08       PUSH  A
    2120: 08       PUSH  A
    2121: 52 2C    MOV   A,[X+44]
    2123: 08       PUSH  A
    2124: 52 2D    MOV   A,[X+45]
    2126: 08       PUSH  A
    2127: 52 2E    MOV   A,[X+46]
    2129: 08       PUSH  A
    212A: 52 2F    MOV   A,[X+47]
    212C: 08       PUSH  A
    212D: 62 D0 01 MOV   REG[0xD0],0x1
    2130: 7C 25 7E LCALL 0x257E
    2133: 38 F8    ADD   SP,0xF8
    2135: 39 FF    CMP   A,0xFF
    2137: A0 47    JZ    0x217F
    2139: 50 47    MOV   A,0x47
    213B: 08       PUSH  A
    213C: 50 00    MOV   A,0x0
    213E: 08       PUSH  A
    213F: 08       PUSH  A
    2140: 08       PUSH  A
    2141: 52 2C    MOV   A,[X+44]
    2143: 08       PUSH  A
    2144: 52 2D    MOV   A,[X+45]
    2146: 08       PUSH  A
    2147: 52 2E    MOV   A,[X+46]
    2149: 08       PUSH  A
    214A: 52 2F    MOV   A,[X+47]
    214C: 08       PUSH  A
    214D: 7C 27 E8 LCALL 0x27E8
    2150: 18       POP   A
    2151: 53 86    MOV   [__r3],A
    2153: 18       POP   A
    2154: 53 87    MOV   [__r2],A
    2156: 18       POP   A
    2157: 53 88    MOV   [__r1],A
    2159: 18       POP   A
    215A: 38 FC    ADD   SP,0xFC
    215C: 08       PUSH  A
    215D: 51 88    MOV   A,[__r1]
    215F: 08       PUSH  A
    2160: 51 87    MOV   A,[__r2]
    2162: 08       PUSH  A
    2163: 51 86    MOV   A,[__r3]
    2165: 08       PUSH  A
    2166: 7C 23 6D LCALL 0x236D
    2169: 18       POP   A
    216A: 53 88    MOV   [__r1],A
    216C: 18       POP   A
    216D: 53 89    MOV   [__r0],A
    216F: 38 FE    ADD   SP,0xFE
    2171: 51 88    MOV   A,[__r1]
    2173: 01 00    ADD   A,0x0
    2175: 54 44    MOV   [X+68],A
    2177: 51 89    MOV   A,[__r0]
    2179: 09 80    ADC   A,0x80
    217B: 54 43    MOV   [X+67],A
    217D: 80 23    JMP   0x21A1
    217F: 62 D0 01 MOV   REG[0xD0],0x1
    2182: 52 2C    MOV   A,[X+44]
    2184: 08       PUSH  A
    2185: 52 2D    MOV   A,[X+45]
    2187: 08       PUSH  A
    2188: 52 2E    MOV   A,[X+46]
    218A: 08       PUSH  A
    218B: 52 2F    MOV   A,[X+47]
    218D: 08       PUSH  A
    218E: 7C 23 6D LCALL 0x236D
    2191: 18       POP   A
    2192: 53 88    MOV   [__r1],A
    2194: 18       POP   A
    2195: 53 89    MOV   [__r0],A
    2197: 38 FE    ADD   SP,0xFE
    2199: 51 88    MOV   A,[__r1]
    219B: 54 44    MOV   [X+68],A
    219D: 51 89    MOV   A,[__r0]
    219F: 54 43    MOV   [X+67],A
    21A1: 62 D0 01 MOV   REG[0xD0],0x1
    21A4: 52 44    MOV   A,[X+68]
    21A6: 10       PUSH  X
    21A7: 7C 08 CE LCALL _LCD_PrHexByte
(0377) 			LCD_Position(0,12);
    21AA: 57 0C    MOV   X,0xC
    21AC: 50 00    MOV   A,0x0
    21AE: 7C 0A 31 LCALL _LCD_Position
(0378) 			LCD_PrCString(".");
    21B1: 50 01    MOV   A,0x1
    21B3: 08       PUSH  A
    21B4: 50 C3    MOV   A,0xC3
    21B6: 5C       MOV   X,A
    21B7: 18       POP   A
    21B8: 7C 08 AC LCALL _LCD_PrCString
(0379) 			LCD_Position(0,13);
    21BB: 57 0D    MOV   X,0xD
    21BD: 50 00    MOV   A,0x0
    21BF: 7C 0A 31 LCALL _LCD_Position
    21C2: 20       POP   X
(0380) 			LCD_PrHexByte(acc_float);
    21C3: 10       PUSH  X
    21C4: 52 30    MOV   A,[X+48]
    21C6: 7C 08 CE LCALL _LCD_PrHexByte
(0381) 			
(0382) 			LCD_Position(1,0);
    21C9: 57 00    MOV   X,0x0
    21CB: 50 01    MOV   A,0x1
    21CD: 7C 0A 31 LCALL _LCD_Position
(0383) 			LCD_PrCString("MAE:");
    21D0: 50 01    MOV   A,0x1
    21D2: 08       PUSH  A
    21D3: 50 BE    MOV   A,0xBE
    21D5: 5C       MOV   X,A
    21D6: 18       POP   A
    21D7: 7C 08 AC LCALL _LCD_PrCString
(0384) 			LCD_Position(1,4);
    21DA: 57 04    MOV   X,0x4
    21DC: 50 01    MOV   A,0x1
    21DE: 7C 0A 31 LCALL _LCD_Position
    21E1: 20       POP   X
(0385) 			LCD_PrHexByte((BYTE)mae_int);
    21E2: 50 47    MOV   A,0x47
    21E4: 08       PUSH  A
    21E5: 50 00    MOV   A,0x0
    21E7: 08       PUSH  A
    21E8: 08       PUSH  A
    21E9: 08       PUSH  A
    21EA: 52 31    MOV   A,[X+49]
    21EC: 08       PUSH  A
    21ED: 52 32    MOV   A,[X+50]
    21EF: 08       PUSH  A
    21F0: 52 33    MOV   A,[X+51]
    21F2: 08       PUSH  A
    21F3: 52 34    MOV   A,[X+52]
    21F5: 08       PUSH  A
    21F6: 62 D0 01 MOV   REG[0xD0],0x1
    21F9: 7C 25 7E LCALL 0x257E
    21FC: 38 F8    ADD   SP,0xF8
    21FE: 39 FF    CMP   A,0xFF
    2200: A0 47    JZ    0x2248
    2202: 50 47    MOV   A,0x47
    2204: 08       PUSH  A
    2205: 50 00    MOV   A,0x0
    2207: 08       PUSH  A
    2208: 08       PUSH  A
    2209: 08       PUSH  A
    220A: 52 31    MOV   A,[X+49]
    220C: 08       PUSH  A
    220D: 52 32    MOV   A,[X+50]
    220F: 08       PUSH  A
    2210: 52 33    MOV   A,[X+51]
    2212: 08       PUSH  A
    2213: 52 34    MOV   A,[X+52]
    2215: 08       PUSH  A
    2216: 7C 27 E8 LCALL 0x27E8
    2219: 18       POP   A
    221A: 53 86    MOV   [__r3],A
    221C: 18       POP   A
    221D: 53 87    MOV   [__r2],A
    221F: 18       POP   A
    2220: 53 88    MOV   [__r1],A
    2222: 18       POP   A
    2223: 38 FC    ADD   SP,0xFC
    2225: 08       PUSH  A
    2226: 51 88    MOV   A,[__r1]
    2228: 08       PUSH  A
    2229: 51 87    MOV   A,[__r2]
    222B: 08       PUSH  A
    222C: 51 86    MOV   A,[__r3]
    222E: 08       PUSH  A
    222F: 7C 23 6D LCALL 0x236D
    2232: 18       POP   A
    2233: 53 88    MOV   [__r1],A
    2235: 18       POP   A
    2236: 53 89    MOV   [__r0],A
    2238: 38 FE    ADD   SP,0xFE
    223A: 51 88    MOV   A,[__r1]
    223C: 01 00    ADD   A,0x0
    223E: 54 46    MOV   [X+70],A
    2240: 51 89    MOV   A,[__r0]
    2242: 09 80    ADC   A,0x80
    2244: 54 45    MOV   [X+69],A
    2246: 80 23    JMP   0x226A
    2248: 62 D0 01 MOV   REG[0xD0],0x1
    224B: 52 31    MOV   A,[X+49]
    224D: 08       PUSH  A
    224E: 52 32    MOV   A,[X+50]
    2250: 08       PUSH  A
    2251: 52 33    MOV   A,[X+51]
    2253: 08       PUSH  A
    2254: 52 34    MOV   A,[X+52]
    2256: 08       PUSH  A
    2257: 7C 23 6D LCALL 0x236D
    225A: 18       POP   A
    225B: 53 88    MOV   [__r1],A
    225D: 18       POP   A
    225E: 53 89    MOV   [__r0],A
    2260: 38 FE    ADD   SP,0xFE
    2262: 51 88    MOV   A,[__r1]
    2264: 54 46    MOV   [X+70],A
    2266: 51 89    MOV   A,[__r0]
    2268: 54 45    MOV   [X+69],A
    226A: 62 D0 01 MOV   REG[0xD0],0x1
    226D: 52 46    MOV   A,[X+70]
    226F: 10       PUSH  X
    2270: 7C 08 CE LCALL _LCD_PrHexByte
(0386) 			LCD_Position(1,6);
    2273: 57 06    MOV   X,0x6
    2275: 50 01    MOV   A,0x1
    2277: 7C 0A 31 LCALL _LCD_Position
(0387) 			LCD_PrCString(".");
    227A: 50 01    MOV   A,0x1
    227C: 08       PUSH  A
    227D: 50 C3    MOV   A,0xC3
    227F: 5C       MOV   X,A
    2280: 18       POP   A
    2281: 7C 08 AC LCALL _LCD_PrCString
(0388) 			LCD_Position(1,7);
    2284: 57 07    MOV   X,0x7
    2286: 50 01    MOV   A,0x1
    2288: 7C 0A 31 LCALL _LCD_Position
    228B: 20       POP   X
(0389) 			LCD_PrHexByte(mae_float);
    228C: 10       PUSH  X
    228D: 52 35    MOV   A,[X+53]
    228F: 7C 08 CE LCALL _LCD_PrHexByte
    2292: 20       POP   X
(0390) 			
(0391) 			wait(2000);
    2293: 50 07    MOV   A,0x7
    2295: 08       PUSH  A
    2296: 50 D0    MOV   A,0xD0
    2298: 08       PUSH  A
    2299: 7C 0F 7B LCALL __UserModules_end|__text_start|_wait|_wait
    229C: 38 FE    ADD   SP,0xFE
(0392) 			iter = 0;
    229E: 56 16 00 MOV   [X+22],0x0
    22A1: 56 15 00 MOV   [X+21],0x0
(0393) 			n_correct = 0;
    22A4: 56 25 00 MOV   [X+37],0x0
    22A7: 56 24 00 MOV   [X+36],0x0
(0394) 			n_predictions = 0;
    22AA: 56 18 00 MOV   [X+24],0x0
    22AD: 56 17 00 MOV   [X+23],0x0
(0395) 			sae = 0;
    22B0: 56 20 00 MOV   [X+32],0x0
    22B3: 56 21 00 MOV   [X+33],0x0
    22B6: 56 22 00 MOV   [X+34],0x0
    22B9: 56 23 00 MOV   [X+35],0x0
(0396) 			n_epochs++;
    22BC: 77 14    INC   [X+20]
(0397) 		}
(0398) 		
(0399) 	}
    22BE: 3D 14 03 CMP   [X+20],0x3
    22C1: D0 04    JNC   0x22C6
    22C3: 7D 19 D7 LJMP  0x19D7
(0400) 		LCD_Position(0,0);
    22C6: 10       PUSH  X
    22C7: 50 00    MOV   A,0x0
    22C9: 57 00    MOV   X,0x0
    22CB: 7C 0A 31 LCALL _LCD_Position
    22CE: 20       POP   X
(0401) 		LCD_PrString(clear_screen);		
    22CF: 62 D0 01 MOV   REG[0xD0],0x1
    22D2: 5A 88    MOV   [__r1],X
    22D4: 06 88 02 ADD   [__r1],0x2
    22D7: 10       PUSH  X
    22D8: 50 07    MOV   A,0x7
    22DA: 08       PUSH  A
    22DB: 51 88    MOV   A,[__r1]
    22DD: 5C       MOV   X,A
    22DE: 18       POP   A
    22DF: 7C 08 E8 LCALL _LCD_PrString
(0402) 		LCD_Position(1,0);
    22E2: 57 00    MOV   X,0x0
    22E4: 50 01    MOV   A,0x1
    22E6: 7C 0A 31 LCALL _LCD_Position
    22E9: 20       POP   X
(0403) 		LCD_PrString(clear_screen);
    22EA: 62 D0 01 MOV   REG[0xD0],0x1
    22ED: 5A 88    MOV   [__r1],X
    22EF: 06 88 02 ADD   [__r1],0x2
    22F2: 10       PUSH  X
    22F3: 50 07    MOV   A,0x7
    22F5: 08       PUSH  A
    22F6: 51 88    MOV   A,[__r1]
    22F8: 5C       MOV   X,A
    22F9: 18       POP   A
    22FA: 7C 08 E8 LCALL _LCD_PrString
(0404) 		LCD_Position(0,0);
    22FD: 50 00    MOV   A,0x0
    22FF: 57 00    MOV   X,0x0
    2301: 7C 0A 31 LCALL _LCD_Position
(0405) 		LCD_PrCString("Bye Bye:");
    2304: 50 01    MOV   A,0x1
(0406) 	
(0407) }
(0408) 
(0409) //		LCD_Position(1,0);
(0410) //		LCD_PrHexByte(light_bin);		
(0411) //		LCD_Position(1,3);
(0412) //		LCD_PrHexByte(temp_bin);
(0413) //		LCD_Position(1,6);
(0414) //		LCD_PrHexByte(tx_word);
(0415) //		LCD_Position(1,9);
(0416) //		LCD_PrHexByte(rx_word);
(0417) //		LCD_Position(1,12);
(0418) //		LCD_PrHexByte(inferred_word);
(0419) 	    2306: 08       PUSH  A
    2307: 50 B5    MOV   A,0xB5
    2309: 5C       MOV   X,A
    230A: 18       POP   A
    230B: 7C 08 AC LCALL _LCD_PrCString
    230E: 20       POP   X
    230F: 38 B9    ADD   SP,0xB9
    2311: 20       POP   X
    2312: 8F FF    JMP   0x2312
__plcall:
    2908: 53 7D    MOV   [__rX],A
    290A: 28       ROMX  
    290B: 08       PUSH  A
    290C: 51 7D    MOV   A,[__rX]
    290E: 75       INC   X
    290F: 09 00    ADC   A,0x0
    2911: 28       ROMX  
    2912: 08       PUSH  A
    2913: 7F       RET   
_itoa:
    2914: 10       PUSH  X
    2915: 4F       MOV   X,SP
    2916: 38 09    ADD   SP,0x9
    2918: 52 FA    MOV   A,[X-6]
    291A: 54 03    MOV   [X+3],A
    291C: 52 F9    MOV   A,[X-7]
    291E: 54 02    MOV   [X+2],A
    2920: 3D F9 00 CMP   [X-7],0x0
    2923: B0 2F    JNZ   0x2953
    2925: 3D FA 00 CMP   [X-6],0x0
    2928: B0 2A    JNZ   0x2953
    292A: 62 D0 01 MOV   REG[0xD0],0x1
    292D: 52 FC    MOV   A,[X-4]
    292F: 53 88    MOV   [__r1],A
    2931: 52 FB    MOV   A,[X-5]
    2933: 60 D5    MOV   REG[0xD5],A
    2935: 50 30    MOV   A,0x30
    2937: 3F 88    MVI   [__r1],A
    2939: 52 FC    MOV   A,[X-4]
    293B: 01 01    ADD   A,0x1
    293D: 53 88    MOV   [__r1],A
    293F: 52 FB    MOV   A,[X-5]
    2941: 09 00    ADC   A,0x0
    2943: 60 D5    MOV   REG[0xD5],A
    2945: 50 00    MOV   A,0x0
    2947: 3F 88    MVI   [__r1],A
    2949: 52 FC    MOV   A,[X-4]
    294B: 53 88    MOV   [__r1],A
    294D: 52 FB    MOV   A,[X-5]
    294F: 53 89    MOV   [__r0],A
    2951: 81 97    JMP   0x2AE9
    2953: 52 FA    MOV   A,[X-6]
    2955: 11 00    SUB   A,0x0
    2957: 52 F9    MOV   A,[X-7]
    2959: 31 80    XOR   A,0x80
    295B: 19 80    SBB   A,0x80
    295D: D0 29    JNC   0x2987
    295F: 3D F7 00 CMP   [X-9],0x0
    2962: B0 24    JNZ   0x2987
    2964: 3D F8 0A CMP   [X-8],0xA
    2967: B0 1F    JNZ   0x2987
    2969: 56 06 01 MOV   [X+6],0x1
    296C: 62 D0 01 MOV   REG[0xD0],0x1
    296F: 52 03    MOV   A,[X+3]
    2971: 73       CPL   A
    2972: 53 88    MOV   [__r1],A
    2974: 52 02    MOV   A,[X+2]
    2976: 73       CPL   A
    2977: 53 89    MOV   [__r0],A
    2979: 51 88    MOV   A,[__r1]
    297B: 01 01    ADD   A,0x1
    297D: 54 03    MOV   [X+3],A
    297F: 51 89    MOV   A,[__r0]
    2981: 09 00    ADC   A,0x0
    2983: 54 02    MOV   [X+2],A
    2985: 80 04    JMP   0x298A
    2987: 56 06 00 MOV   [X+6],0x0
    298A: 52 FC    MOV   A,[X-4]
    298C: 54 01    MOV   [X+1],A
    298E: 52 FB    MOV   A,[X-5]
    2990: 54 00    MOV   [X+0],A
    2992: 62 D0 01 MOV   REG[0xD0],0x1
    2995: 52 F7    MOV   A,[X-9]
    2997: 08       PUSH  A
    2998: 52 F8    MOV   A,[X-8]
    299A: 08       PUSH  A
    299B: 52 02    MOV   A,[X+2]
    299D: 08       PUSH  A
    299E: 52 03    MOV   A,[X+3]
    29A0: 08       PUSH  A
    29A1: 7C 23 62 LCALL 0x2362
    29A4: 38 FE    ADD   SP,0xFE
    29A6: 18       POP   A
    29A7: 53 88    MOV   [__r1],A
    29A9: 18       POP   A
    29AA: 53 89    MOV   [__r0],A
    29AC: 51 88    MOV   A,[__r1]
    29AE: 54 08    MOV   [X+8],A
    29B0: 51 89    MOV   A,[__r0]
    29B2: 54 07    MOV   [X+7],A
    29B4: 50 09    MOV   A,0x9
    29B6: 13 08    SUB   A,[X+8]
    29B8: 52 07    MOV   A,[X+7]
    29BA: 31 80    XOR   A,0x80
    29BC: 53 7D    MOV   [__rX],A
    29BE: 50 80    MOV   A,0x80
    29C0: 1A 7D    SBB   A,[__rX]
    29C2: C0 28    JC    0x29EB
    29C4: 62 D0 01 MOV   REG[0xD0],0x1
    29C7: 52 01    MOV   A,[X+1]
    29C9: 53 88    MOV   [__r1],A
    29CB: 52 00    MOV   A,[X+0]
    29CD: 53 89    MOV   [__r0],A
    29CF: 51 88    MOV   A,[__r1]
    29D1: 01 01    ADD   A,0x1
    29D3: 54 01    MOV   [X+1],A
    29D5: 51 89    MOV   A,[__r0]
    29D7: 09 00    ADC   A,0x0
    29D9: 54 00    MOV   [X+0],A
    29DB: 52 08    MOV   A,[X+8]
    29DD: 01 30    ADD   A,0x30
    29DF: 53 87    MOV   [__r2],A
    29E1: 51 89    MOV   A,[__r0]
    29E3: 60 D5    MOV   REG[0xD5],A
    29E5: 51 87    MOV   A,[__r2]
    29E7: 3F 88    MVI   [__r1],A
    29E9: 80 26    JMP   0x2A10
    29EB: 62 D0 01 MOV   REG[0xD0],0x1
    29EE: 52 01    MOV   A,[X+1]
    29F0: 53 88    MOV   [__r1],A
    29F2: 52 00    MOV   A,[X+0]
    29F4: 53 89    MOV   [__r0],A
    29F6: 51 88    MOV   A,[__r1]
    29F8: 01 01    ADD   A,0x1
    29FA: 54 01    MOV   [X+1],A
    29FC: 51 89    MOV   A,[__r0]
    29FE: 09 00    ADC   A,0x0
    2A00: 54 00    MOV   [X+0],A
    2A02: 52 08    MOV   A,[X+8]
    2A04: 01 57    ADD   A,0x57
    2A06: 53 87    MOV   [__r2],A
    2A08: 51 89    MOV   A,[__r0]
    2A0A: 60 D5    MOV   REG[0xD5],A
    2A0C: 51 87    MOV   A,[__r2]
    2A0E: 3F 88    MVI   [__r1],A
    2A10: 52 F7    MOV   A,[X-9]
    2A12: 08       PUSH  A
    2A13: 52 F8    MOV   A,[X-8]
    2A15: 08       PUSH  A
    2A16: 52 02    MOV   A,[X+2]
    2A18: 08       PUSH  A
    2A19: 52 03    MOV   A,[X+3]
    2A1B: 08       PUSH  A
    2A1C: 62 D0 01 MOV   REG[0xD0],0x1
    2A1F: 7C 23 62 LCALL 0x2362
    2A22: 18       POP   A
    2A23: 54 03    MOV   [X+3],A
    2A25: 18       POP   A
    2A26: 54 02    MOV   [X+2],A
    2A28: 38 FE    ADD   SP,0xFE
    2A2A: 3D 02 00 CMP   [X+2],0x0
    2A2D: BF 64    JNZ   0x2992
    2A2F: 3D 03 00 CMP   [X+3],0x0
    2A32: BF 5F    JNZ   0x2992
    2A34: 3D 06 00 CMP   [X+6],0x0
    2A37: A0 20    JZ    0x2A58
    2A39: 62 D0 01 MOV   REG[0xD0],0x1
    2A3C: 52 01    MOV   A,[X+1]
    2A3E: 53 88    MOV   [__r1],A
    2A40: 52 00    MOV   A,[X+0]
    2A42: 53 89    MOV   [__r0],A
    2A44: 51 88    MOV   A,[__r1]
    2A46: 01 01    ADD   A,0x1
    2A48: 54 01    MOV   [X+1],A
    2A4A: 51 89    MOV   A,[__r0]
    2A4C: 09 00    ADC   A,0x0
    2A4E: 54 00    MOV   [X+0],A
    2A50: 51 89    MOV   A,[__r0]
    2A52: 60 D5    MOV   REG[0xD5],A
    2A54: 50 2D    MOV   A,0x2D
    2A56: 3F 88    MVI   [__r1],A
    2A58: 62 D0 01 MOV   REG[0xD0],0x1
    2A5B: 52 01    MOV   A,[X+1]
    2A5D: 53 88    MOV   [__r1],A
    2A5F: 52 00    MOV   A,[X+0]
    2A61: 53 89    MOV   [__r0],A
    2A63: 51 88    MOV   A,[__r1]
    2A65: 01 FF    ADD   A,0xFF
    2A67: 54 01    MOV   [X+1],A
    2A69: 51 89    MOV   A,[__r0]
    2A6B: 09 FF    ADC   A,0xFF
    2A6D: 54 00    MOV   [X+0],A
    2A6F: 51 89    MOV   A,[__r0]
    2A71: 60 D5    MOV   REG[0xD5],A
    2A73: 50 00    MOV   A,0x0
    2A75: 3F 88    MVI   [__r1],A
    2A77: 52 FC    MOV   A,[X-4]
    2A79: 54 05    MOV   [X+5],A
    2A7B: 52 FB    MOV   A,[X-5]
    2A7D: 54 04    MOV   [X+4],A
    2A7F: 80 54    JMP   0x2AD4
    2A81: 62 D0 01 MOV   REG[0xD0],0x1
    2A84: 52 05    MOV   A,[X+5]
    2A86: 53 88    MOV   [__r1],A
    2A88: 52 04    MOV   A,[X+4]
    2A8A: 60 D4    MOV   REG[0xD4],A
    2A8C: 3E 88    MVI   A,[__r1]
    2A8E: 54 06    MOV   [X+6],A
    2A90: 52 05    MOV   A,[X+5]
    2A92: 53 88    MOV   [__r1],A
    2A94: 52 04    MOV   A,[X+4]
    2A96: 53 89    MOV   [__r0],A
    2A98: 51 88    MOV   A,[__r1]
    2A9A: 01 01    ADD   A,0x1
    2A9C: 54 05    MOV   [X+5],A
    2A9E: 51 89    MOV   A,[__r0]
    2AA0: 09 00    ADC   A,0x0
    2AA2: 54 04    MOV   [X+4],A
    2AA4: 52 01    MOV   A,[X+1]
    2AA6: 53 86    MOV   [__r3],A
    2AA8: 52 00    MOV   A,[X+0]
    2AAA: 60 D4    MOV   REG[0xD4],A
    2AAC: 3E 86    MVI   A,[__r3]
    2AAE: 53 87    MOV   [__r2],A
    2AB0: 51 89    MOV   A,[__r0]
    2AB2: 60 D5    MOV   REG[0xD5],A
    2AB4: 51 87    MOV   A,[__r2]
    2AB6: 3F 88    MVI   [__r1],A
    2AB8: 52 01    MOV   A,[X+1]
    2ABA: 53 88    MOV   [__r1],A
    2ABC: 52 00    MOV   A,[X+0]
    2ABE: 53 89    MOV   [__r0],A
    2AC0: 51 88    MOV   A,[__r1]
    2AC2: 01 FF    ADD   A,0xFF
    2AC4: 54 01    MOV   [X+1],A
    2AC6: 51 89    MOV   A,[__r0]
    2AC8: 09 FF    ADC   A,0xFF
    2ACA: 54 00    MOV   [X+0],A
    2ACC: 51 89    MOV   A,[__r0]
    2ACE: 60 D5    MOV   REG[0xD5],A
    2AD0: 52 06    MOV   A,[X+6]
    2AD2: 3F 88    MVI   [__r1],A
    2AD4: 52 05    MOV   A,[X+5]
    2AD6: 13 01    SUB   A,[X+1]
    2AD8: 52 04    MOV   A,[X+4]
    2ADA: 1B 00    SBB   A,[X+0]
    2ADC: CF A4    JC    0x2A81
    2ADE: 62 D0 01 MOV   REG[0xD0],0x1
    2AE1: 52 FC    MOV   A,[X-4]
    2AE3: 53 88    MOV   [__r1],A
    2AE5: 52 FB    MOV   A,[X-5]
    2AE7: 53 89    MOV   [__r0],A
    2AE9: 38 F7    ADD   SP,0xF7
    2AEB: 20       POP   X
    2AEC: 7F       RET   
_utoa:
    2AED: 10       PUSH  X
    2AEE: 4F       MOV   X,SP
    2AEF: 38 07    ADD   SP,0x7
    2AF1: 52 FC    MOV   A,[X-4]
    2AF3: 54 01    MOV   [X+1],A
    2AF5: 52 FB    MOV   A,[X-5]
    2AF7: 54 00    MOV   [X+0],A
    2AF9: 62 D0 01 MOV   REG[0xD0],0x1
    2AFC: 52 F7    MOV   A,[X-9]
    2AFE: 08       PUSH  A
    2AFF: 52 F8    MOV   A,[X-8]
    2B01: 08       PUSH  A
    2B02: 52 F9    MOV   A,[X-7]
    2B04: 08       PUSH  A
    2B05: 52 FA    MOV   A,[X-6]
    2B07: 08       PUSH  A
    2B08: 7C 23 62 LCALL 0x2362
    2B0B: 38 FE    ADD   SP,0xFE
    2B0D: 18       POP   A
    2B0E: 53 88    MOV   [__r1],A
    2B10: 18       POP   A
    2B11: 53 89    MOV   [__r0],A
    2B13: 51 88    MOV   A,[__r1]
    2B15: 54 06    MOV   [X+6],A
    2B17: 51 89    MOV   A,[__r0]
    2B19: 54 05    MOV   [X+5],A
    2B1B: 50 09    MOV   A,0x9
    2B1D: 13 06    SUB   A,[X+6]
    2B1F: 52 05    MOV   A,[X+5]
    2B21: 31 80    XOR   A,0x80
    2B23: 53 7D    MOV   [__rX],A
    2B25: 50 80    MOV   A,0x80
    2B27: 1A 7D    SBB   A,[__rX]
    2B29: C0 28    JC    0x2B52
    2B2B: 62 D0 01 MOV   REG[0xD0],0x1
    2B2E: 52 01    MOV   A,[X+1]
    2B30: 53 88    MOV   [__r1],A
    2B32: 52 00    MOV   A,[X+0]
    2B34: 53 89    MOV   [__r0],A
    2B36: 51 88    MOV   A,[__r1]
    2B38: 01 01    ADD   A,0x1
    2B3A: 54 01    MOV   [X+1],A
    2B3C: 51 89    MOV   A,[__r0]
    2B3E: 09 00    ADC   A,0x0
    2B40: 54 00    MOV   [X+0],A
    2B42: 52 06    MOV   A,[X+6]
    2B44: 01 30    ADD   A,0x30
    2B46: 53 87    MOV   [__r2],A
    2B48: 51 89    MOV   A,[__r0]
    2B4A: 60 D5    MOV   REG[0xD5],A
    2B4C: 51 87    MOV   A,[__r2]
    2B4E: 3F 88    MVI   [__r1],A
    2B50: 80 26    JMP   0x2B77
    2B52: 62 D0 01 MOV   REG[0xD0],0x1
    2B55: 52 01    MOV   A,[X+1]
    2B57: 53 88    MOV   [__r1],A
    2B59: 52 00    MOV   A,[X+0]
    2B5B: 53 89    MOV   [__r0],A
    2B5D: 51 88    MOV   A,[__r1]
    2B5F: 01 01    ADD   A,0x1
    2B61: 54 01    MOV   [X+1],A
    2B63: 51 89    MOV   A,[__r0]
    2B65: 09 00    ADC   A,0x0
    2B67: 54 00    MOV   [X+0],A
    2B69: 52 06    MOV   A,[X+6]
    2B6B: 01 57    ADD   A,0x57
    2B6D: 53 87    MOV   [__r2],A
    2B6F: 51 89    MOV   A,[__r0]
    2B71: 60 D5    MOV   REG[0xD5],A
    2B73: 51 87    MOV   A,[__r2]
    2B75: 3F 88    MVI   [__r1],A
    2B77: 52 F7    MOV   A,[X-9]
    2B79: 08       PUSH  A
    2B7A: 52 F8    MOV   A,[X-8]
    2B7C: 08       PUSH  A
    2B7D: 52 F9    MOV   A,[X-7]
    2B7F: 08       PUSH  A
    2B80: 52 FA    MOV   A,[X-6]
    2B82: 08       PUSH  A
    2B83: 62 D0 01 MOV   REG[0xD0],0x1
    2B86: 7C 23 62 LCALL 0x2362
    2B89: 18       POP   A
    2B8A: 54 FA    MOV   [X-6],A
    2B8C: 18       POP   A
    2B8D: 54 F9    MOV   [X-7],A
    2B8F: 38 FE    ADD   SP,0xFE
    2B91: 3D F9 00 CMP   [X-7],0x0
    2B94: BF 64    JNZ   0x2AF9
    2B96: 3D FA 00 CMP   [X-6],0x0
    2B99: BF 5F    JNZ   0x2AF9
    2B9B: 62 D0 01 MOV   REG[0xD0],0x1
    2B9E: 52 01    MOV   A,[X+1]
    2BA0: 53 88    MOV   [__r1],A
    2BA2: 52 00    MOV   A,[X+0]
    2BA4: 53 89    MOV   [__r0],A
    2BA6: 51 88    MOV   A,[__r1]
    2BA8: 01 FF    ADD   A,0xFF
    2BAA: 54 01    MOV   [X+1],A
    2BAC: 51 89    MOV   A,[__r0]
    2BAE: 09 FF    ADC   A,0xFF
    2BB0: 54 00    MOV   [X+0],A
    2BB2: 51 89    MOV   A,[__r0]
    2BB4: 60 D5    MOV   REG[0xD5],A
    2BB6: 50 00    MOV   A,0x0
    2BB8: 3F 88    MVI   [__r1],A
    2BBA: 52 FC    MOV   A,[X-4]
    2BBC: 54 03    MOV   [X+3],A
    2BBE: 52 FB    MOV   A,[X-5]
    2BC0: 54 02    MOV   [X+2],A
    2BC2: 80 54    JMP   0x2C17
    2BC4: 62 D0 01 MOV   REG[0xD0],0x1
    2BC7: 52 03    MOV   A,[X+3]
    2BC9: 53 88    MOV   [__r1],A
    2BCB: 52 02    MOV   A,[X+2]
    2BCD: 60 D4    MOV   REG[0xD4],A
    2BCF: 3E 88    MVI   A,[__r1]
    2BD1: 54 04    MOV   [X+4],A
    2BD3: 52 03    MOV   A,[X+3]
    2BD5: 53 88    MOV   [__r1],A
    2BD7: 52 02    MOV   A,[X+2]
    2BD9: 53 89    MOV   [__r0],A
    2BDB: 51 88    MOV   A,[__r1]
    2BDD: 01 01    ADD   A,0x1
    2BDF: 54 03    MOV   [X+3],A
    2BE1: 51 89    MOV   A,[__r0]
    2BE3: 09 00    ADC   A,0x0
    2BE5: 54 02    MOV   [X+2],A
    2BE7: 52 01    MOV   A,[X+1]
    2BE9: 53 86    MOV   [__r3],A
    2BEB: 52 00    MOV   A,[X+0]
    2BED: 60 D4    MOV   REG[0xD4],A
    2BEF: 3E 86    MVI   A,[__r3]
    2BF1: 53 87    MOV   [__r2],A
    2BF3: 51 89    MOV   A,[__r0]
    2BF5: 60 D5    MOV   REG[0xD5],A
    2BF7: 51 87    MOV   A,[__r2]
    2BF9: 3F 88    MVI   [__r1],A
    2BFB: 52 01    MOV   A,[X+1]
    2BFD: 53 88    MOV   [__r1],A
    2BFF: 52 00    MOV   A,[X+0]
    2C01: 53 89    MOV   [__r0],A
    2C03: 51 88    MOV   A,[__r1]
    2C05: 01 FF    ADD   A,0xFF
    2C07: 54 01    MOV   [X+1],A
    2C09: 51 89    MOV   A,[__r0]
    2C0B: 09 FF    ADC   A,0xFF
    2C0D: 54 00    MOV   [X+0],A
    2C0F: 51 89    MOV   A,[__r0]
    2C11: 60 D5    MOV   REG[0xD5],A
    2C13: 52 04    MOV   A,[X+4]
    2C15: 3F 88    MVI   [__r1],A
    2C17: 52 03    MOV   A,[X+3]
    2C19: 13 01    SUB   A,[X+1]
    2C1B: 52 02    MOV   A,[X+2]
    2C1D: 1B 00    SBB   A,[X+0]
    2C1F: CF A4    JC    0x2BC4
    2C21: 62 D0 01 MOV   REG[0xD0],0x1
    2C24: 52 FC    MOV   A,[X-4]
    2C26: 53 88    MOV   [__r1],A
    2C28: 52 FB    MOV   A,[X-5]
    2C2A: 53 89    MOV   [__r0],A
    2C2C: 38 F9    ADD   SP,0xF9
    2C2E: 20       POP   X
    2C2F: 7F       RET   
_isdigit:
    2C30: 10       PUSH  X
    2C31: 4F       MOV   X,SP
    2C32: 62 D0 01 MOV   REG[0xD0],0x1
    2C35: 52 FC    MOV   A,[X-4]
    2C37: 01 DE    ADD   A,0xDE
    2C39: 53 88    MOV   [__r1],A
    2C3B: 52 FB    MOV   A,[X-5]
    2C3D: 09 02    ADC   A,0x2
    2C3F: 10       PUSH  X
    2C40: 58 88    MOV   X,[__r1]
    2C42: 28       ROMX  
    2C43: 20       POP   X
    2C44: 53 88    MOV   [__r1],A
    2C46: 55 89 00 MOV   [__r0],0x0
    2C49: 26 88 04 AND   [__r1],0x4
    2C4C: 26 89 00 AND   [__r0],0x0
    2C4F: 20       POP   X
    2C50: 7F       RET   
_islower:
    2C51: 10       PUSH  X
    2C52: 4F       MOV   X,SP
    2C53: 62 D0 01 MOV   REG[0xD0],0x1
    2C56: 52 FC    MOV   A,[X-4]
    2C58: 01 DE    ADD   A,0xDE
    2C5A: 53 88    MOV   [__r1],A
    2C5C: 52 FB    MOV   A,[X-5]
    2C5E: 09 02    ADC   A,0x2
    2C60: 10       PUSH  X
    2C61: 58 88    MOV   X,[__r1]
    2C63: 28       ROMX  
    2C64: 20       POP   X
    2C65: 53 88    MOV   [__r1],A
    2C67: 55 89 00 MOV   [__r0],0x0
    2C6A: 26 88 02 AND   [__r1],0x2
    2C6D: 26 89 00 AND   [__r0],0x0
    2C70: 20       POP   X
    2C71: 7F       RET   
_isspace:
    2C72: 10       PUSH  X
    2C73: 4F       MOV   X,SP
    2C74: 62 D0 01 MOV   REG[0xD0],0x1
    2C77: 52 FC    MOV   A,[X-4]
    2C79: 01 DE    ADD   A,0xDE
    2C7B: 53 88    MOV   [__r1],A
    2C7D: 52 FB    MOV   A,[X-5]
    2C7F: 09 02    ADC   A,0x2
    2C81: 10       PUSH  X
    2C82: 58 88    MOV   X,[__r1]
    2C84: 28       ROMX  
    2C85: 20       POP   X
    2C86: 53 88    MOV   [__r1],A
    2C88: 55 89 00 MOV   [__r0],0x0
    2C8B: 26 88 10 AND   [__r1],0x10
    2C8E: 26 89 00 AND   [__r0],0x0
    2C91: 20       POP   X
    2C92: 7F       RET   
_toupper:
    2C93: 10       PUSH  X
    2C94: 4F       MOV   X,SP
    2C95: 52 FB    MOV   A,[X-5]
    2C97: 08       PUSH  A
    2C98: 52 FC    MOV   A,[X-4]
    2C9A: 08       PUSH  A
    2C9B: 7C 2C 51 LCALL _islower
    2C9E: 38 FE    ADD   SP,0xFE
    2CA0: 62 D0 01 MOV   REG[0xD0],0x1
    2CA3: 3C 89 00 CMP   [__r0],0x0
    2CA6: B0 06    JNZ   0x2CAD
    2CA8: 3C 88 00 CMP   [__r1],0x0
    2CAB: A0 18    JZ    0x2CC4
    2CAD: 62 D0 01 MOV   REG[0xD0],0x1
    2CB0: 52 FC    MOV   A,[X-4]
    2CB2: 11 61    SUB   A,0x61
    2CB4: 53 88    MOV   [__r1],A
    2CB6: 52 FB    MOV   A,[X-5]
    2CB8: 19 00    SBB   A,0x0
    2CBA: 53 89    MOV   [__r0],A
    2CBC: 06 88 41 ADD   [__r1],0x41
    2CBF: 0E 89 00 ADC   [__r0],0x0
    2CC2: 80 0C    JMP   0x2CCF
    2CC4: 62 D0 01 MOV   REG[0xD0],0x1
    2CC7: 52 FC    MOV   A,[X-4]
    2CC9: 53 88    MOV   [__r1],A
    2CCB: 52 FB    MOV   A,[X-5]
    2CCD: 53 89    MOV   [__r0],A
    2CCF: 20       POP   X
    2CD0: 7F       RET   
_ceilf:
    2CD1: 10       PUSH  X
    2CD2: 4F       MOV   X,SP
    2CD3: 38 08    ADD   SP,0x8
    2CD5: 52 F9    MOV   A,[X-7]
    2CD7: 54 04    MOV   [X+4],A
    2CD9: 52 FA    MOV   A,[X-6]
    2CDB: 54 05    MOV   [X+5],A
    2CDD: 52 FB    MOV   A,[X-5]
    2CDF: 54 06    MOV   [X+6],A
    2CE1: 52 FC    MOV   A,[X-4]
    2CE3: 54 07    MOV   [X+7],A
    2CE5: 52 F9    MOV   A,[X-7]
    2CE7: 08       PUSH  A
    2CE8: 52 FA    MOV   A,[X-6]
    2CEA: 08       PUSH  A
    2CEB: 52 FB    MOV   A,[X-5]
    2CED: 08       PUSH  A
    2CEE: 52 FC    MOV   A,[X-4]
    2CF0: 08       PUSH  A
    2CF1: 62 D0 01 MOV   REG[0xD0],0x1
    2CF4: 7C 23 6D LCALL 0x236D
    2CF7: 18       POP   A
    2CF8: 54 03    MOV   [X+3],A
    2CFA: 18       POP   A
    2CFB: 54 02    MOV   [X+2],A
    2CFD: 18       POP   A
    2CFE: 54 01    MOV   [X+1],A
    2D00: 18       POP   A
    2D01: 54 00    MOV   [X+0],A
    2D03: 52 00    MOV   A,[X+0]
    2D05: 08       PUSH  A
    2D06: 52 01    MOV   A,[X+1]
    2D08: 08       PUSH  A
    2D09: 52 02    MOV   A,[X+2]
    2D0B: 08       PUSH  A
    2D0C: 52 03    MOV   A,[X+3]
    2D0E: 08       PUSH  A
    2D0F: 7C 28 5F LCALL 0x285F
    2D12: 18       POP   A
    2D13: 53 86    MOV   [__r3],A
    2D15: 18       POP   A
    2D16: 53 87    MOV   [__r2],A
    2D18: 18       POP   A
    2D19: 53 88    MOV   [__r1],A
    2D1B: 18       POP   A
    2D1C: 53 89    MOV   [__r0],A
    2D1E: 52 F9    MOV   A,[X-7]
    2D20: 08       PUSH  A
    2D21: 52 FA    MOV   A,[X-6]
    2D23: 08       PUSH  A
    2D24: 52 FB    MOV   A,[X-5]
    2D26: 08       PUSH  A
    2D27: 52 FC    MOV   A,[X-4]
    2D29: 08       PUSH  A
    2D2A: 51 89    MOV   A,[__r0]
    2D2C: 08       PUSH  A
    2D2D: 51 88    MOV   A,[__r1]
    2D2F: 08       PUSH  A
    2D30: 51 87    MOV   A,[__r2]
    2D32: 08       PUSH  A
    2D33: 51 86    MOV   A,[__r3]
    2D35: 08       PUSH  A
    2D36: 7C 25 7E LCALL 0x257E
    2D39: 38 F8    ADD   SP,0xF8
    2D3B: 39 00    CMP   A,0x0
    2D3D: A0 17    JZ    0x2D55
    2D3F: 52 05    MOV   A,[X+5]
    2D41: 21 80    AND   A,0x80
    2D43: 53 88    MOV   [__r1],A
    2D45: 52 04    MOV   A,[X+4]
    2D47: 21 7F    AND   A,0x7F
    2D49: 53 89    MOV   [__r0],A
    2D4B: 51 88    MOV   A,[__r1]
    2D4D: 11 80    SUB   A,0x80
    2D4F: 51 89    MOV   A,[__r0]
    2D51: 19 4B    SBB   A,0x4B
    2D53: C0 16    JC    0x2D6A
    2D55: 62 D0 01 MOV   REG[0xD0],0x1
    2D58: 52 F9    MOV   A,[X-7]
    2D5A: 53 89    MOV   [__r0],A
    2D5C: 52 FA    MOV   A,[X-6]
    2D5E: 53 88    MOV   [__r1],A
    2D60: 52 FB    MOV   A,[X-5]
    2D62: 53 87    MOV   [__r2],A
    2D64: 52 FC    MOV   A,[X-4]
    2D66: 53 86    MOV   [__r3],A
    2D68: 80 84    JMP   0x2DED
    2D6A: 50 00    MOV   A,0x0
    2D6C: 08       PUSH  A
    2D6D: 08       PUSH  A
    2D6E: 08       PUSH  A
    2D6F: 08       PUSH  A
    2D70: 52 F9    MOV   A,[X-7]
    2D72: 08       PUSH  A
    2D73: 52 FA    MOV   A,[X-6]
    2D75: 08       PUSH  A
    2D76: 52 FB    MOV   A,[X-5]
    2D78: 08       PUSH  A
    2D79: 52 FC    MOV   A,[X-4]
    2D7B: 08       PUSH  A
    2D7C: 62 D0 01 MOV   REG[0xD0],0x1
    2D7F: 7C 25 7E LCALL 0x257E
    2D82: 38 F8    ADD   SP,0xF8
    2D84: 39 00    CMP   A,0x0
    2D86: A0 48    JZ    0x2DCF
    2D88: 39 01    CMP   A,0x1
    2D8A: B0 44    JNZ   0x2DCF
    2D8C: 52 03    MOV   A,[X+3]
    2D8E: 01 01    ADD   A,0x1
    2D90: 53 86    MOV   [__r3],A
    2D92: 52 02    MOV   A,[X+2]
    2D94: 09 00    ADC   A,0x0
    2D96: 53 87    MOV   [__r2],A
    2D98: 52 01    MOV   A,[X+1]
    2D9A: 09 00    ADC   A,0x0
    2D9C: 53 88    MOV   [__r1],A
    2D9E: 52 00    MOV   A,[X+0]
    2DA0: 09 00    ADC   A,0x0
    2DA2: 53 89    MOV   [__r0],A
    2DA4: 54 00    MOV   [X+0],A
    2DA6: 51 88    MOV   A,[__r1]
    2DA8: 54 01    MOV   [X+1],A
    2DAA: 51 87    MOV   A,[__r2]
    2DAC: 54 02    MOV   [X+2],A
    2DAE: 51 86    MOV   A,[__r3]
    2DB0: 54 03    MOV   [X+3],A
    2DB2: 51 89    MOV   A,[__r0]
    2DB4: 08       PUSH  A
    2DB5: 51 88    MOV   A,[__r1]
    2DB7: 08       PUSH  A
    2DB8: 51 87    MOV   A,[__r2]
    2DBA: 08       PUSH  A
    2DBB: 51 86    MOV   A,[__r3]
    2DBD: 08       PUSH  A
    2DBE: 7C 28 5F LCALL 0x285F
    2DC1: 18       POP   A
    2DC2: 53 86    MOV   [__r3],A
    2DC4: 18       POP   A
    2DC5: 53 87    MOV   [__r2],A
    2DC7: 18       POP   A
    2DC8: 53 88    MOV   [__r1],A
    2DCA: 18       POP   A
    2DCB: 53 89    MOV   [__r0],A
    2DCD: 80 1F    JMP   0x2DED
    2DCF: 62 D0 01 MOV   REG[0xD0],0x1
    2DD2: 52 00    MOV   A,[X+0]
    2DD4: 08       PUSH  A
    2DD5: 52 01    MOV   A,[X+1]
    2DD7: 08       PUSH  A
    2DD8: 52 02    MOV   A,[X+2]
    2DDA: 08       PUSH  A
    2DDB: 52 03    MOV   A,[X+3]
    2DDD: 08       PUSH  A
    2DDE: 7C 28 5F LCALL 0x285F
    2DE1: 18       POP   A
    2DE2: 53 86    MOV   [__r3],A
    2DE4: 18       POP   A
    2DE5: 53 87    MOV   [__r2],A
    2DE7: 18       POP   A
    2DE8: 53 88    MOV   [__r1],A
    2DEA: 18       POP   A
    2DEB: 53 89    MOV   [__r0],A
    2DED: 38 F8    ADD   SP,0xF8
    2DEF: 20       POP   X
    2DF0: 7F       RET   
_floorf:
    2DF1: 10       PUSH  X
    2DF2: 4F       MOV   X,SP
    2DF3: 38 08    ADD   SP,0x8
    2DF5: 52 F9    MOV   A,[X-7]
    2DF7: 54 04    MOV   [X+4],A
    2DF9: 52 FA    MOV   A,[X-6]
    2DFB: 54 05    MOV   [X+5],A
    2DFD: 52 FB    MOV   A,[X-5]
    2DFF: 54 06    MOV   [X+6],A
    2E01: 52 FC    MOV   A,[X-4]
    2E03: 54 07    MOV   [X+7],A
    2E05: 52 F9    MOV   A,[X-7]
    2E07: 08       PUSH  A
    2E08: 52 FA    MOV   A,[X-6]
    2E0A: 08       PUSH  A
    2E0B: 52 FB    MOV   A,[X-5]
    2E0D: 08       PUSH  A
    2E0E: 52 FC    MOV   A,[X-4]
    2E10: 08       PUSH  A
    2E11: 62 D0 01 MOV   REG[0xD0],0x1
    2E14: 7C 23 6D LCALL 0x236D
    2E17: 18       POP   A
    2E18: 54 03    MOV   [X+3],A
    2E1A: 18       POP   A
    2E1B: 54 02    MOV   [X+2],A
    2E1D: 18       POP   A
    2E1E: 54 01    MOV   [X+1],A
    2E20: 18       POP   A
    2E21: 54 00    MOV   [X+0],A
    2E23: 52 00    MOV   A,[X+0]
    2E25: 08       PUSH  A
    2E26: 52 01    MOV   A,[X+1]
    2E28: 08       PUSH  A
    2E29: 52 02    MOV   A,[X+2]
    2E2B: 08       PUSH  A
    2E2C: 52 03    MOV   A,[X+3]
    2E2E: 08       PUSH  A
    2E2F: 7C 28 5F LCALL 0x285F
    2E32: 18       POP   A
    2E33: 53 86    MOV   [__r3],A
    2E35: 18       POP   A
    2E36: 53 87    MOV   [__r2],A
    2E38: 18       POP   A
    2E39: 53 88    MOV   [__r1],A
    2E3B: 18       POP   A
    2E3C: 53 89    MOV   [__r0],A
    2E3E: 52 F9    MOV   A,[X-7]
    2E40: 08       PUSH  A
    2E41: 52 FA    MOV   A,[X-6]
    2E43: 08       PUSH  A
    2E44: 52 FB    MOV   A,[X-5]
    2E46: 08       PUSH  A
    2E47: 52 FC    MOV   A,[X-4]
    2E49: 08       PUSH  A
    2E4A: 51 89    MOV   A,[__r0]
    2E4C: 08       PUSH  A
    2E4D: 51 88    MOV   A,[__r1]
    2E4F: 08       PUSH  A
    2E50: 51 87    MOV   A,[__r2]
    2E52: 08       PUSH  A
    2E53: 51 86    MOV   A,[__r3]
    2E55: 08       PUSH  A
    2E56: 7C 25 7E LCALL 0x257E
    2E59: 38 F8    ADD   SP,0xF8
    2E5B: 39 00    CMP   A,0x0
    2E5D: A0 17    JZ    0x2E75
    2E5F: 52 05    MOV   A,[X+5]
    2E61: 21 80    AND   A,0x80
    2E63: 53 88    MOV   [__r1],A
    2E65: 52 04    MOV   A,[X+4]
    2E67: 21 7F    AND   A,0x7F
    2E69: 53 89    MOV   [__r0],A
    2E6B: 51 88    MOV   A,[__r1]
    2E6D: 11 80    SUB   A,0x80
    2E6F: 51 89    MOV   A,[__r0]
    2E71: 19 4B    SBB   A,0x4B
    2E73: C0 16    JC    0x2E8A
    2E75: 62 D0 01 MOV   REG[0xD0],0x1
    2E78: 52 F9    MOV   A,[X-7]
    2E7A: 53 89    MOV   [__r0],A
    2E7C: 52 FA    MOV   A,[X-6]
    2E7E: 53 88    MOV   [__r1],A
    2E80: 52 FB    MOV   A,[X-5]
    2E82: 53 87    MOV   [__r2],A
    2E84: 52 FC    MOV   A,[X-4]
    2E86: 53 86    MOV   [__r3],A
    2E88: 80 84    JMP   0x2F0D
    2E8A: 50 00    MOV   A,0x0
    2E8C: 08       PUSH  A
    2E8D: 08       PUSH  A
    2E8E: 08       PUSH  A
    2E8F: 08       PUSH  A
    2E90: 52 F9    MOV   A,[X-7]
    2E92: 08       PUSH  A
    2E93: 52 FA    MOV   A,[X-6]
    2E95: 08       PUSH  A
    2E96: 52 FB    MOV   A,[X-5]
    2E98: 08       PUSH  A
    2E99: 52 FC    MOV   A,[X-4]
    2E9B: 08       PUSH  A
    2E9C: 62 D0 01 MOV   REG[0xD0],0x1
    2E9F: 7C 25 7E LCALL 0x257E
    2EA2: 38 F8    ADD   SP,0xF8
    2EA4: 39 00    CMP   A,0x0
    2EA6: A0 22    JZ    0x2EC9
    2EA8: 39 01    CMP   A,0x1
    2EAA: B0 1E    JNZ   0x2EC9
    2EAC: 52 00    MOV   A,[X+0]
    2EAE: 08       PUSH  A
    2EAF: 52 01    MOV   A,[X+1]
    2EB1: 08       PUSH  A
    2EB2: 52 02    MOV   A,[X+2]
    2EB4: 08       PUSH  A
    2EB5: 52 03    MOV   A,[X+3]
    2EB7: 08       PUSH  A
    2EB8: 7C 28 5F LCALL 0x285F
    2EBB: 18       POP   A
    2EBC: 53 86    MOV   [__r3],A
    2EBE: 18       POP   A
    2EBF: 53 87    MOV   [__r2],A
    2EC1: 18       POP   A
    2EC2: 53 88    MOV   [__r1],A
    2EC4: 18       POP   A
    2EC5: 53 89    MOV   [__r0],A
    2EC7: 80 45    JMP   0x2F0D
    2EC9: 62 D0 01 MOV   REG[0xD0],0x1
    2ECC: 52 03    MOV   A,[X+3]
    2ECE: 11 01    SUB   A,0x1
    2ED0: 53 86    MOV   [__r3],A
    2ED2: 52 02    MOV   A,[X+2]
    2ED4: 19 00    SBB   A,0x0
    2ED6: 53 87    MOV   [__r2],A
    2ED8: 52 01    MOV   A,[X+1]
    2EDA: 19 00    SBB   A,0x0
    2EDC: 53 88    MOV   [__r1],A
    2EDE: 52 00    MOV   A,[X+0]
    2EE0: 19 00    SBB   A,0x0
    2EE2: 53 89    MOV   [__r0],A
    2EE4: 54 00    MOV   [X+0],A
    2EE6: 51 88    MOV   A,[__r1]
    2EE8: 54 01    MOV   [X+1],A
    2EEA: 51 87    MOV   A,[__r2]
    2EEC: 54 02    MOV   [X+2],A
    2EEE: 51 86    MOV   A,[__r3]
    2EF0: 54 03    MOV   [X+3],A
    2EF2: 51 89    MOV   A,[__r0]
    2EF4: 08       PUSH  A
    2EF5: 51 88    MOV   A,[__r1]
    2EF7: 08       PUSH  A
    2EF8: 51 87    MOV   A,[__r2]
    2EFA: 08       PUSH  A
    2EFB: 51 86    MOV   A,[__r3]
    2EFD: 08       PUSH  A
    2EFE: 7C 28 5F LCALL 0x285F
    2F01: 18       POP   A
    2F02: 53 86    MOV   [__r3],A
    2F04: 18       POP   A
    2F05: 53 87    MOV   [__r2],A
    2F07: 18       POP   A
    2F08: 53 88    MOV   [__r1],A
    2F0A: 18       POP   A
    2F0B: 53 89    MOV   [__r0],A
    2F0D: 38 F8    ADD   SP,0xF8
    2F0F: 20       POP   X
    2F10: 7F       RET   
_modff:
    2F11: 10       PUSH  X
    2F12: 4F       MOV   X,SP
    2F13: 50 00    MOV   A,0x0
    2F15: 08       PUSH  A
    2F16: 08       PUSH  A
    2F17: 08       PUSH  A
    2F18: 08       PUSH  A
    2F19: 52 F9    MOV   A,[X-7]
    2F1B: 08       PUSH  A
    2F1C: 52 FA    MOV   A,[X-6]
    2F1E: 08       PUSH  A
    2F1F: 52 FB    MOV   A,[X-5]
    2F21: 08       PUSH  A
    2F22: 52 FC    MOV   A,[X-4]
    2F24: 08       PUSH  A
    2F25: 62 D0 01 MOV   REG[0xD0],0x1
    2F28: 7C 25 7E LCALL 0x257E
    2F2B: 38 F8    ADD   SP,0xF8
    2F2D: 39 FF    CMP   A,0xFF
    2F2F: A0 2F    JZ    0x2F5F
    2F31: 52 F9    MOV   A,[X-7]
    2F33: 08       PUSH  A
    2F34: 52 FA    MOV   A,[X-6]
    2F36: 08       PUSH  A
    2F37: 52 FB    MOV   A,[X-5]
    2F39: 08       PUSH  A
    2F3A: 52 FC    MOV   A,[X-4]
    2F3C: 08       PUSH  A
    2F3D: 7C 2D F1 LCALL _floorf
    2F40: 38 FC    ADD   SP,0xFC
    2F42: 62 D0 01 MOV   REG[0xD0],0x1
    2F45: 52 F8    MOV   A,[X-8]
    2F47: 53 84    MOV   [__r5],A
    2F49: 52 F7    MOV   A,[X-9]
    2F4B: 60 D5    MOV   REG[0xD5],A
    2F4D: 51 89    MOV   A,[__r0]
    2F4F: 3F 84    MVI   [__r5],A
    2F51: 51 88    MOV   A,[__r1]
    2F53: 3F 84    MVI   [__r5],A
    2F55: 51 87    MOV   A,[__r2]
    2F57: 3F 84    MVI   [__r5],A
    2F59: 51 86    MOV   A,[__r3]
    2F5B: 3F 84    MVI   [__r5],A
    2F5D: 80 2D    JMP   0x2F8B
    2F5F: 52 F9    MOV   A,[X-7]
    2F61: 08       PUSH  A
    2F62: 52 FA    MOV   A,[X-6]
    2F64: 08       PUSH  A
    2F65: 52 FB    MOV   A,[X-5]
    2F67: 08       PUSH  A
    2F68: 52 FC    MOV   A,[X-4]
    2F6A: 08       PUSH  A
    2F6B: 7C 2C D1 LCALL _ceilf
    2F6E: 38 FC    ADD   SP,0xFC
    2F70: 62 D0 01 MOV   REG[0xD0],0x1
    2F73: 52 F8    MOV   A,[X-8]
    2F75: 53 84    MOV   [__r5],A
    2F77: 52 F7    MOV   A,[X-9]
    2F79: 60 D5    MOV   REG[0xD5],A
    2F7B: 51 89    MOV   A,[__r0]
    2F7D: 3F 84    MVI   [__r5],A
    2F7F: 51 88    MOV   A,[__r1]
    2F81: 3F 84    MVI   [__r5],A
    2F83: 51 87    MOV   A,[__r2]
    2F85: 3F 84    MVI   [__r5],A
    2F87: 51 86    MOV   A,[__r3]
    2F89: 3F 84    MVI   [__r5],A
    2F8B: 62 D0 01 MOV   REG[0xD0],0x1
    2F8E: 52 F8    MOV   A,[X-8]
    2F90: 53 88    MOV   [__r1],A
    2F92: 52 F7    MOV   A,[X-9]
    2F94: 60 D4    MOV   REG[0xD4],A
    2F96: 3E 88    MVI   A,[__r1]
    2F98: 53 85    MOV   [__r4],A
    2F9A: 3E 88    MVI   A,[__r1]
    2F9C: 53 84    MOV   [__r5],A
    2F9E: 3E 88    MVI   A,[__r1]
    2FA0: 53 83    MOV   [__r6],A
    2FA2: 3E 88    MVI   A,[__r1]
    2FA4: 53 82    MOV   [__r7],A
    2FA6: 51 85    MOV   A,[__r4]
    2FA8: 08       PUSH  A
    2FA9: 51 84    MOV   A,[__r5]
    2FAB: 08       PUSH  A
    2FAC: 51 83    MOV   A,[__r6]
    2FAE: 08       PUSH  A
    2FAF: 51 82    MOV   A,[__r7]
    2FB1: 08       PUSH  A
    2FB2: 52 F9    MOV   A,[X-7]
    2FB4: 08       PUSH  A
    2FB5: 52 FA    MOV   A,[X-6]
    2FB7: 08       PUSH  A
    2FB8: 52 FB    MOV   A,[X-5]
    2FBA: 08       PUSH  A
    2FBB: 52 FC    MOV   A,[X-4]
    2FBD: 08       PUSH  A
    2FBE: 7C 27 E8 LCALL 0x27E8
    2FC1: 18       POP   A
    2FC2: 53 86    MOV   [__r3],A
    2FC4: 18       POP   A
    2FC5: 53 87    MOV   [__r2],A
    2FC7: 18       POP   A
    2FC8: 53 88    MOV   [__r1],A
    2FCA: 18       POP   A
    2FCB: 53 89    MOV   [__r0],A
    2FCD: 38 FC    ADD   SP,0xFC
    2FCF: 20       POP   X
    2FD0: 7F       RET   
__csdepi:
    2FD1: 10       PUSH  X
    2FD2: 4F       MOV   X,SP
    2FD3: 62 D0 01 MOV   REG[0xD0],0x1
    2FD6: 51 95    MOV   A,[pResult+3]
    2FD8: 08       PUSH  A
    2FD9: 51 94    MOV   A,[pResult+2]
    2FDB: 62 D0 01 MOV   REG[0xD0],0x1
    2FDE: 53 89    MOV   [__r0],A
    2FE0: 18       POP   A
    2FE1: 53 88    MOV   [__r1],A
    2FE3: 01 01    ADD   A,0x1
    2FE5: 62 D0 01 MOV   REG[0xD0],0x1
    2FE8: 53 95    MOV   [pResult+3],A
    2FEA: 62 D0 01 MOV   REG[0xD0],0x1
    2FED: 51 89    MOV   A,[__r0]
    2FEF: 09 00    ADC   A,0x0
    2FF1: 62 D0 01 MOV   REG[0xD0],0x1
    2FF4: 53 94    MOV   [pResult+2],A
    2FF6: 62 D0 01 MOV   REG[0xD0],0x1
    2FF9: 51 89    MOV   A,[__r0]
    2FFB: 60 D5    MOV   REG[0xD5],A
    2FFD: 52 FC    MOV   A,[X-4]
    2FFF: 3F 88    MVI   [__r1],A
    3001: 20       POP   X
    3002: 7F       RET   
_csprintf:
    3003: 10       PUSH  X
    3004: 4F       MOV   X,SP
    3005: 38 02    ADD   SP,0x2
    3007: 62 D0 01 MOV   REG[0xD0],0x1
    300A: 52 FC    MOV   A,[X-4]
    300C: 53 95    MOV   [pResult+3],A
    300E: 52 FB    MOV   A,[X-5]
    3010: 53 94    MOV   [pResult+2],A
    3012: 62 D0 01 MOV   REG[0xD0],0x1
    3015: 5A 88    MOV   [__r1],X
    3017: 16 88 07 SUB   [__r1],0x7
    301A: 51 88    MOV   A,[__r1]
    301C: 54 01    MOV   [X+1],A
    301E: 56 00 07 MOV   [X+0],0x7
    3021: 52 00    MOV   A,[X+0]
    3023: 08       PUSH  A
    3024: 52 01    MOV   A,[X+1]
    3026: 08       PUSH  A
    3027: 52 F9    MOV   A,[X-7]
    3029: 08       PUSH  A
    302A: 52 FA    MOV   A,[X-6]
    302C: 08       PUSH  A
    302D: 50 04    MOV   A,0x4
    302F: 08       PUSH  A
    3030: 50 54    MOV   A,0x54
    3032: 08       PUSH  A
    3033: 7C 30 6C LCALL __cprint
    3036: 38 FA    ADD   SP,0xFA
    3038: 62 D0 01 MOV   REG[0xD0],0x1
    303B: 51 95    MOV   A,[pResult+3]
    303D: 08       PUSH  A
    303E: 51 94    MOV   A,[pResult+2]
    3040: 62 D0 01 MOV   REG[0xD0],0x1
    3043: 53 89    MOV   [__r0],A
    3045: 18       POP   A
    3046: 53 88    MOV   [__r1],A
    3048: 51 89    MOV   A,[__r0]
    304A: 60 D5    MOV   REG[0xD5],A
    304C: 50 00    MOV   A,0x0
    304E: 3F 88    MVI   [__r1],A
    3050: 62 D0 01 MOV   REG[0xD0],0x1
    3053: 51 95    MOV   A,[pResult+3]
    3055: 13 FC    SUB   A,[X-4]
    3057: 62 D0 01 MOV   REG[0xD0],0x1
    305A: 53 88    MOV   [__r1],A
    305C: 62 D0 01 MOV   REG[0xD0],0x1
    305F: 51 94    MOV   A,[pResult+2]
    3061: 1B FB    SBB   A,[X-5]
    3063: 62 D0 01 MOV   REG[0xD0],0x1
    3066: 53 89    MOV   [__r0],A
    3068: 38 FE    ADD   SP,0xFE
    306A: 20       POP   X
    306B: 7F       RET   
__cprint:
    306C: 10       PUSH  X
    306D: 4F       MOV   X,SP
    306E: 38 11    ADD   SP,0x11
    3070: 56 05 00 MOV   [X+5],0x0
    3073: 56 04 00 MOV   [X+4],0x0
    3076: 83 C7    JMP   0x343E
    3078: 62 D0 01 MOV   REG[0xD0],0x1
    307B: 52 FA    MOV   A,[X-6]
    307D: 53 88    MOV   [__r1],A
    307F: 52 F9    MOV   A,[X-7]
    3081: 10       PUSH  X
    3082: 58 88    MOV   X,[__r1]
    3084: 28       ROMX  
    3085: 20       POP   X
    3086: 39 25    CMP   A,0x25
    3088: A0 23    JZ    0x30AC
    308A: 52 FA    MOV   A,[X-6]
    308C: 53 88    MOV   [__r1],A
    308E: 52 F9    MOV   A,[X-7]
    3090: 10       PUSH  X
    3091: 58 88    MOV   X,[__r1]
    3093: 28       ROMX  
    3094: 20       POP   X
    3095: 10       PUSH  X
    3096: 08       PUSH  A
    3097: 52 FC    MOV   A,[X-4]
    3099: 53 88    MOV   [__r1],A
    309B: 52 FB    MOV   A,[X-5]
    309D: 58 88    MOV   X,[__r1]
    309F: 7C 29 08 LCALL __plcall
    30A2: 38 FF    ADD   SP,0xFF
    30A4: 20       POP   X
    30A5: 77 05    INC   [X+5]
    30A7: 0F 04 00 ADC   [X+4],0x0
    30AA: 83 8E    JMP   0x3439
    30AC: 56 0A 00 MOV   [X+10],0x0
    30AF: 56 09 00 MOV   [X+9],0x0
    30B2: 56 07 40 MOV   [X+7],0x40
    30B5: 56 06 01 MOV   [X+6],0x1
    30B8: 56 08 20 MOV   [X+8],0x20
    30BB: 77 FA    INC   [X-6]
    30BD: 0F F9 00 ADC   [X-7],0x0
    30C0: 62 D0 01 MOV   REG[0xD0],0x1
    30C3: 52 FA    MOV   A,[X-6]
    30C5: 53 88    MOV   [__r1],A
    30C7: 52 F9    MOV   A,[X-7]
    30C9: 10       PUSH  X
    30CA: 58 88    MOV   X,[__r1]
    30CC: 28       ROMX  
    30CD: 20       POP   X
    30CE: 54 10    MOV   [X+16],A
    30D0: 56 0F 00 MOV   [X+15],0x0
    30D3: 52 10    MOV   A,[X+16]
    30D5: 11 58    SUB   A,0x58
    30D7: 53 7C    MOV   [__rY],A
    30D9: 52 0F    MOV   A,[X+15]
    30DB: 31 80    XOR   A,0x80
    30DD: 19 80    SBB   A,0x80
    30DF: 2A 7C    OR    A,[__rY]
    30E1: A0 ED    JZ    0x31CF
    30E3: D0 22    JNC   0x3106
    30E5: 52 10    MOV   A,[X+16]
    30E7: 11 45    SUB   A,0x45
    30E9: 62 D0 01 MOV   REG[0xD0],0x1
    30EC: 53 7C    MOV   [__rY],A
    30EE: 52 0F    MOV   A,[X+15]
    30F0: 31 80    XOR   A,0x80
    30F2: 19 80    SBB   A,0x80
    30F4: C0 83    JC    0x3178
    30F6: 2A 7C    OR    A,[__rY]
    30F8: A3 38    JZ    0x3431
    30FA: 3D 0F 00 CMP   [X+15],0x0
    30FD: B0 06    JNZ   0x3104
    30FF: 3D 10 53 CMP   [X+16],0x53
    3102: A2 32    JZ    0x3335
    3104: 80 73    JMP   0x3178
    3106: 3D 0F 00 CMP   [X+15],0x0
    3109: B0 06    JNZ   0x3110
    310B: 3D 10 63 CMP   [X+16],0x63
    310E: A1 F6    JZ    0x3305
    3110: 3D 0F 00 CMP   [X+15],0x0
    3113: B0 06    JNZ   0x311A
    3115: 3D 10 64 CMP   [X+16],0x64
    3118: A0 84    JZ    0x319D
    311A: 3D 0F 00 CMP   [X+15],0x0
    311D: B0 06    JNZ   0x3124
    311F: 3D 10 65 CMP   [X+16],0x65
    3122: A3 0E    JZ    0x3431
    3124: 3D 0F 00 CMP   [X+15],0x0
    3127: B0 06    JNZ   0x312E
    3129: 3D 10 66 CMP   [X+16],0x66
    312C: A3 04    JZ    0x3431
    312E: 3D 0F 00 CMP   [X+15],0x0
    3131: B0 06    JNZ   0x3138
    3133: 3D 10 69 CMP   [X+16],0x69
    3136: A0 66    JZ    0x319D
    3138: 3D 0F 00 CMP   [X+15],0x0
    313B: B0 06    JNZ   0x3142
    313D: 3D 10 6F CMP   [X+16],0x6F
    3140: A0 8E    JZ    0x31CF
    3142: 3D 0F 00 CMP   [X+15],0x0
    3145: B0 06    JNZ   0x314C
    3147: 3D 10 70 CMP   [X+16],0x70
    314A: A0 84    JZ    0x31CF
    314C: 52 10    MOV   A,[X+16]
    314E: 11 63    SUB   A,0x63
    3150: 52 0F    MOV   A,[X+15]
    3152: 31 80    XOR   A,0x80
    3154: 19 80    SBB   A,0x80
    3156: C0 21    JC    0x3178
    3158: 3D 0F 00 CMP   [X+15],0x0
    315B: B0 06    JNZ   0x3162
    315D: 3D 10 73 CMP   [X+16],0x73
    3160: A2 4A    JZ    0x33AB
    3162: 3D 0F 00 CMP   [X+15],0x0
    3165: B0 06    JNZ   0x316C
    3167: 3D 10 75 CMP   [X+16],0x75
    316A: A0 64    JZ    0x31CF
    316C: 3D 0F 00 CMP   [X+15],0x0
    316F: B0 06    JNZ   0x3176
    3171: 3D 10 78 CMP   [X+16],0x78
    3174: A0 5A    JZ    0x31CF
    3176: 80 01    JMP   0x3178
    3178: 62 D0 01 MOV   REG[0xD0],0x1
    317B: 52 FA    MOV   A,[X-6]
    317D: 53 88    MOV   [__r1],A
    317F: 52 F9    MOV   A,[X-7]
    3181: 10       PUSH  X
    3182: 58 88    MOV   X,[__r1]
    3184: 28       ROMX  
    3185: 20       POP   X
    3186: 10       PUSH  X
    3187: 08       PUSH  A
    3188: 52 FC    MOV   A,[X-4]
    318A: 53 88    MOV   [__r1],A
    318C: 52 FB    MOV   A,[X-5]
    318E: 58 88    MOV   X,[__r1]
    3190: 7C 29 08 LCALL __plcall
    3193: 38 FF    ADD   SP,0xFF
    3195: 20       POP   X
    3196: 77 05    INC   [X+5]
    3198: 0F 04 00 ADC   [X+4],0x0
    319B: 82 9D    JMP   0x3439
    319D: 07 F8 FE ADD   [X-8],0xFE
    31A0: 0F F7 FF ADC   [X-9],0xFF
    31A3: 62 D0 01 MOV   REG[0xD0],0x1
    31A6: 52 F8    MOV   A,[X-8]
    31A8: 53 88    MOV   [__r1],A
    31AA: 52 F7    MOV   A,[X-9]
    31AC: 60 D4    MOV   REG[0xD4],A
    31AE: 3E 88    MVI   A,[__r1]
    31B0: 54 0B    MOV   [X+11],A
    31B2: 3E 88    MVI   A,[__r1]
    31B4: 54 0C    MOV   [X+12],A
    31B6: 50 00    MOV   A,0x0
    31B8: 08       PUSH  A
    31B9: 50 0A    MOV   A,0xA
    31BB: 08       PUSH  A
    31BC: 52 0B    MOV   A,[X+11]
    31BE: 08       PUSH  A
    31BF: 52 0C    MOV   A,[X+12]
    31C1: 08       PUSH  A
    31C2: 52 06    MOV   A,[X+6]
    31C4: 08       PUSH  A
    31C5: 52 07    MOV   A,[X+7]
    31C7: 08       PUSH  A
    31C8: 7C 29 14 LCALL _itoa
    31CB: 38 FA    ADD   SP,0xFA
    31CD: 81 2F    JMP   0x32FD
    31CF: 07 F8 FE ADD   [X-8],0xFE
    31D2: 0F F7 FF ADC   [X-9],0xFF
    31D5: 62 D0 01 MOV   REG[0xD0],0x1
    31D8: 52 F8    MOV   A,[X-8]
    31DA: 53 88    MOV   [__r1],A
    31DC: 52 F7    MOV   A,[X-9]
    31DE: 60 D4    MOV   REG[0xD4],A
    31E0: 3E 88    MVI   A,[__r1]
    31E2: 53 89    MOV   [__r0],A
    31E4: 3E 88    MVI   A,[__r1]
    31E6: 54 0C    MOV   [X+12],A
    31E8: 51 89    MOV   A,[__r0]
    31EA: 54 0B    MOV   [X+11],A
    31EC: 52 FA    MOV   A,[X-6]
    31EE: 53 88    MOV   [__r1],A
    31F0: 52 F9    MOV   A,[X-7]
    31F2: 10       PUSH  X
    31F3: 58 88    MOV   X,[__r1]
    31F5: 28       ROMX  
    31F6: 20       POP   X
    31F7: 39 75    CMP   A,0x75
    31F9: B0 1A    JNZ   0x3214
    31FB: 50 00    MOV   A,0x0
    31FD: 08       PUSH  A
    31FE: 50 0A    MOV   A,0xA
    3200: 08       PUSH  A
    3201: 52 0B    MOV   A,[X+11]
    3203: 08       PUSH  A
    3204: 52 0C    MOV   A,[X+12]
    3206: 08       PUSH  A
    3207: 52 06    MOV   A,[X+6]
    3209: 08       PUSH  A
    320A: 52 07    MOV   A,[X+7]
    320C: 08       PUSH  A
    320D: 7C 2A ED LCALL _utoa
    3210: 38 FA    ADD   SP,0xFA
    3212: 80 EA    JMP   0x32FD
    3214: 62 D0 01 MOV   REG[0xD0],0x1
    3217: 52 FA    MOV   A,[X-6]
    3219: 53 88    MOV   [__r1],A
    321B: 52 F9    MOV   A,[X-7]
    321D: 10       PUSH  X
    321E: 58 88    MOV   X,[__r1]
    3220: 28       ROMX  
    3221: 20       POP   X
    3222: 39 6F    CMP   A,0x6F
    3224: B0 1A    JNZ   0x323F
    3226: 50 00    MOV   A,0x0
    3228: 08       PUSH  A
    3229: 50 08    MOV   A,0x8
    322B: 08       PUSH  A
    322C: 52 0B    MOV   A,[X+11]
    322E: 08       PUSH  A
    322F: 52 0C    MOV   A,[X+12]
    3231: 08       PUSH  A
    3232: 52 06    MOV   A,[X+6]
    3234: 08       PUSH  A
    3235: 52 07    MOV   A,[X+7]
    3237: 08       PUSH  A
    3238: 7C 2A ED LCALL _utoa
    323B: 38 FA    ADD   SP,0xFA
    323D: 80 BF    JMP   0x32FD
    323F: 62 D0 01 MOV   REG[0xD0],0x1
    3242: 52 FA    MOV   A,[X-6]
    3244: 53 88    MOV   [__r1],A
    3246: 52 F9    MOV   A,[X-7]
    3248: 10       PUSH  X
    3249: 58 88    MOV   X,[__r1]
    324B: 28       ROMX  
    324C: 20       POP   X
    324D: 39 70    CMP   A,0x70
    324F: B0 39    JNZ   0x3289
    3251: 52 07    MOV   A,[X+7]
    3253: 53 88    MOV   [__r1],A
    3255: 52 06    MOV   A,[X+6]
    3257: 53 89    MOV   [__r0],A
    3259: 51 88    MOV   A,[__r1]
    325B: 01 01    ADD   A,0x1
    325D: 54 07    MOV   [X+7],A
    325F: 51 89    MOV   A,[__r0]
    3261: 09 00    ADC   A,0x0
    3263: 54 06    MOV   [X+6],A
    3265: 51 89    MOV   A,[__r0]
    3267: 60 D5    MOV   REG[0xD5],A
    3269: 50 30    MOV   A,0x30
    326B: 3F 88    MVI   [__r1],A
    326D: 52 07    MOV   A,[X+7]
    326F: 53 88    MOV   [__r1],A
    3271: 52 06    MOV   A,[X+6]
    3273: 53 89    MOV   [__r0],A
    3275: 51 88    MOV   A,[__r1]
    3277: 01 01    ADD   A,0x1
    3279: 54 07    MOV   [X+7],A
    327B: 51 89    MOV   A,[__r0]
    327D: 09 00    ADC   A,0x0
    327F: 54 06    MOV   [X+6],A
    3281: 51 89    MOV   A,[__r0]
    3283: 60 D5    MOV   REG[0xD5],A
    3285: 50 78    MOV   A,0x78
    3287: 3F 88    MVI   [__r1],A
    3289: 50 00    MOV   A,0x0
    328B: 08       PUSH  A
    328C: 50 10    MOV   A,0x10
    328E: 08       PUSH  A
    328F: 52 0B    MOV   A,[X+11]
    3291: 08       PUSH  A
    3292: 52 0C    MOV   A,[X+12]
    3294: 08       PUSH  A
    3295: 52 06    MOV   A,[X+6]
    3297: 08       PUSH  A
    3298: 52 07    MOV   A,[X+7]
    329A: 08       PUSH  A
    329B: 7C 2A ED LCALL _utoa
    329E: 38 FA    ADD   SP,0xFA
    32A0: 62 D0 01 MOV   REG[0xD0],0x1
    32A3: 52 FA    MOV   A,[X-6]
    32A5: 53 88    MOV   [__r1],A
    32A7: 52 F9    MOV   A,[X-7]
    32A9: 10       PUSH  X
    32AA: 58 88    MOV   X,[__r1]
    32AC: 28       ROMX  
    32AD: 20       POP   X
    32AE: 39 58    CMP   A,0x58
    32B0: B0 4C    JNZ   0x32FD
    32B2: 56 01 40 MOV   [X+1],0x40
    32B5: 56 00 01 MOV   [X+0],0x1
    32B8: 80 33    JMP   0x32EC
    32BA: 62 D0 01 MOV   REG[0xD0],0x1
    32BD: 52 01    MOV   A,[X+1]
    32BF: 53 88    MOV   [__r1],A
    32C1: 52 00    MOV   A,[X+0]
    32C3: 60 D4    MOV   REG[0xD4],A
    32C5: 3E 88    MVI   A,[__r1]
    32C7: 53 88    MOV   [__r1],A
    32C9: 50 00    MOV   A,0x0
    32CB: 08       PUSH  A
    32CC: 51 88    MOV   A,[__r1]
    32CE: 08       PUSH  A
    32CF: 7C 2C 93 LCALL _toupper
    32D2: 38 FE    ADD   SP,0xFE
    32D4: 62 D0 01 MOV   REG[0xD0],0x1
    32D7: 51 88    MOV   A,[__r1]
    32D9: 53 89    MOV   [__r0],A
    32DB: 52 01    MOV   A,[X+1]
    32DD: 53 86    MOV   [__r3],A
    32DF: 52 00    MOV   A,[X+0]
    32E1: 60 D5    MOV   REG[0xD5],A
    32E3: 51 89    MOV   A,[__r0]
    32E5: 3F 86    MVI   [__r3],A
    32E7: 77 01    INC   [X+1]
    32E9: 0F 00 00 ADC   [X+0],0x0
    32EC: 62 D0 01 MOV   REG[0xD0],0x1
    32EF: 52 01    MOV   A,[X+1]
    32F1: 53 88    MOV   [__r1],A
    32F3: 52 00    MOV   A,[X+0]
    32F5: 60 D4    MOV   REG[0xD4],A
    32F7: 3E 88    MVI   A,[__r1]
    32F9: 39 00    CMP   A,0x0
    32FB: BF BE    JNZ   0x32BA
    32FD: 56 01 40 MOV   [X+1],0x40
    3300: 56 00 01 MOV   [X+0],0x1
    3303: 80 D2    JMP   0x33D6
    3305: 07 F8 FE ADD   [X-8],0xFE
    3308: 0F F7 FF ADC   [X-9],0xFF
    330B: 62 D0 01 MOV   REG[0xD0],0x1
    330E: 52 F8    MOV   A,[X-8]
    3310: 53 88    MOV   [__r1],A
    3312: 52 F7    MOV   A,[X-9]
    3314: 60 D4    MOV   REG[0xD4],A
    3316: 3E 88    MVI   A,[__r1]
    3318: 3E 88    MVI   A,[__r1]
    331A: 54 0D    MOV   [X+13],A
    331C: 10       PUSH  X
    331D: 52 0D    MOV   A,[X+13]
    331F: 08       PUSH  A
    3320: 52 FC    MOV   A,[X-4]
    3322: 53 88    MOV   [__r1],A
    3324: 52 FB    MOV   A,[X-5]
    3326: 58 88    MOV   X,[__r1]
    3328: 7C 29 08 LCALL __plcall
    332B: 38 FF    ADD   SP,0xFF
    332D: 20       POP   X
    332E: 77 05    INC   [X+5]
    3330: 0F 04 00 ADC   [X+4],0x0
    3333: 81 05    JMP   0x3439
    3335: 07 F8 FE ADD   [X-8],0xFE
    3338: 0F F7 FF ADC   [X-9],0xFF
    333B: 62 D0 01 MOV   REG[0xD0],0x1
    333E: 52 F8    MOV   A,[X-8]
    3340: 53 88    MOV   [__r1],A
    3342: 52 F7    MOV   A,[X-9]
    3344: 60 D4    MOV   REG[0xD4],A
    3346: 3E 88    MVI   A,[__r1]
    3348: 54 02    MOV   [X+2],A
    334A: 3E 88    MVI   A,[__r1]
    334C: 54 03    MOV   [X+3],A
    334E: 3D 08 2D CMP   [X+8],0x2D
    3351: B0 45    JNZ   0x3397
    3353: 10       PUSH  X
    3354: 50 2D    MOV   A,0x2D
    3356: 08       PUSH  A
    3357: 62 D0 01 MOV   REG[0xD0],0x1
    335A: 52 FC    MOV   A,[X-4]
    335C: 53 88    MOV   [__r1],A
    335E: 52 FB    MOV   A,[X-5]
    3360: 58 88    MOV   X,[__r1]
    3362: 7C 29 08 LCALL __plcall
    3365: 38 FF    ADD   SP,0xFF
    3367: 20       POP   X
    3368: 77 05    INC   [X+5]
    336A: 0F 04 00 ADC   [X+4],0x0
    336D: 80 29    JMP   0x3397
    336F: 62 D0 01 MOV   REG[0xD0],0x1
    3372: 52 03    MOV   A,[X+3]
    3374: 53 88    MOV   [__r1],A
    3376: 52 02    MOV   A,[X+2]
    3378: 10       PUSH  X
    3379: 58 88    MOV   X,[__r1]
    337B: 28       ROMX  
    337C: 20       POP   X
    337D: 10       PUSH  X
    337E: 08       PUSH  A
    337F: 52 FC    MOV   A,[X-4]
    3381: 53 88    MOV   [__r1],A
    3383: 52 FB    MOV   A,[X-5]
    3385: 58 88    MOV   X,[__r1]
    3387: 7C 29 08 LCALL __plcall
    338A: 38 FF    ADD   SP,0xFF
    338C: 20       POP   X
    338D: 77 05    INC   [X+5]
    338F: 0F 04 00 ADC   [X+4],0x0
    3392: 77 03    INC   [X+3]
    3394: 0F 02 00 ADC   [X+2],0x0
    3397: 62 D0 01 MOV   REG[0xD0],0x1
    339A: 52 03    MOV   A,[X+3]
    339C: 53 88    MOV   [__r1],A
    339E: 52 02    MOV   A,[X+2]
    33A0: 10       PUSH  X
    33A1: 58 88    MOV   X,[__r1]
    33A3: 28       ROMX  
    33A4: 20       POP   X
    33A5: 39 00    CMP   A,0x0
    33A7: BF C7    JNZ   0x336F
    33A9: 80 8F    JMP   0x3439
    33AB: 07 F8 FE ADD   [X-8],0xFE
    33AE: 0F F7 FF ADC   [X-9],0xFF
    33B1: 62 D0 01 MOV   REG[0xD0],0x1
    33B4: 52 F8    MOV   A,[X-8]
    33B6: 53 88    MOV   [__r1],A
    33B8: 52 F7    MOV   A,[X-9]
    33BA: 60 D4    MOV   REG[0xD4],A
    33BC: 3E 88    MVI   A,[__r1]
    33BE: 54 00    MOV   [X+0],A
    33C0: 3E 88    MVI   A,[__r1]
    33C2: 54 01    MOV   [X+1],A
    33C4: 3D 00 00 CMP   [X+0],0x0
    33C7: B0 0E    JNZ   0x33D6
    33C9: 3D 01 00 CMP   [X+1],0x0
    33CC: B0 09    JNZ   0x33D6
    33CE: 56 03 DE MOV   [X+3],0xDE
    33D1: 56 02 03 MOV   [X+2],0x3
    33D4: 8F 79    JMP   0x334E
    33D6: 3D 08 2D CMP   [X+8],0x2D
    33D9: B0 44    JNZ   0x341E
    33DB: 10       PUSH  X
    33DC: 50 2D    MOV   A,0x2D
    33DE: 08       PUSH  A
    33DF: 62 D0 01 MOV   REG[0xD0],0x1
    33E2: 52 FC    MOV   A,[X-4]
    33E4: 53 88    MOV   [__r1],A
    33E6: 52 FB    MOV   A,[X-5]
    33E8: 58 88    MOV   X,[__r1]
    33EA: 7C 29 08 LCALL __plcall
    33ED: 38 FF    ADD   SP,0xFF
    33EF: 20       POP   X
    33F0: 77 05    INC   [X+5]
    33F2: 0F 04 00 ADC   [X+4],0x0
    33F5: 80 28    JMP   0x341E
    33F7: 62 D0 01 MOV   REG[0xD0],0x1
    33FA: 52 01    MOV   A,[X+1]
    33FC: 53 88    MOV   [__r1],A
    33FE: 52 00    MOV   A,[X+0]
    3400: 60 D4    MOV   REG[0xD4],A
    3402: 3E 88    MVI   A,[__r1]
    3404: 10       PUSH  X
    3405: 08       PUSH  A
    3406: 52 FC    MOV   A,[X-4]
    3408: 53 88    MOV   [__r1],A
    340A: 52 FB    MOV   A,[X-5]
    340C: 58 88    MOV   X,[__r1]
    340E: 7C 29 08 LCALL __plcall
    3411: 38 FF    ADD   SP,0xFF
    3413: 20       POP   X
    3414: 77 05    INC   [X+5]
    3416: 0F 04 00 ADC   [X+4],0x0
    3419: 77 01    INC   [X+1]
    341B: 0F 00 00 ADC   [X+0],0x0
    341E: 62 D0 01 MOV   REG[0xD0],0x1
    3421: 52 01    MOV   A,[X+1]
    3423: 53 88    MOV   [__r1],A
    3425: 52 00    MOV   A,[X+0]
    3427: 60 D4    MOV   REG[0xD4],A
    3429: 3E 88    MVI   A,[__r1]
    342B: 39 00    CMP   A,0x0
    342D: BF C9    JNZ   0x33F7
    342F: 80 09    JMP   0x3439
    3431: 56 03 F0 MOV   [X+3],0xF0
    3434: 56 02 03 MOV   [X+2],0x3
    3437: 8F 16    JMP   0x334E
    3439: 77 FA    INC   [X-6]
    343B: 0F F9 00 ADC   [X-7],0x0
    343E: 62 D0 01 MOV   REG[0xD0],0x1
    3441: 52 FA    MOV   A,[X-6]
    3443: 53 88    MOV   [__r1],A
    3445: 52 F9    MOV   A,[X-7]
    3447: 10       PUSH  X
    3448: 58 88    MOV   X,[__r1]
    344A: 28       ROMX  
    344B: 20       POP   X
    344C: 39 00    CMP   A,0x0
    344E: BC 29    JNZ   0x3078
    3450: 52 05    MOV   A,[X+5]
    3452: 53 88    MOV   [__r1],A
    3454: 52 04    MOV   A,[X+4]
    3456: 53 89    MOV   [__r0],A
    3458: 38 EF    ADD   SP,0xEF
    345A: 20       POP   X
    345B: 7F       RET   
    345C: 10       PUSH  X
    345D: 4F       MOV   X,SP
    345E: 38 04    ADD   SP,0x4
    3460: 80 06    JMP   0x3467
    3462: 77 FC    INC   [X-4]
    3464: 0F FB 00 ADC   [X-5],0x0
    3467: 62 D0 01 MOV   REG[0xD0],0x1
    346A: 52 FC    MOV   A,[X-4]
    346C: 53 88    MOV   [__r1],A
    346E: 52 FB    MOV   A,[X-5]
    3470: 10       PUSH  X
    3471: 58 88    MOV   X,[__r1]
    3473: 28       ROMX  
    3474: 20       POP   X
    3475: 53 88    MOV   [__r1],A
    3477: 50 00    MOV   A,0x0
    3479: 08       PUSH  A
    347A: 51 88    MOV   A,[__r1]
    347C: 08       PUSH  A
    347D: 7C 2C 72 LCALL _isspace
    3480: 38 FE    ADD   SP,0xFE
    3482: 62 D0 01 MOV   REG[0xD0],0x1
    3485: 3C 89 00 CMP   [__r0],0x0
    3488: BF D9    JNZ   0x3462
    348A: 3C 88 00 CMP   [__r1],0x0
    348D: BF D4    JNZ   0x3462
    348F: 56 03 00 MOV   [X+3],0x0
    3492: 56 02 00 MOV   [X+2],0x0
    3495: 62 D0 01 MOV   REG[0xD0],0x1
    3498: 52 FC    MOV   A,[X-4]
    349A: 53 88    MOV   [__r1],A
    349C: 52 FB    MOV   A,[X-5]
    349E: 10       PUSH  X
    349F: 58 88    MOV   X,[__r1]
    34A1: 28       ROMX  
    34A2: 20       POP   X
    34A3: 39 2D    CMP   A,0x2D
    34A5: B0 0E    JNZ   0x34B4
    34A7: 56 03 01 MOV   [X+3],0x1
    34AA: 56 02 00 MOV   [X+2],0x0
    34AD: 77 FC    INC   [X-4]
    34AF: 0F FB 00 ADC   [X-5],0x0
    34B2: 80 18    JMP   0x34CB
    34B4: 62 D0 01 MOV   REG[0xD0],0x1
    34B7: 52 FC    MOV   A,[X-4]
    34B9: 53 88    MOV   [__r1],A
    34BB: 52 FB    MOV   A,[X-5]
    34BD: 10       PUSH  X
    34BE: 58 88    MOV   X,[__r1]
    34C0: 28       ROMX  
    34C1: 20       POP   X
    34C2: 39 2B    CMP   A,0x2B
    34C4: B0 06    JNZ   0x34CB
    34C6: 77 FC    INC   [X-4]
    34C8: 0F FB 00 ADC   [X-5],0x0
    34CB: 56 01 00 MOV   [X+1],0x0
    34CE: 56 00 00 MOV   [X+0],0x0
    34D1: 80 7C    JMP   0x354E
    34D3: 62 D0 01 MOV   REG[0xD0],0x1
    34D6: 52 FC    MOV   A,[X-4]
    34D8: 53 88    MOV   [__r1],A
    34DA: 52 FB    MOV   A,[X-5]
    34DC: 53 89    MOV   [__r0],A
    34DE: 51 88    MOV   A,[__r1]
    34E0: 01 01    ADD   A,0x1
    34E2: 54 FC    MOV   [X-4],A
    34E4: 51 89    MOV   A,[__r0]
    34E6: 09 00    ADC   A,0x0
    34E8: 54 FB    MOV   [X-5],A
    34EA: 52 01    MOV   A,[X+1]
    34EC: 53 86    MOV   [__r3],A
    34EE: 52 00    MOV   A,[X+0]
    34F0: 53 87    MOV   [__r2],A
    34F2: 55 84 0A MOV   [__r5],0xA
    34F5: 55 85 00 MOV   [__r4],0x0
    34F8: 55 7D 00 MOV   [__rX],0x0
    34FB: 55 7C 00 MOV   [__rY],0x0
    34FE: 3C 85 00 CMP   [__r4],0x0
    3501: B0 06    JNZ   0x3508
    3503: 3C 84 00 CMP   [__r5],0x0
    3506: A0 1A    JZ    0x3521
    3508: 70 FB    AND   F,0xFB
    350A: 6E 85    RRC   [__r4]
    350C: 6E 84    RRC   [__r5]
    350E: D0 0C    JNC   0x351B
    3510: 62 D0 01 MOV   REG[0xD0],0x1
    3513: 51 86    MOV   A,[__r3]
    3515: 04 7D    ADD   [__rX],A
    3517: 51 87    MOV   A,[__r2]
    3519: 0C 7C    ADC   [__rY],A
    351B: 65 86    ASL   [__r3]
    351D: 6B 87    RLC   [__r2]
    351F: 8F DE    JMP   0x34FE
    3521: 5F 86 7D MOV   [__r3],[__rX]
    3524: 5F 87 7C MOV   [__r2],[__rY]
    3527: 62 D0 01 MOV   REG[0xD0],0x1
    352A: 51 89    MOV   A,[__r0]
    352C: 10       PUSH  X
    352D: 58 88    MOV   X,[__r1]
    352F: 28       ROMX  
    3530: 20       POP   X
    3531: 53 88    MOV   [__r1],A
    3533: 55 89 00 MOV   [__r0],0x0
    3536: 51 86    MOV   A,[__r3]
    3538: 02 88    ADD   A,[__r1]
    353A: 53 88    MOV   [__r1],A
    353C: 51 87    MOV   A,[__r2]
    353E: 0A 89    ADC   A,[__r0]
    3540: 53 89    MOV   [__r0],A
    3542: 51 88    MOV   A,[__r1]
    3544: 11 30    SUB   A,0x30
    3546: 54 01    MOV   [X+1],A
    3548: 51 89    MOV   A,[__r0]
    354A: 19 00    SBB   A,0x0
    354C: 54 00    MOV   [X+0],A
    354E: 62 D0 01 MOV   REG[0xD0],0x1
    3551: 52 FC    MOV   A,[X-4]
    3553: 53 88    MOV   [__r1],A
    3555: 52 FB    MOV   A,[X-5]
    3557: 10       PUSH  X
    3558: 58 88    MOV   X,[__r1]
    355A: 28       ROMX  
    355B: 20       POP   X
    355C: 53 88    MOV   [__r1],A
    355E: 50 00    MOV   A,0x0
    3560: 08       PUSH  A
    3561: 51 88    MOV   A,[__r1]
    3563: 08       PUSH  A
    3564: 7C 2C 30 LCALL _isdigit
    3567: 38 FE    ADD   SP,0xFE
    3569: 62 D0 01 MOV   REG[0xD0],0x1
    356C: 3C 89 00 CMP   [__r0],0x0
    356F: BF 63    JNZ   0x34D3
    3571: 3C 88 00 CMP   [__r1],0x0
    3574: BF 5E    JNZ   0x34D3
    3576: 3D 02 00 CMP   [X+2],0x0
    3579: B0 06    JNZ   0x3580
    357B: 3D 03 00 CMP   [X+3],0x0
    357E: A0 14    JZ    0x3593
    3580: 62 D0 01 MOV   REG[0xD0],0x1
    3583: 52 01    MOV   A,[X+1]
    3585: 73       CPL   A
    3586: 11 FF    SUB   A,0xFF
    3588: 53 88    MOV   [__r1],A
    358A: 52 00    MOV   A,[X+0]
    358C: 73       CPL   A
    358D: 19 FF    SBB   A,0xFF
    358F: 53 89    MOV   [__r0],A
    3591: 80 0C    JMP   0x359E
    3593: 62 D0 01 MOV   REG[0xD0],0x1
    3596: 52 01    MOV   A,[X+1]
    3598: 53 88    MOV   [__r1],A
    359A: 52 00    MOV   A,[X+0]
    359C: 53 89    MOV   [__r0],A
    359E: 38 FC    ADD   SP,0xFC
    35A0: 20       POP   X
    35A1: 7F       RET   
_abs:
    35A2: 10       PUSH  X
    35A3: 4F       MOV   X,SP
    35A4: 38 02    ADD   SP,0x2
    35A6: 52 FC    MOV   A,[X-4]
    35A8: 11 00    SUB   A,0x0
    35AA: 52 FB    MOV   A,[X-5]
    35AC: 31 80    XOR   A,0x80
    35AE: 19 80    SBB   A,0x80
    35B0: C0 0B    JC    0x35BC
    35B2: 52 FC    MOV   A,[X-4]
    35B4: 54 01    MOV   [X+1],A
    35B6: 52 FB    MOV   A,[X-5]
    35B8: 54 00    MOV   [X+0],A
    35BA: 80 0F    JMP   0x35CA
    35BC: 52 FC    MOV   A,[X-4]
    35BE: 73       CPL   A
    35BF: 11 FF    SUB   A,0xFF
    35C1: 54 01    MOV   [X+1],A
    35C3: 52 FB    MOV   A,[X-5]
    35C5: 73       CPL   A
    35C6: 19 FF    SBB   A,0xFF
    35C8: 54 00    MOV   [X+0],A
    35CA: 62 D0 01 MOV   REG[0xD0],0x1
    35CD: 52 01    MOV   A,[X+1]
    35CF: 53 88    MOV   [__r1],A
    35D1: 52 00    MOV   A,[X+0]
    35D3: 53 89    MOV   [__r0],A
    35D5: 38 FE    ADD   SP,0xFE
    35D7: 20       POP   X
    35D8: 7F       RET   
