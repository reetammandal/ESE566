FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    4.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C29xxx microcontroller family.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2011. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0082) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0083) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0084) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0085) ; bytes on the stack which are otherwise required for the return address. If
                                        (0086) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0087) ; release, the C compiler automatically places an infinite loop at the end
                                        (0088) ; of main, rather than a return instruction.)
                                        (0089) ;
                                        (0090) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0091) 
                                        (0092) 
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ; Interrupt Vector Table
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;
                                        (0097) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0098) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0099) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0100) ; vector jump targets are modified automatically according to the user
                                        (0101) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0102) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0103) ; configuration files. If you need to hard code a vector, update the
                                        (0104) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0105) ; of this file.
                                        (0106) ;-----------------------------------------------------------------------------
                                        (0107) 
                                        (0108)     AREA TOP (ROM, ABS, CON)
                                        (0109) 
                                        (0110)     org   0                        ;Reset Interrupt Vector
                                        (0111) IF	(TOOLCHAIN & HITECH)
                                        (0112) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0113) ELSE
0000: 80 67    JMP   0x0068             (0114)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0115) ENDIF
                                        (0116)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0117)     ;---------------------------------------------------
                                        (0118)     ; Insert your custom code below this banner
                                        (0119)     ;---------------------------------------------------
                                        (0120) 
                                        (0121)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0122)     halt                           ;Stop execution if power falls too low
                                        (0123) 
                                        (0124)     org   08h                      ;Analog Column 0 Interrupt Vector
                                        (0125)     // call	void_handler
0008: 7E       RETI                     (0126)     reti
                                        (0127) 
                                        (0128)     org   0Ch                      ;Analog Column 1 Interrupt Vector
                                        (0129)     // call	void_handler
000C: 7E       RETI                     (0130)     reti
                                        (0131) 
                                        (0132)     org   10h                      ;Analog Column 2 Interrupt Vector
                                        (0133)     // call	void_handler
0010: 7E       RETI                     (0134)     reti
                                        (0135) 
                                        (0136)     org   14h                      ;Analog Column 3 Interrupt Vector
                                        (0137)     // call	void_handler
0014: 7E       RETI                     (0138)     reti
                                        (0139) 
                                        (0140)     org   18h                      ;VC3 Interrupt Vector
                                        (0141)     // call	void_handler
0018: 7E       RETI                     (0142)     reti
                                        (0143) 
                                        (0144)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0145)     // call	void_handler
001C: 7E       RETI                     (0146)     reti
                                        (0147) 
                                        (0148)     org   20h                      ;PSoC Block DBB00 Interrupt Vector
0020: 7D 08 75 LJMP  _ADC_CNT_ISR       (0149)     ljmp	_ADC_CNT_ISR
0023: 7E       RETI                     (0150)     reti
                                        (0151) 
                                        (0152)     org   24h                      ;PSoC Block DBB01 Interrupt Vector
                                        (0153)     // call	void_handler
0024: 7E       RETI                     (0154)     reti
                                        (0155) 
                                        (0156)     org   28h                      ;PSoC Block DCB02 Interrupt Vector
0028: 7D 08 78 LJMP  _ADC_PWM16_ISR     (0157)     ljmp	_ADC_PWM16_ISR
002B: 7E       RETI                     (0158)     reti
                                        (0159) 
                                        (0160)     org   2Ch                      ;PSoC Block DCB03 Interrupt Vector
002C: 7D 06 29 LJMP  _PWM8_Speaker_ISR  (0161)     ljmp	_PWM8_Speaker_ISR
002F: 7E       RETI                     (0162)     reti
                                        (0163) 
                                        (0164)     org   30h                      ;PSoC Block DBB10 Interrupt Vector
                                        (0165)     // call	void_handler
0030: 7E       RETI                     (0166)     reti
                                        (0167) 
                                        (0168)     org   34h                      ;PSoC Block DBB11 Interrupt Vector
                                        (0169)     // call	void_handler
0034: 7E       RETI                     (0170)     reti
                                        (0171) 
                                        (0172)     org   38h                      ;PSoC Block DCB12 Interrupt Vector
                                        (0173)     // call	void_handler
0038: 7E       RETI                     (0174)     reti
                                        (0175) 
                                        (0176)     org   3Ch                      ;PSoC Block DCB13 Interrupt Vector
003C: 7D 0E AE LJMP  _Timer_ISR         (0177)     ljmp _Timer_ISR
003F: 7E       RETI                     (0178)     reti
                                        (0179) 
                                        (0180)     org   40h                      ;PSoC Block DBB20 Interrupt Vector
                                        (0181)     // call	void_handler
0040: 7E       RETI                     (0182)     reti
                                        (0183) 
                                        (0184)     org   44h                      ;PSoC Block DBB21 Interrupt Vector
                                        (0185)     // call	void_handler
0044: 7E       RETI                     (0186)     reti
                                        (0187) 
                                        (0188)     org   48h                      ;PSoC Block DCB22 Interrupt Vector
                                        (0189)     // call	void_handler
0048: 7E       RETI                     (0190)     reti
                                        (0191) 
                                        (0192)     org   4Ch                      ;PSoC Block DCB23 Interrupt Vector
                                        (0193)     // call	void_handler
004C: 7E       RETI                     (0194)     reti
                                        (0195) 
                                        (0196)     org   50h                      ;PSoC Block DBB30 Interrupt Vector
                                        (0197)     // call	void_handler
0050: 7E       RETI                     (0198)     reti
                                        (0199) 
                                        (0200)     org   54h                      ;PSoC Block DBB31 Interrupt Vector
                                        (0201)     // call	void_handler
0054: 7E       RETI                     (0202)     reti
                                        (0203) 
                                        (0204)     org   58h                      ;PSoC Block DCB32 Interrupt Vector
                                        (0205)     // call	void_handler
0058: 7E       RETI                     (0206)     reti
                                        (0207) 
                                        (0208)     org   5Ch                      ;PSoC Block DCB33 Interrupt Vector
                                        (0209)     // call	void_handler
005C: 7E       RETI                     (0210)     reti
                                        (0211) 
                                        (0212)     org   60h                      ;PSoC I2C Interrupt Vector
                                        (0213)     // call	void_handler
0060: 7E       RETI                     (0214)     reti
                                        (0215) 
                                        (0216)     org   64h                      ;Sleep Timer Interrupt Vector
                                        (0217)     // call	void_handler
0064: 7E       RETI                     (0218)     reti
0068: 71 10    OR    F,0x10             
                                        (0219)     ;---------------------------------------------------
                                        (0220)     ; Insert your custom code above this banner
                                        (0221)     ;---------------------------------------------------
                                        (0222)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0223) 
                                        (0224) ;-----------------------------------------------------------------------------
                                        (0225) ;  Start of Execution.
                                        (0226) ;-----------------------------------------------------------------------------
                                        (0227) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0228) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0229) ;
                                        (0230) 
                                        (0231) IF	(TOOLCHAIN & HITECH)
                                        (0232)  	AREA PD_startup(CODE, REL, CON)
                                        (0233) ELSE
                                        (0234)     org 68h
                                        (0235) ENDIF
                                        (0236) __Start:
                                        (0237) 
                                        (0238)     ; initialize SMP values for voltage stabilization, if required,
                                        (0239)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0240)     ; least for now. 
                                        (0241)     ;
                                        (0242)     M8C_SetBank1
006A: 62 FA 00 MOV   REG[0xFA],0x0      (0243)     mov reg[0FAh], 0				;Reset flash location
006D: 62 E3 87 MOV   REG[0xE3],0x87     (0244)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0070: 70 EF    AND   F,0xEF             
                                        (0245)     M8C_SetBank0
                                        (0246) 
                                        (0247)     ; %53%20%46%46% Apply Erratum 001-05137 workaround
0072: 50 20    MOV   A,0x20             (0248)     mov   A, 20h
0074: 28       ROMX                     (0249)     romx
0075: 50 40    MOV   A,0x40             (0250)     mov   A, 40h
0077: 28       ROMX                     (0251)     romx
0078: 50 60    MOV   A,0x60             (0252)     mov   A, 60h
007A: 28       ROMX                     (0253)     romx
007B: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0254)     ; %45%20%46%46% End workaround
                                        (0255) 
                                        (0256) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0257) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0258)     M8C_EnableWatchDog
                                        (0259) ENDIF
                                        (0260) 
                                        (0261) IF ( SELECT_32K )
                                        (0262)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0263) ELSE
007E: 41 FE FB AND   REG[0xFE],0xFB     (0264)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0265) ENDIF
                                        (0266) 
                                        (0267)     ;---------------------------
                                        (0268)     ; Set up the Temporary stack
                                        (0269)     ;---------------------------
                                        (0270)     ; A temporary stack is set up for the SSC instructions.
                                        (0271)     ; The real stack start will be assigned later.
                                        (0272)     ;
                                        (0273) _stack_start:          equ 80h
0081: 50 80    MOV   A,0x80             (0274)     mov   A, _stack_start          ; Set top of stack to end of used RAM
0083: 4E       SWAP  SP,A               (0275)     swap  SP, A                    ; This is only temporary if going to LMM
0084: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0276) 
                                        (0277)     ;-----------------------------------------------
                                        (0278)     ; Set Power-related Trim & the AGND Bypass bit.
                                        (0279)     ;-----------------------------------------------
                                        (0280) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0281) 
                                        (0282) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0283)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0284)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0285)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0286)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0287)   IF ( AGND_BYPASS )
                                        (0288)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0289)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0290)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0291)     ; value using the proper trim values.
                                        (0292)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0293)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0294)   ENDIF
                                        (0295)  ENDIF
                                        (0296) ENDIF ; 5.0 V Operation
                                        (0297) 
                                        (0298) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0299)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0300)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0301)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0302)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0303)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0304)  ENDIF
                                        (0305) ENDIF ; 3.3 Volt Operation
                                        (0306) 
0087: 55 F8 00 MOV   [i+108],0x0        (0307)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
008A: 55 F9 00 MOV   [i+109],0x0        (0308)     mov  [bSSC_KEYSP], 0
008D: 71 10    OR    F,0x10             
                                        (0309) 
                                        (0310)     ;---------------------------------------
                                        (0311)     ; Initialize Crystal Oscillator and PLL
                                        (0312)     ;---------------------------------------
                                        (0313) 
                                        (0314) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0315)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0316)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0317)     ; is left off. Set the SleepTimer period is set to 1 sec to time the wait for
                                        (0318)     ; the ECO to stabilize.
                                        (0319)     ;
                                        (0320)     M8C_SetBank1
                                        (0321)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0322)     M8C_SetBank0
                                        (0323)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0324)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0325)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0326) .WaitFor1s:
                                        (0327)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0328)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0329)                                           ;   since interrupts are not globally enabled
                                        (0330) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0331)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0332)     M8C_SetBank1
008F: 62 E0 02 MOV   REG[0xE0],0x2      (0333)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
0092: 70 EF    AND   F,0xEF             
0094: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0334)     M8C_SetBank0
                                        (0335)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0336) 
                                        (0337) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0338) 
                                        (0339) IF ( PLL_MODE )
                                        (0340)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0341)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0342)     ;
                                        (0343)     M8C_SetBank1
                                        (0344)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0345)     M8C_SetBank0
                                        (0346)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0347)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0348) 
                                        (0349) .WaitFor16ms:
                                        (0350)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0351)     jz   .WaitFor16ms
                                        (0352)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0353)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0354)     M8C_SetBank0
                                        (0355) 
                                        (0356) IF      ( WAIT_FOR_32K )
                                        (0357) ELSE ; !( WAIT_FOR_32K )
                                        (0358)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0359)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0360) ENDIF ;(WAIT_FOR_32K)
                                        (0361) ENDIF ;(PLL_MODE)
                                        (0362) 
                                        (0363) 	;-------------------------------------------------------
                                        (0364)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0365)     ;-------------------------------------------------------
                                        (0366) 
                                        (0367)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0368) 
                                        (0369) IF (SYSCLK_SOURCE)
                                        (0370)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0371) ENDIF
                                        (0372)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0373) 
                                        (0374)     ;------------------------
                                        (0375)     ; Close CT leakage path.
                                        (0376)     ;------------------------
0097: 62 71 05 MOV   REG[0x71],0x5      (0377)     mov   reg[ACB00CR0], 05h
009A: 62 75 05 MOV   REG[0x75],0x5      (0378)     mov   reg[ACB01CR0], 05h
009D: 62 79 05 MOV   REG[0x79],0x5      (0379)     mov   reg[ACB02CR0], 05h
00A0: 62 7D 05 MOV   REG[0x7D],0x5      (0380)     mov   reg[ACB03CR0], 05h
00A3: 62 D1 07 MOV   REG[0xD1],0x7      
                                        (0381) 
                                        (0382) 
                                        (0383) IF	(TOOLCHAIN & HITECH)
                                        (0384)     ;---------------------------------------------
                                        (0385)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0386)     ;---------------------------------------------
                                        (0387) 	global		__Lstackps
                                        (0388) 	mov     a,low __Lstackps
                                        (0389) 	swap    a,sp
                                        (0390) 
                                        (0391) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0392)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0393)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0394)     RAM_SETPAGE_CUR 0
                                        (0395)     RAM_SETPAGE_MVW 0
                                        (0396)     RAM_SETPAGE_MVR 0
                                        (0397)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0398)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0399)     ELSE
                                        (0400)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0401)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0402) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0403) ELSE
                                        (0404)     ;---------------------------------------------
                                        (0405)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0406)     ;---------------------------------------------
                                        (0407) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0408)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00A6: 50 00    MOV   A,0x0              (0409)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00A8: 4E       SWAP  SP,A               (0410)     swap  A, SP
00A9: 62 D3 07 MOV   REG[0xD3],0x7      
00AC: 62 D0 00 MOV   REG[0xD0],0x0      
00AF: 62 D5 00 MOV   REG[0xD5],0x0      
00B2: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0411)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0412)     RAM_SETPAGE_CUR 0
                                        (0413)     RAM_SETPAGE_MVW 0
                                        (0414)     RAM_SETPAGE_MVR 0
                                        (0415) 
                                        (0416)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00B5: 71 C0    OR    F,0xC0             (0417)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0418)   ELSE
                                        (0419)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0420)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0421) ELSE
                                        (0422)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0423)     swap  SP, A
                                        (0424) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0425) ENDIF ;	TOOLCHAIN
                                        (0426) 
                                        (0427)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0428)     ;---------------------------------------------------
                                        (0429)     ; Insert your custom code below this banner
                                        (0430)     ;---------------------------------------------------
                                        (0431) 
                                        (0432)     ;---------------------------------------------------
                                        (0433)     ; Insert your custom code above this banner
                                        (0434)     ;---------------------------------------------------
                                        (0435)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0436) 
                                        (0437)     ;-------------------------
                                        (0438)     ; Load Base Configuration
                                        (0439)     ;-------------------------
                                        (0440)     ; Load global parameter settings and load the user modules in the
                                        (0441)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0442)     ; to minimize start up time; (2) We may still need to play with the
                                        (0443)     ; Sleep Timer.
                                        (0444)     ;
00B7: 7C 05 05 LCALL 0x0505             (0445)     lcall LoadConfigInit
                                        (0446) 
                                        (0447)     ;-----------------------------------
                                        (0448)     ; Initialize C Run-Time Environment
                                        (0449)     ;-----------------------------------
                                        (0450) IF ( C_LANGUAGE_SUPPORT )
                                        (0451) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0452)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0453)     mov  [__r0],<__bss_start
                                        (0454) BssLoop:
                                        (0455)     cmp  [__r0],<__bss_end
                                        (0456)     jz   BssDone
                                        (0457)     mvi  [__r0],A
                                        (0458)     jmp  BssLoop
                                        (0459) BssDone:
                                        (0460)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0461)     mov  X,<__idata_start
                                        (0462)     mov  [__r0],<__data_start
                                        (0463) IDataLoop:
                                        (0464)     cmp  [__r0],<__data_end
                                        (0465)     jz   C_RTE_Done
                                        (0466)     push A
                                        (0467)     romx
                                        (0468)     mvi  [__r0],A
                                        (0469)     pop  A
                                        (0470)     inc  X
                                        (0471)     adc  A,0
                                        (0472)     jmp  IDataLoop
                                        (0473) 
                                        (0474) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0475) 
                                        (0476) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00BA: 62 D0 00 MOV   REG[0xD0],0x0      (0477)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0478)                                        ; to use the Virtual Register page.
                                        (0479) 
                                        (0480)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0481)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0482)     ; text segment and may have been relocated by the Code Compressor.
                                        (0483)     ;
00BD: 50 03    MOV   A,0x3              (0484)     mov   A, >__pXIData                ; Get the address of the flash
00BF: 57 FC    MOV   X,0xFC             (0485)     mov   X, <__pXIData                ;   pointer to the xidata area.
00C1: 08       PUSH  A                  (0486)     push  A
00C2: 28       ROMX                     (0487)     romx                               ; get the MSB of xidata's address
00C3: 53 70    MOV   [__r0],A           (0488)     mov   [__r0], A
00C5: 18       POP   A                  (0489)     pop   A
00C6: 75       INC   X                  (0490)     inc   X
00C7: 09 00    ADC   A,0x0              (0491)     adc   A, 0
00C9: 28       ROMX                     (0492)     romx                               ; get the LSB of xidata's address
00CA: 4B       SWAP  A,X                (0493)     swap  A, X
00CB: 51 70    MOV   A,[__r0]           (0494)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0495)                                        ;   XIData structure list in flash
00CD: 80 04    JMP   0x00D2             (0496)     jmp   .AccessStruct
                                        (0497) 
                                        (0498)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0499)     ; values of C variables. Each structure contains 3 member elements.
                                        (0500)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0501)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0502)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0503)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0504)     ; value in the second member element, an unsigned byte:
                                        (0505)     ; (1) If the value of the second element is non-zero, it represents
                                        (0506)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0507)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0508)     ; the bytes are copied to the block of RAM.
                                        (0509)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0510)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0511)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0512) 
                                        (0513) .AccessNextStructLoop:
00CF: 75       INC   X                  (0514)     inc   X                            ; pXIData++
00D0: 09 00    ADC   A,0x0              (0515)     adc   A, 0
00D2: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0516) .AccessStruct:                         ; Entry point for first block
                                        (0517)     ;
                                        (0518)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0519)     ;
                                        (0520)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00D5: 08       PUSH  A                  (0521)     push  A
00D6: 28       ROMX                     (0522)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00D7: 60 D5    MOV   REG[0xD5],A        (0523)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00D9: 74       INC   A                  (0524)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00DA: A0 4B    JZ    0x0126             (0525)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00DC: 18       POP   A                  (0526)     pop   A                            ; restore pXIData to [A,X]
00DD: 75       INC   X                  (0527)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0528)     adc   A, 0
00E0: 08       PUSH  A                  (0529)     push  A
00E1: 28       ROMX                     (0530)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00E2: 53 70    MOV   [__r0],A           (0531)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00E4: 18       POP   A                  (0532)     pop   A                            ; restore pXIData to [A,X]
00E5: 75       INC   X                  (0533)     inc   X                            ; pXIData++ (point to size)
00E6: 09 00    ADC   A,0x0              (0534)     adc   A, 0
00E8: 08       PUSH  A                  (0535)     push  A
00E9: 28       ROMX                     (0536)     romx                               ; Get the size (CPU.A <- *pXIData)
00EA: A0 1C    JZ    0x0107             (0537)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00EC: 53 6F    MOV   [__r1],A           (0538)     mov   [__r1], A                    ;             else downcount in __r1
00EE: 18       POP   A                  (0539)     pop   A                            ; restore pXIData to [A,X]
                                        (0540) 
                                        (0541) .CopyNextByteLoop:
                                        (0542)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0543)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0544)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0545)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0546)     ;
00EF: 75       INC   X                  (0547)     inc   X                            ; pXIData++ (point to next data byte)
00F0: 09 00    ADC   A,0x0              (0548)     adc   A, 0
00F2: 08       PUSH  A                  (0549)     push  A
00F3: 28       ROMX                     (0550)     romx                               ; Get the data value (CPU.A <- *pXIData)
00F4: 3F 70    MVI   [__r0],A           (0551)     mvi   [__r0], A                    ; Transfer the data to RAM
00F6: 47 70 FF TST   [__r0],0xFF        (0552)     tst   [__r0], 0xff                 ; Check for page crossing
00F9: B0 06    JNZ   0x0100             (0553)     jnz   .CopyLoopTail                ;   No crossing, keep going
00FB: 5D D5    MOV   A,REG[0xD5]        (0554)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
00FD: 74       INC   A                  (0555)     inc   A
00FE: 60 D5    MOV   REG[0xD5],A        (0556)     mov   reg[ MVW_PP], A
                                        (0557) .CopyLoopTail:
0100: 18       POP   A                  (0558)     pop   A                            ; restore pXIData to [A,X]
0101: 7A 6F    DEC   [__r1]             (0559)     dec   [__r1]                       ; End of this array in flash?
0103: BF EB    JNZ   0x00EF             (0560)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0105: 8F C9    JMP   0x00CF             (0561)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0562) 
                                        (0563) .ClearRAMBlockToZero:
0107: 18       POP   A                  (0564)     pop   A                            ; restore pXIData to [A,X]
0108: 75       INC   X                  (0565)     inc   X                            ; pXIData++ (point to next data byte)
0109: 09 00    ADC   A,0x0              (0566)     adc   A, 0
010B: 08       PUSH  A                  (0567)     push  A
010C: 28       ROMX                     (0568)     romx                               ; Get the run length (CPU.A <- *pXIData)
010D: 53 6F    MOV   [__r1],A           (0569)     mov   [__r1], A                    ; Initialize downcounter
010F: 50 00    MOV   A,0x0              (0570)     mov   A, 0                         ; Initialize source data
                                        (0571) 
                                        (0572) .ClearRAMBlockLoop:
                                        (0573)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0574)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0575)     ;
0111: 3F 70    MVI   [__r0],A           (0576)     mvi   [__r0], A                    ; Clear a byte
0113: 47 70 FF TST   [__r0],0xFF        (0577)     tst   [__r0], 0xff                 ; Check for page crossing
0116: B0 08    JNZ   0x011F             (0578)     jnz   .ClearLoopTail               ;   No crossing, keep going
0118: 5D D5    MOV   A,REG[0xD5]        (0579)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
011A: 74       INC   A                  (0580)     inc   A
011B: 60 D5    MOV   REG[0xD5],A        (0581)     mov   reg[ MVW_PP], A
011D: 50 00    MOV   A,0x0              (0582)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0583) .ClearLoopTail:
011F: 7A 6F    DEC   [__r1]             (0584)     dec   [__r1]                       ; Was this the last byte?
0121: BF EF    JNZ   0x0111             (0585)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0123: 18       POP   A                  (0586)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0124: 8F AA    JMP   0x00CF             (0587)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0588) 
                                        (0589) .C_RTE_WrapUp:
0126: 18       POP   A                  (0590)     pop   A                            ; balance stack
0127: 71 10    OR    F,0x10             
0129: 70 EF    AND   F,0xEF             
                                        (0591) 
                                        (0592) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0593) 
                                        (0594) C_RTE_Done:
                                        (0595) 
                                        (0596) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0597) 
                                        (0598)     ;-------------------------------
                                        (0599)     ; Voltage Stabilization for SMP
                                        (0600)     ;-------------------------------
                                        (0601) 
                                        (0602) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0603) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0604)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0605)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0606)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0607)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0608)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0609)     M8C_SetBank1
                                        (0610)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0611)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0612)     M8C_SetBank0
                                        (0613)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0614)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0615) .WaitFor2ms:
                                        (0616)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0617)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0618) ENDIF ; SMP is operational
                                        (0619) ENDIF ; 5.0V Operation
                                        (0620) 
                                        (0621)     ;-------------------------------
                                        (0622)     ; Set Power-On Reset (POR) Level
                                        (0623)     ;-------------------------------
                                        (0624)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0625)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0626)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0627)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0628)     ;  Technical Reference Manual #001-14463 for more information.
                                        (0629) 
                                        (0630)     M8C_SetBank1
                                        (0631) 
                                        (0632) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0633)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0634)  ELSE                                       ;    No, fast mode
                                        (0635)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0636)                                             ;       no, set midpoint POR in user code, if desired
                                        (0637)   ELSE ; 24HMz                              ;
                                        (0638)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0639)   ENDIF ; 24MHz
                                        (0640)  ENDIF ; Slow Mode
                                        (0641) ENDIF ; 5.0V Operation
                                        (0642) 
                                        (0643)     M8C_SetBank0
                                        (0644) 
                                        (0645)     ;----------------------------
                                        (0646)     ; Wrap up and invoke "main"
                                        (0647)     ;----------------------------
                                        (0648) 
                                        (0649)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0650)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0651)     ;
012B: 62 E0 00 MOV   REG[0xE0],0x0      (0652)     mov  reg[INT_MSK0],0
012E: 71 10    OR    F,0x10             
                                        (0653) 
                                        (0654)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0655)     ; And put decimator in full mode so it does not consume too much current.
                                        (0656)     ;
                                        (0657)     M8C_SetBank1
0130: 62 E0 00 MOV   REG[0xE0],0x0      (0658)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0133: 43 E7 80 OR    REG[0xE7],0x80     (0659)     or   reg[DEC_CR2],80h                    ; Put decimator in full mode
0136: 70 EF    AND   F,0xEF             
                                        (0660)     M8C_SetBank0
                                        (0661) 
                                        (0662)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0663)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0664)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0665)     ;
0138: 62 E2 00 MOV   REG[0xE2],0x0      (0666)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0667)                                    ; have been set during the boot process.
                                        (0668) IF	(TOOLCHAIN & HITECH)
                                        (0669) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0670) ELSE
                                        (0671) IF ENABLE_LJMP_TO_MAIN
                                        (0672)     ljmp  _main                    ; goto main (no return)
                                        (0673) ELSE
013B: 7C 0F 2D LCALL _main              (0674)     lcall _main                    ; call main
                                        (0675) .Exit:
013E: 8F FF    JMP   0x013E             (0676)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0677) ENDIF
                                        (0678) ENDIF ; TOOLCHAIN
                                        (0679) 
                                        (0680)     ;---------------------------------
                                        (0681)     ; Library Access to Global Parms
                                        (0682)     ;---------------------------------
                                        (0683)     ;
                                        (0684)  bGetPowerSetting:
                                        (0685) _bGetPowerSetting:
                                        (0686)     ; Returns value of POWER_SETTING in the A register.
                                        (0687)     ; No inputs. No Side Effects.
                                        (0688)     ;
0140: 50 10    MOV   A,0x10             (0689)     mov   A, POWER_SETTING
0142: 7F       RET                      (0690)     ret
                                        (0691) 
                                        (0692) IF	(TOOLCHAIN & HITECH)
                                        (0693) ELSE
                                        (0694)     ;---------------------------------
                                        (0695)     ; Order Critical RAM & ROM AREAs
                                        (0696)     ;---------------------------------
                                        (0697)     ;  'TOP' is all that has been defined so far...
                                        (0698) 
                                        (0699)     ;  ROM AREAs for C CONST, static & global items
                                        (0700)     ;
                                        (0701)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0702)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0703) __idata_start:
                                        (0704) 
                                        (0705)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0706) __func_lit_start:
                                        (0707) 
                                        (0708) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0709)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0710)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0711)     ; relocated by the code compressor, but the text area may shrink and
                                        (0712)     ; that moves xidata around.
                                        (0713)     ;
                                        (0714) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0715) ENDIF
                                        (0716) 
                                        (0717)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0718)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0719) 
                                        (0720)     ; CODE segment for general use
                                        (0721)     ;
                                        (0722)     AREA text (ROM, REL, CON)
                                        (0723) __text_start:
                                        (0724) 
                                        (0725)     ; RAM area usage
                                        (0726)     ;
                                        (0727)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0728) __data_start:
                                        (0729) 
                                        (0730)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0731)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0732)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0733) __bss_start:
                                        (0734) 
                                        (0735) ENDIF ; TOOLCHAIN
                                        (0736) 
                                        (0737) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
0400: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_example_adc_lcd_Bank1
                                        (0019) export LoadConfigTBL_example_adc_lcd_Bank0
                                        (0020) export LoadConfigTBL_example_adc_lcd_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_example_adc_lcd_Bank0:
                                        (0023) ;  Instance name ADC, User Module ADCINCVR
                                        (0024) ;       Instance name ADC, Block Name ADC(ASC10)
                                        (0025) 	db		80h, 90h		;ADC_bfAtoDcr0       (ASC10CR0)
                                        (0026) 	db		81h, 00h		;ADC_bfAtoDcr1       (ASC10CR1)
                                        (0027) 	db		82h, 61h		;ADC_bfAtoDcr2       (ASC10CR2)
                                        (0028) 	db		83h, f0h		;ADC_bfAtoDcr3       (ASC10CR3)
                                        (0029) ;       Instance name ADC, Block Name CNT(DBB00)
                                        (0030) 	db		23h, 00h		;ADC_bCounter_CR0    (DBB00CR0)
                                        (0031) 	db		21h, 00h		;ADC_bPeriod         (DBB00DR1)
                                        (0032) 	db		22h, 00h		;ADC_bCompare        (DBB00DR2)
                                        (0033) ;       Instance name ADC, Block Name PWM16_LSB(DBB01)
                                        (0034) 	db		27h, 00h		;ADC_fPWM_LSB_CR0    (DBB01CR0)
                                        (0035) 	db		25h, 00h		;ADC_bPWM_Period_LSB (DBB01DR1)
                                        (0036) 	db		26h, 00h		;ADC_bPWM_IntTime_LSB(DBB01DR2)
                                        (0037) ;       Instance name ADC, Block Name PWM16_MSB(DCB02)
                                        (0038) 	db		2bh, 00h		;ADC_fPWM_MSB_CR0    (DCB02CR0)
                                        (0039) 	db		29h, 00h		;ADC_bPWM_Period_MSB (DCB02DR1)
                                        (0040) 	db		2ah, 00h		;ADC_bPWM_IntTime_MSB(DCB02DR2)
                                        (0041) ;  Instance name LCD, User Module LCD
                                        (0042) ;  Instance name PGA, User Module PGA
                                        (0043) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0044) 	db		71h, feh		;PGA_GAIN_CR0(ACB00CR0)
                                        (0045) 	db		72h, 21h		;PGA_GAIN_CR1(ACB00CR1)
                                        (0046) 	db		73h, 20h		;PGA_GAIN_CR2(ACB00CR2)
                                        (0047) 	db		70h, 00h		;PGA_GAIN_CR3(ACB00CR3)
                                        (0048) ;  Instance name PWM8_Speaker, User Module PWM8
                                        (0049) ;       Instance name PWM8_Speaker, Block Name PWM8(DCB03)
                                        (0050) 	db		2fh, 00h		;PWM8_Speaker_CONTROL_REG(DCB03CR0)
                                        (0051) 	db		2dh, ffh		;PWM8_Speaker_PERIOD_REG(DCB03DR1)
                                        (0052) 	db		2eh, 28h		;PWM8_Speaker_COMPARE_REG(DCB03DR2)
                                        (0053) ;  Instance name Timer32_1, User Module Timer32
                                        (0054) ;       Instance name Timer32_1, Block Name TIMER32_ISB1(DBB11)
                                        (0055) 	db		37h, 00h		;Timer32_1_CONTROL_ISB1_REG(DBB11CR0)
                                        (0056) 	db		35h, 8ch		;Timer32_1_PERIOD_ISB1_REG(DBB11DR1)
                                        (0057) 	db		36h, 46h		;Timer32_1_COMPARE_ISB1_REG(DBB11DR2)
                                        (0058) ;       Instance name Timer32_1, Block Name TIMER32_ISB2(DCB12)
                                        (0059) 	db		3bh, 00h		;Timer32_1_CONTROL_ISB2_REG(DCB12CR0)
                                        (0060) 	db		39h, 86h		;Timer32_1_PERIOD_ISB2_REG(DCB12DR1)
                                        (0061) 	db		3ah, c3h		;Timer32_1_COMPARE_ISB2_REG(DCB12DR2)
                                        (0062) ;       Instance name Timer32_1, Block Name TIMER32_LSB(DBB10)
                                        (0063) 	db		33h, 00h		;Timer32_1_CONTROL_LSB_REG(DBB10CR0)
                                        (0064) 	db		31h, 00h		;Timer32_1_PERIOD_LSB_REG(DBB10DR1)
                                        (0065) 	db		32h, 00h		;Timer32_1_COMPARE_LSB_REG(DBB10DR2)
                                        (0066) ;       Instance name Timer32_1, Block Name TIMER32_MSB(DCB13)
                                        (0067) 	db		3fh, 04h		;Timer32_1_CONTROL_MSB_REG(DCB13CR0)
                                        (0068) 	db		3dh, 47h		;Timer32_1_PERIOD_MSB_REG(DCB13DR1)
                                        (0069) 	db		3eh, 23h		;Timer32_1_COMPARE_MSB_REG(DCB13DR2)
                                        (0070) ;  Global Register values Bank 0
                                        (0071) 	db		60h, 29h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0072) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0073) 	db		63h, 17h		; AnalogReferenceControl register (ARF_CR)
                                        (0074) 	db		65h, 00h		; AnalogSyncControl register (ASY_CR)
                                        (0075) 	db		e6h, 10h		; DecimatorControl_0 register (DEC_CR0)
                                        (0076) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0077) 	db		d6h, 00h		; I2CConfig register (I2C_CFG)
                                        (0078) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0079) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0080) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0081) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0082) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0083) 	db		b5h, 10h		; Row_0_OutputDrive_0 register (RDI0SRO0)
                                        (0084) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0SRO1)
                                        (0085) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0086) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0087) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0088) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0089) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0090) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1SRO0)
                                        (0091) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1SRO1)
                                        (0092) 	db		c0h, 00h		; Row_2_InputMux register (RDI2RI)
                                        (0093) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0094) 	db		c2h, 20h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0095) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0096) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI3LT1)
                                        (0097) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2SRO0)
                                        (0098) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2SRO1)
                                        (0099) 	db		c8h, 55h		; Row_3_InputMux register (RDI3RI)
                                        (0100) 	db		c9h, 00h		; Row_3_InputSync register (RDI3SYN)
                                        (0101) 	db		cah, 30h		; Row_3_LogicInputAMux register (RDI3IS)
                                        (0102) 	db		cbh, 33h		; Row_3_LogicSelect_0 register (RDI3LT0)
                                        (0103) 	db		cch, 33h		; Row_3_LogicSelect_1 register (RDI3LT1)
                                        (0104) 	db		cdh, 00h		; Row_3_OutputDrive_0 register (RDI3SRO0)
                                        (0105) 	db		ceh, 00h		; Row_3_OutputDrive_1 register (RDI3SRO1)
                                        (0106) 	db		6ch, 00h		; TMP_DR0 register (TMP_DR0)
                                        (0107) 	db		6dh, 00h		; TMP_DR1 register (TMP_DR1)
                                        (0108) 	db		6eh, 00h		; TMP_DR2 register (TMP_DR2)
                                        (0109) 	db		6fh, 00h		; TMP_DR3 register (TMP_DR3)
                                        (0110) 	db		ffh
                                        (0111) LoadConfigTBL_example_adc_lcd_Bank1:
                                        (0112) ;  Instance name ADC, User Module ADCINCVR
                                        (0113) ;       Instance name ADC, Block Name ADC(ASC10)
                                        (0114) ;       Instance name ADC, Block Name CNT(DBB00)
                                        (0115) 	db		20h, 21h		;ADC_fCounterFN      (DBB00FN)
                                        (0116) 	db		21h, 45h		;ADC_fCounterSL      (DBB00IN)
                                        (0117) 	db		22h, 40h		;ADC_fCounterOS      (DBB00OU)
                                        (0118) ;       Instance name ADC, Block Name PWM16_LSB(DBB01)
                                        (0119) 	db		24h, 01h		;ADC_bfPWM_LSB_FN    (DBB01FN)
                                        (0120) 	db		25h, 15h		;ADC_(DBB01IN)
                                        (0121) 	db		26h, 40h		;ADC_(DBB01OU)
                                        (0122) ;       Instance name ADC, Block Name PWM16_MSB(DCB02)
                                        (0123) 	db		28h, 21h		;ADC_bfPWM_MSB_FN    (DCB02FN)
                                        (0124) 	db		29h, 35h		;ADC_(DCB02IN)
                                        (0125) 	db		2ah, 40h		;ADC_(DCB02OU)
                                        (0126) ;  Instance name LCD, User Module LCD
                                        (0127) ;  Instance name PGA, User Module PGA
                                        (0128) ;       Instance name PGA, Block Name GAIN(ACB00)
                                        (0129) ;  Instance name PWM8_Speaker, User Module PWM8
                                        (0130) ;       Instance name PWM8_Speaker, Block Name PWM8(DCB03)
                                        (0131) 	db		2ch, 31h		;PWM8_Speaker_FUNC_REG(DCB03FN)
                                        (0132) 	db		2dh, 16h		;PWM8_Speaker_INPUT_REG(DCB03IN)
                                        (0133) 	db		2eh, 45h		;PWM8_Speaker_OUTPUT_REG(DCB03OU)
                                        (0134) ;  Instance name Timer32_1, User Module Timer32
                                        (0135) ;       Instance name Timer32_1, Block Name TIMER32_ISB1(DBB11)
                                        (0136) 	db		34h, 00h		;Timer32_1_FUNC_ISB1_REG(DBB11FN)
                                        (0137) 	db		35h, 31h		;Timer32_1_INPUT_ISB1_REG(DBB11IN)
                                        (0138) 	db		36h, c0h		;Timer32_1_OUTPUT_ISB1_REG(DBB11OU)
                                        (0139) ;       Instance name Timer32_1, Block Name TIMER32_ISB2(DCB12)
                                        (0140) 	db		38h, 00h		;Timer32_1_FUNC_ISB2_REG(DCB12FN)
                                        (0141) 	db		39h, 31h		;Timer32_1_INPUT_ISB2_REG(DCB12IN)
                                        (0142) 	db		3ah, c0h		;Timer32_1_OUTPUT_ISB2_REG(DCB12OU)
                                        (0143) ;       Instance name Timer32_1, Block Name TIMER32_LSB(DBB10)
                                        (0144) 	db		30h, 00h		;Timer32_1_FUNC_LSB_REG(DBB10FN)
                                        (0145) 	db		31h, 01h		;Timer32_1_INPUT_LSB_REG(DBB10IN)
                                        (0146) 	db		32h, c0h		;Timer32_1_OUTPUT_LSB_REG(DBB10OU)
                                        (0147) ;       Instance name Timer32_1, Block Name TIMER32_MSB(DCB13)
                                        (0148) 	db		3ch, 20h		;Timer32_1_FUNC_MSB_REG(DCB13FN)
                                        (0149) 	db		3dh, 31h		;Timer32_1_INPUT_MSB_REG(DCB13IN)
                                        (0150) 	db		3eh, c0h		;Timer32_1_OUTPUT_MSB_REG(DCB13OU)
                                        (0151) ;  Global Register values Bank 1
                                        (0152) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0153) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0154) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0155) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0156) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0157) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0158) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0159) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0160) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0161) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0162) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0163) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0164) 	db		e1h, bfh		; OscillatorControl_1 register (OSC_CR1)
                                        (0165) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0166) 	db		dfh, 0fh		; OscillatorControl_3 register (OSC_CR3)
                                        (0167) 	db		deh, 00h		; OscillatorControl_4 register (OSC_CR4)
                                        (0168) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0169) 	db		e7h, 00h		; Type2Decimator_Control register (DEC_CR2)
                                        (0170) 	db		ffh
                                        (0171) AREA psoc_config(rom, rel)
                                        (0172) LoadConfigTBL_example_adc_lcd_Ordered:
                                        (0173) ;  Ordered Global Register values
                                        (0174) 	M8C_SetBank0
0402: 62 00 00 MOV   REG[0x0],0x0       (0175) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0405: 71 10    OR    F,0x10             
                                        (0176) 	M8C_SetBank1
0407: 62 00 02 MOV   REG[0x0],0x2       (0177) 	mov	reg[00h], 02h		; Port_0_DriveMode_0 register (PRT0DM0)
040A: 62 01 FD MOV   REG[0x1],0xFD      (0178) 	mov	reg[01h], fdh		; Port_0_DriveMode_1 register (PRT0DM1)
040D: 70 EF    AND   F,0xEF             
                                        (0179) 	M8C_SetBank0
040F: 62 03 FD MOV   REG[0x3],0xFD      (0180) 	mov	reg[03h], fdh		; Port_0_DriveMode_2 register (PRT0DM2)
0412: 62 02 02 MOV   REG[0x2],0x2       (0181) 	mov	reg[02h], 02h		; Port_0_GlobalSelect register (PRT0GS)
0415: 71 10    OR    F,0x10             
                                        (0182) 	M8C_SetBank1
0417: 62 02 00 MOV   REG[0x2],0x0       (0183) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
041A: 62 03 00 MOV   REG[0x3],0x0       (0184) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
041D: 70 EF    AND   F,0xEF             
                                        (0185) 	M8C_SetBank0
041F: 62 01 00 MOV   REG[0x1],0x0       (0186) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0422: 62 04 00 MOV   REG[0x4],0x0       (0187) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0425: 71 10    OR    F,0x10             
                                        (0188) 	M8C_SetBank1
0427: 62 04 00 MOV   REG[0x4],0x0       (0189) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
042A: 62 05 FF MOV   REG[0x5],0xFF      (0190) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
042D: 70 EF    AND   F,0xEF             
                                        (0191) 	M8C_SetBank0
042F: 62 07 FF MOV   REG[0x7],0xFF      (0192) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
0432: 62 06 00 MOV   REG[0x6],0x0       (0193) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
0435: 71 10    OR    F,0x10             
                                        (0194) 	M8C_SetBank1
0437: 62 06 00 MOV   REG[0x6],0x0       (0195) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
043A: 62 07 00 MOV   REG[0x7],0x0       (0196) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
043D: 70 EF    AND   F,0xEF             
                                        (0197) 	M8C_SetBank0
043F: 62 05 00 MOV   REG[0x5],0x0       (0198) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0442: 62 08 00 MOV   REG[0x8],0x0       (0199) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0445: 71 10    OR    F,0x10             
                                        (0200) 	M8C_SetBank1
0447: 62 08 7F MOV   REG[0x8],0x7F      (0201) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
044A: 62 09 80 MOV   REG[0x9],0x80      (0202) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
044D: 70 EF    AND   F,0xEF             
                                        (0203) 	M8C_SetBank0
044F: 62 0B 80 MOV   REG[0xB],0x80      (0204) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
0452: 62 0A 00 MOV   REG[0xA],0x0       (0205) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0455: 71 10    OR    F,0x10             
                                        (0206) 	M8C_SetBank1
0457: 62 0A 00 MOV   REG[0xA],0x0       (0207) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
045A: 62 0B 00 MOV   REG[0xB],0x0       (0208) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
045D: 70 EF    AND   F,0xEF             
                                        (0209) 	M8C_SetBank0
045F: 62 09 00 MOV   REG[0x9],0x0       (0210) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0462: 62 0C 00 MOV   REG[0xC],0x0       (0211) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0465: 71 10    OR    F,0x10             
                                        (0212) 	M8C_SetBank1
0467: 62 0C 00 MOV   REG[0xC],0x0       (0213) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
046A: 62 0D 00 MOV   REG[0xD],0x0       (0214) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
046D: 70 EF    AND   F,0xEF             
                                        (0215) 	M8C_SetBank0
046F: 62 0F 00 MOV   REG[0xF],0x0       (0216) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0472: 62 0E 00 MOV   REG[0xE],0x0       (0217) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0475: 71 10    OR    F,0x10             
                                        (0218) 	M8C_SetBank1
0477: 62 0E 00 MOV   REG[0xE],0x0       (0219) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
047A: 62 0F 00 MOV   REG[0xF],0x0       (0220) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
047D: 70 EF    AND   F,0xEF             
                                        (0221) 	M8C_SetBank0
047F: 62 0D 00 MOV   REG[0xD],0x0       (0222) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
0482: 62 10 00 MOV   REG[0x10],0x0      (0223) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
0485: 71 10    OR    F,0x10             
                                        (0224) 	M8C_SetBank1
0487: 62 10 00 MOV   REG[0x10],0x0      (0225) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
048A: 62 11 00 MOV   REG[0x11],0x0      (0226) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
048D: 70 EF    AND   F,0xEF             
                                        (0227) 	M8C_SetBank0
048F: 62 13 00 MOV   REG[0x13],0x0      (0228) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
0492: 62 12 00 MOV   REG[0x12],0x0      (0229) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
0495: 71 10    OR    F,0x10             
                                        (0230) 	M8C_SetBank1
0497: 62 12 00 MOV   REG[0x12],0x0      (0231) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
049A: 62 13 00 MOV   REG[0x13],0x0      (0232) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
049D: 70 EF    AND   F,0xEF             
                                        (0233) 	M8C_SetBank0
049F: 62 11 00 MOV   REG[0x11],0x0      (0234) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
04A2: 62 14 00 MOV   REG[0x14],0x0      (0235) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
04A5: 71 10    OR    F,0x10             
                                        (0236) 	M8C_SetBank1
04A7: 62 14 00 MOV   REG[0x14],0x0      (0237) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
04AA: 62 15 00 MOV   REG[0x15],0x0      (0238) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
04AD: 70 EF    AND   F,0xEF             
                                        (0239) 	M8C_SetBank0
04AF: 62 17 00 MOV   REG[0x17],0x0      (0240) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
04B2: 62 16 00 MOV   REG[0x16],0x0      (0241) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
04B5: 71 10    OR    F,0x10             
                                        (0242) 	M8C_SetBank1
04B7: 62 16 00 MOV   REG[0x16],0x0      (0243) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
04BA: 62 17 00 MOV   REG[0x17],0x0      (0244) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
04BD: 70 EF    AND   F,0xEF             
                                        (0245) 	M8C_SetBank0
04BF: 62 15 00 MOV   REG[0x15],0x0      (0246) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
04C2: 62 18 00 MOV   REG[0x18],0x0      (0247) 	mov	reg[18h], 00h		; Port_6_Data register (PRT6DR)
04C5: 71 10    OR    F,0x10             
                                        (0248) 	M8C_SetBank1
04C7: 62 18 00 MOV   REG[0x18],0x0      (0249) 	mov	reg[18h], 00h		; Port_6_DriveMode_0 register (PRT6DM0)
04CA: 62 19 00 MOV   REG[0x19],0x0      (0250) 	mov	reg[19h], 00h		; Port_6_DriveMode_1 register (PRT6DM1)
04CD: 70 EF    AND   F,0xEF             
                                        (0251) 	M8C_SetBank0
04CF: 62 1B 00 MOV   REG[0x1B],0x0      (0252) 	mov	reg[1bh], 00h		; Port_6_DriveMode_2 register (PRT6DM2)
04D2: 62 1A 00 MOV   REG[0x1A],0x0      (0253) 	mov	reg[1ah], 00h		; Port_6_GlobalSelect register (PRT6GS)
04D5: 71 10    OR    F,0x10             
                                        (0254) 	M8C_SetBank1
04D7: 62 1A 00 MOV   REG[0x1A],0x0      (0255) 	mov	reg[1ah], 00h		; Port_6_IntCtrl_0 register (PRT6IC0)
04DA: 62 1B 00 MOV   REG[0x1B],0x0      (0256) 	mov	reg[1bh], 00h		; Port_6_IntCtrl_1 register (PRT6IC1)
04DD: 70 EF    AND   F,0xEF             
                                        (0257) 	M8C_SetBank0
04DF: 62 19 00 MOV   REG[0x19],0x0      (0258) 	mov	reg[19h], 00h		; Port_6_IntEn register (PRT6IE)
04E2: 62 1C 00 MOV   REG[0x1C],0x0      (0259) 	mov	reg[1ch], 00h		; Port_7_Data register (PRT7DR)
04E5: 71 10    OR    F,0x10             
                                        (0260) 	M8C_SetBank1
04E7: 62 1C 00 MOV   REG[0x1C],0x0      (0261) 	mov	reg[1ch], 00h		; Port_7_DriveMode_0 register (PRT7DM0)
04EA: 62 1D 00 MOV   REG[0x1D],0x0      (0262) 	mov	reg[1dh], 00h		; Port_7_DriveMode_1 register (PRT7DM1)
04ED: 70 EF    AND   F,0xEF             
                                        (0263) 	M8C_SetBank0
04EF: 62 1F 00 MOV   REG[0x1F],0x0      (0264) 	mov	reg[1fh], 00h		; Port_7_DriveMode_2 register (PRT7DM2)
04F2: 62 1E 00 MOV   REG[0x1E],0x0      (0265) 	mov	reg[1eh], 00h		; Port_7_GlobalSelect register (PRT7GS)
04F5: 71 10    OR    F,0x10             
                                        (0266) 	M8C_SetBank1
04F7: 62 1E 00 MOV   REG[0x1E],0x0      (0267) 	mov	reg[1eh], 00h		; Port_7_IntCtrl_0 register (PRT7IC0)
04FA: 62 1F 00 MOV   REG[0x1F],0x0      (0268) 	mov	reg[1fh], 00h		; Port_7_IntCtrl_1 register (PRT7IC1)
04FD: 70 EF    AND   F,0xEF             
                                        (0269) 	M8C_SetBank0
04FF: 62 1D 00 MOV   REG[0x1D],0x0      (0270) 	mov	reg[1dh], 00h		; Port_7_IntEn register (PRT7IE)
0502: 70 EF    AND   F,0xEF             
                                        (0271) 	M8C_SetBank0
0504: 7F       RET                      (0272) 	ret
                                        (0273) 
                                        (0274) 
                                        (0275) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_example_adc_lcd
                                        (0026) export _LoadConfig_example_adc_lcd
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
0505: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
0508: 55 01 7F MOV   [0x1],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
050B: 55 02 80 MOV   [0x2],0x80         (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
050E: 7C 05 15 LCALL 0x0515             (0069) 	lcall	LoadConfig_example_adc_lcd
0511: 7C 04 00 LCALL 0x0400             (0070) 	lcall	LoadConfigTBL_example_adc_lcd_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
0514: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration example_adc_lcd
                                        (0078) ;
                                        (0079) ;    Load configuration registers for example_adc_lcd.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_example_adc_lcd:
                                        (0096)  LoadConfig_example_adc_lcd:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
0515: 10       PUSH  X                  (0099) 	push	x
0516: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
0518: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
051A: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
051B: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_example_adc_lcd_Bank0
051D: 57 A3    MOV   X,0xA3             (0105)     mov     X, <LoadConfigTBL_example_adc_lcd_Bank0
051F: 7C 05 30 LCALL 0x0530             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
0522: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
0524: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
0525: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_example_adc_lcd_Bank1
0527: 57 32    MOV   X,0x32             (0112)     mov     X, <LoadConfigTBL_example_adc_lcd_Bank1
0529: 7C 05 30 LCALL 0x0530             (0113)     lcall   LoadConfig              ; Load the bank 1 values
052C: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
052E: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
052F: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
0530: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
0532: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
0533: 08       PUSH  A                  (0143)     push    A
0534: 4F       MOV   X,SP               (0144)     mov     X, SP
0535: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
0538: D0 04    JNC   0x053D             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
053A: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
053D: 18       POP   A                  (0149)     pop     A
053E: 20       POP   X                  (0150)     pop     X
053F: 70 EF    AND   F,0xEF             
0541: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
0544: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
0545: 08       PUSH  A                  (0156)     push    A
0546: 28       ROMX                     (0157)     romx                            ; Load register address from table
0547: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
0549: A0 1F    JZ    0x0569             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
054B: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
054C: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
054F: A0 03    JZ    0x0553             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
0551: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
0553: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
0555: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
0556: 20       POP   X                  (0167)     pop     X
0557: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
0558: 09 00    ADC   A,0x0              (0169)     adc     A, 0
055A: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
055B: 08       PUSH  A                  (0171)     push    A
055C: 28       ROMX                     (0172)     romx                            ; load config data from the table
055D: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
055E: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
0560: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
0562: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
0563: 20       POP   X                  (0177)     pop     X
0564: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
0565: 09 00    ADC   A,0x0              (0179)     adc     A, 0
0567: 8F D7    JMP   0x053F             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
0569: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
056B: 70 3F    AND   F,0x3F             
056D: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
056F: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\timer32_1.asm                 (0001) ;;*****************************************************************************
0570: 43 E1 80 OR    REG[0xE1],0x80     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Timer32_1.asm
                                        (0004) ;;   Version: 2.6, Updated on 2015/3/4 at 22:27:48
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Timer32 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Timer32_1.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Timer32_1_EnableInt
                                        (0030) export _Timer32_1_EnableInt
                                        (0031) export  Timer32_1_DisableInt
                                        (0032) export _Timer32_1_DisableInt
                                        (0033) export  Timer32_1_Start
                                        (0034) export _Timer32_1_Start
                                        (0035) export  Timer32_1_Stop
                                        (0036) export _Timer32_1_Stop
                                        (0037) export  Timer32_1_WritePeriod
                                        (0038) export _Timer32_1_WritePeriod
                                        (0039) export  Timer32_1_WriteCompareValue
                                        (0040) export _Timer32_1_WriteCompareValue
                                        (0041) export  Timer32_1_ReadCompareValue
                                        (0042) export _Timer32_1_ReadCompareValue
                                        (0043) export  Timer32_1_ReadTimer
                                        (0044) export _Timer32_1_ReadTimer
                                        (0045) export  Timer32_1_ReadTimerSaveCV
                                        (0046) export _Timer32_1_ReadTimerSaveCV
                                        (0047) 
                                        (0048) ; The following functions are deprecated and subject to omission in future releases
                                        (0049) ;
                                        (0050) export  Timer32_1_ReadCounter       ; obsolete
                                        (0051) export _Timer32_1_ReadCounter       ; obsolete
                                        (0052) export  Timer32_1_CaptureCounter    ; obsolete
                                        (0053) export _Timer32_1_CaptureCounter    ; obsolete
                                        (0054) 
                                        (0055) 
                                        (0056) AREA example_adc_lcd_RAM (RAM,REL)
                                        (0057) 
                                        (0058) ;-----------------------------------------------
                                        (0059) ;  Constant Definitions
                                        (0060) ;-----------------------------------------------
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: Timer32_1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this timer's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  Timer32_1_EnableInt:
                                        (0091) _Timer32_1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    Timer32_1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0573: 7F       RET                      (0095)    ret
0574: 41 E1 7F AND   REG[0xE1],0x7F     
                                        (0096) 
                                        (0097) .ENDSECTION
                                        (0098) 
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: Timer32_1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this timer's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS: 
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  Timer32_1_DisableInt:
                                        (0119) _Timer32_1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    Timer32_1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0577: 7F       RET                      (0123)    ret
0578: 43 33 01 OR    REG[0x33],0x1      
                                        (0124) 
                                        (0125) .ENDSECTION
                                        (0126) 
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: Timer32_1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     timer will begin counting on the next input clock.
                                        (0135) ;-----------------------------------------------------------------------------
                                        (0136) ;
                                        (0137) ;  ARGUMENTS:    None
                                        (0138) ;  RETURNS:      Nothing
                                        (0139) ;  SIDE EFFECTS: 
                                        (0140) ;    The A and X registers may be modified by this or future implementations
                                        (0141) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0142) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0143) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0144) ;    functions.
                                        (0145) ;
                                        (0146)  Timer32_1_Start:
                                        (0147) _Timer32_1_Start:
                                        (0148)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0149)    Timer32_1_Start_M
                                        (0150)    RAM_EPILOGUE RAM_USE_CLASS_1
057B: 7F       RET                      (0151)    ret
057C: 41 33 FE AND   REG[0x33],0xFE     
                                        (0152) 
                                        (0153) .ENDSECTION
                                        (0154) 
                                        (0155) 
                                        (0156) .SECTION
                                        (0157) ;-----------------------------------------------------------------------------
                                        (0158) ;  FUNCTION NAME: Timer32_1_Stop
                                        (0159) ;
                                        (0160) ;  DESCRIPTION:
                                        (0161) ;     Disables timer operation by clearing the start bit in the Control
                                        (0162) ;     register of the LSB block.
                                        (0163) ;-----------------------------------------------------------------------------
                                        (0164) ;
                                        (0165) ;  ARGUMENTS:    None
                                        (0166) ;  RETURNS:      Nothing
                                        (0167) ;  SIDE EFFECTS: 
                                        (0168) ;    The A and X registers may be modified by this or future implementations
                                        (0169) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0170) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0171) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0172) ;    functions.
                                        (0173) ;
                                        (0174)  Timer32_1_Stop:
                                        (0175) _Timer32_1_Stop:
                                        (0176)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0177)    Timer32_1_Stop_M
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_1
057F: 7F       RET                      (0179)    ret
                                        (0180) 
                                        (0181) .ENDSECTION
                                        (0182) 
                                        (0183) 
                                        (0184) .SECTION
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;  FUNCTION NAME: Timer32_1_WritePeriod
                                        (0187) ;
                                        (0188) ;  DESCRIPTION:
                                        (0189) ;     Write the 32-bit period value into the Period register (DR1). If the
                                        (0190) ;     Timer user module is stopped, then this value will also be latched
                                        (0191) ;     into the Count register (DR0).
                                        (0192) ;-----------------------------------------------------------------------------
                                        (0193) ;
                                        (0194) ;  ARGUMENTS: fastcall16 DWORD dwPeriodValue (on stack)
                                        (0195) ;  RETURNS:   Nothing
                                        (0196) ;  SIDE EFFECTS:
                                        (0197) ;    If the timer user module is stopped, then this value will also be
                                        (0198) ;    latched into the Count registers (DR0).
                                        (0199) ;    
                                        (0200) ;    The A and X registers may be modified by this or future implementations
                                        (0201) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0202) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0203) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0204) ;    functions.
                                        (0205) ;
                                        (0206) _Timer32_1_WritePeriod:
                                        (0207)  Timer32_1_WritePeriod:
                                        (0208)    RAM_PROLOGUE RAM_USE_CLASS_2
0580: 4F       MOV   X,SP               (0209)    mov   X, SP
0581: 52 FA    MOV   A,[X-6]            (0210)    mov   A, [X-6]                                ; load the period registers
0583: 60 3D    MOV   REG[0x3D],A        (0211)    mov   reg[Timer32_1_PERIOD_MSB_REG],  A
0585: 52 FB    MOV   A,[X-5]            (0212)    mov   A, [X-5]
0587: 60 39    MOV   REG[0x39],A        (0213)    mov   reg[Timer32_1_PERIOD_ISB2_REG], A
0589: 52 FC    MOV   A,[X-4]            (0214)    mov   A, [X-4]
058B: 60 35    MOV   REG[0x35],A        (0215)    mov   reg[Timer32_1_PERIOD_ISB1_REG], A
058D: 52 FD    MOV   A,[X-3]            (0216)    mov   A, [X-3]
058F: 60 31    MOV   REG[0x31],A        (0217)    mov   reg[Timer32_1_PERIOD_LSB_REG],  A
0591: 70 3F    AND   F,0x3F             
0593: 71 C0    OR    F,0xC0             
                                        (0218)    RAM_EPILOGUE RAM_USE_CLASS_2
0595: 7F       RET                      (0219)    ret
                                        (0220) 
                                        (0221) .ENDSECTION
                                        (0222) 
                                        (0223) 
                                        (0224) .SECTION
                                        (0225) ;-----------------------------------------------------------------------------
                                        (0226) ;  FUNCTION NAME: Timer32_1_WriteCompareValue
                                        (0227) ;
                                        (0228) ;  DESCRIPTION:
                                        (0229) ;     Writes compare value into the Compare register (DR2).
                                        (0230) ;
                                        (0231) ;     NOTE! The Timer user module must be STOPPED in order to write the
                                        (0232) ;           Compare register. (Call Timer32_1_Stop to disable).
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;
                                        (0235) ;  ARGUMENTS:    fastcall16 DWORD dwCompareValue (on stack)
                                        (0236) ;  RETURNS:      Nothing
                                        (0237) ;  SIDE EFFECTS: 
                                        (0238) ;    The A and X registers may be modified by this or future implementations
                                        (0239) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0240) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0241) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0242) ;    functions.
                                        (0243) ;
                                        (0244) _Timer32_1_WriteCompareValue:
                                        (0245)  Timer32_1_WriteCompareValue:
                                        (0246)    RAM_PROLOGUE RAM_USE_CLASS_2
0596: 4F       MOV   X,SP               (0247)    mov   X, SP
0597: 52 FA    MOV   A,[X-6]            (0248)    mov   A, [X-6]                                ; load the compare registers
0599: 60 3E    MOV   REG[0x3E],A        (0249)    mov   reg[Timer32_1_COMPARE_MSB_REG],  A
059B: 52 FB    MOV   A,[X-5]            (0250)    mov   A, [X-5]
059D: 60 3A    MOV   REG[0x3A],A        (0251)    mov   reg[Timer32_1_COMPARE_ISB2_REG], A
059F: 52 FC    MOV   A,[X-4]            (0252)    mov   A, [X-4]
05A1: 60 36    MOV   REG[0x36],A        (0253)    mov   reg[Timer32_1_COMPARE_ISB1_REG], A
05A3: 52 FD    MOV   A,[X-3]            (0254)    mov   A, [X-3]
05A5: 60 32    MOV   REG[0x32],A        (0255)    mov   reg[Timer32_1_COMPARE_LSB_REG],  A
05A7: 70 3F    AND   F,0x3F             
05A9: 71 C0    OR    F,0xC0             
                                        (0256)    RAM_EPILOGUE RAM_USE_CLASS_2
05AB: 7F       RET                      (0257)    ret
05AC: 70 BF    AND   F,0xBF             
05AE: 60 D3    MOV   REG[0xD3],A        
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) 
                                        (0262) .SECTION
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;  FUNCTION NAME: Timer32_1_ReadCompareValue
                                        (0265) ;
                                        (0266) ;  DESCRIPTION:
                                        (0267) ;     Reads the Compare registers.
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;
                                        (0270) ;  ARGUMENTS: fastcall16 DWORD * pdwCompareValue
                                        (0271) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0272) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0273) ;  SIDE EFFECTS:
                                        (0274) ;     1. The DWORD pointed to by X takes on the value read from DR2
                                        (0275) ;     2. The A and X registers may be modified by this or future implementations
                                        (0276) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0277) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0278) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0279) ;        functions.
                                        (0280) ;              
                                        (0281) ;        Currently only the page pointer registers listed below are modified: 
                                        (0282) ;              IDX_PP
                                        (0283) 
                                        (0284) ;
                                        (0285)  Timer32_1_ReadCompareValue:
                                        (0286) _Timer32_1_ReadCompareValue:
                                        (0287)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0288)    RAM_SETPAGE_IDX A 
05B0: 5D 3E    MOV   A,REG[0x3E]        (0289)    mov   A, reg[Timer32_1_COMPARE_MSB_REG]
05B2: 54 00    MOV   [X+0],A            (0290)    mov   [X+0], A
05B4: 5D 3A    MOV   A,REG[0x3A]        (0291)    mov   A, reg[Timer32_1_COMPARE_ISB2_REG]
05B6: 54 01    MOV   [X+1],A            (0292)    mov   [X+1], A
05B8: 5D 36    MOV   A,REG[0x36]        (0293)    mov   A, reg[Timer32_1_COMPARE_ISB1_REG]
05BA: 54 02    MOV   [X+2],A            (0294)    mov   [X+2], A
05BC: 5D 32    MOV   A,REG[0x32]        (0295)    mov   A, reg[Timer32_1_COMPARE_LSB_REG]
05BE: 54 03    MOV   [X+3],A            (0296)    mov   [X+3], A
05C0: 70 3F    AND   F,0x3F             
05C2: 71 C0    OR    F,0xC0             
                                        (0297)    RAM_EPILOGUE RAM_USE_CLASS_3
05C4: 7F       RET                      (0298)    ret
05C5: 70 BF    AND   F,0xBF             
05C7: 60 D3    MOV   REG[0xD3],A        
                                        (0299) 
                                        (0300) .ENDSECTION
                                        (0301) 
                                        (0302) 
                                        (0303) .SECTION
                                        (0304) ;-----------------------------------------------------------------------------
                                        (0305) ;  FUNCTION NAME: Timer32_1_ReadTimerSaveCV
                                        (0306) ;
                                        (0307) ;  DESCRIPTION:
                                        (0308) ;     Retrieves the value in the Count register (DR0), preserving the
                                        (0309) ;     value in the compare register (DR2).
                                        (0310) ;-----------------------------------------------------------------------------
                                        (0311) ;
                                        (0312) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0313) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0314) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0315) ;  SIDE EFFECTS:
                                        (0316) ;     1) The DWORD pointed to by X takes on the value read from DR0
                                        (0317) ;     2) May cause an interrupt, if interrupt on Compare is enabled.
                                        (0318) ;     3) If enabled, Global interrupts are momentarily disabled.
                                        (0319) ;     4) The user module is stopped momentarily while the compare value is
                                        (0320) ;        restored.  This may cause the Count register to miss one or more
                                        (0321) ;        counts depending on the input clock speed.
                                        (0322) ;     5) The A and X registers may be modified by this or future implementations
                                        (0323) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0324) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0325) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0326) ;        functions.
                                        (0327) ;              
                                        (0328) ;        Currently only the page pointer registers listed below are modified: 
                                        (0329) ;              IDX_PP
                                        (0330) ;
                                        (0331) ;  THEORY of OPERATION:
                                        (0332) ;     1) Read and save the Compare register.
                                        (0333) ;     2) Read the Count register, causing its data to be latched into
                                        (0334) ;        the Compare register.
                                        (0335) ;     3) Read and save the Counter value, now in the Compare register,
                                        (0336) ;        to the buffer.
                                        (0337) ;     4) Disable global interrupts
                                        (0338) ;     5) Halt the timer
                                        (0339) ;     6) Restore the Compare register values
                                        (0340) ;     7) Start the Timer again
                                        (0341) ;     8) Restore global interrupt state
                                        (0342) ;
                                        (0343)  Timer32_1_ReadTimerSaveCV:
                                        (0344) _Timer32_1_ReadTimerSaveCV:
                                        (0345)  Timer32_1_ReadCounter:                          ; this name deprecated
                                        (0346) _Timer32_1_ReadCounter:                          ; this name deprecated
                                        (0347) 
                                        (0348)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0349)    RAM_SETPAGE_IDX A 
                                        (0350) 
                                        (0351)    ; save the Control register on the stack
05C9: 5D 33    MOV   A,REG[0x33]        (0352)    mov   A, reg[Timer32_1_CONTROL_LSB_REG]
05CB: 08       PUSH  A                  (0353)    push  A
                                        (0354) 
                                        (0355)    ; save the Compare register value
05CC: 5D 3E    MOV   A,REG[0x3E]        (0356)    mov   A, reg[Timer32_1_COMPARE_MSB_REG]
05CE: 08       PUSH  A                  (0357)    push  A
05CF: 5D 3A    MOV   A,REG[0x3A]        (0358)    mov   A, reg[Timer32_1_COMPARE_ISB2_REG]
05D1: 08       PUSH  A                  (0359)    push  A
05D2: 5D 36    MOV   A,REG[0x36]        (0360)    mov   A, reg[Timer32_1_COMPARE_ISB1_REG]
05D4: 08       PUSH  A                  (0361)    push  A
05D5: 5D 32    MOV   A,REG[0x32]        (0362)    mov   A, reg[Timer32_1_COMPARE_LSB_REG]
05D7: 08       PUSH  A                  (0363)    push  A
                                        (0364) 
                                        (0365)    ; Read the LSB count. This latches the Count register data into the
                                        (0366)    ; Compare register of all bytes of chained PSoC blocks!
                                        (0367)    ; This may cause an interrupt.
05D8: 5D 30    MOV   A,REG[0x30]        (0368)    mov   A, reg[Timer32_1_COUNTER_LSB_REG]
                                        (0369) 
                                        (0370)    ; Read the Compare register, which contains the counter value
                                        (0371)    ; and store the return result
05DA: 5D 3E    MOV   A,REG[0x3E]        (0372)    mov   A, reg[Timer32_1_COMPARE_MSB_REG]
05DC: 54 00    MOV   [X+0],A            (0373)    mov   [X+0], A
05DE: 5D 3A    MOV   A,REG[0x3A]        (0374)    mov   A, reg[Timer32_1_COMPARE_ISB2_REG]
05E0: 54 01    MOV   [X+1],A            (0375)    mov   [X+1], A
05E2: 5D 36    MOV   A,REG[0x36]        (0376)    mov   A, reg[Timer32_1_COMPARE_ISB1_REG]
05E4: 54 02    MOV   [X+2],A            (0377)    mov   [X+2], A
05E6: 5D 32    MOV   A,REG[0x32]        (0378)    mov   A, reg[Timer32_1_COMPARE_LSB_REG]
05E8: 54 03    MOV   [X+3],A            (0379)    mov   [X+3], A
                                        (0380) 
                                        (0381)    ; determine current interrupt state and save in X
05EA: 50 00    MOV   A,0x0              (0382)    mov   A, 0
05EC: 49 F7 01 TST   REG[0xF7],0x1      (0383)    tst   reg[CPU_F], FLAG_GLOBAL_IE
05EF: A0 03    JZ    0x05F3             (0384)    jz    .SetupStatusFlag
05F1: 50 01    MOV   A,0x1              (0385)    mov   A, FLAG_GLOBAL_IE
                                        (0386) .SetupStatusFlag:
05F3: 5C       MOV   X,A                (0387)    mov   X, A
05F4: 70 FE    AND   F,0xFE             
05F6: 41 33 FE AND   REG[0x33],0xFE     
                                        (0388) 
                                        (0389)    ; disable interrupts for the time being
                                        (0390)    M8C_DisableGInt
                                        (0391) 
                                        (0392)    ; stop the timer
                                        (0393)    Timer32_1_Stop_M
                                        (0394) 
                                        (0395)    ; Restore the Compare register
05F9: 18       POP   A                  (0396)    pop   A
05FA: 60 32    MOV   REG[0x32],A        (0397)    mov   reg[Timer32_1_COMPARE_LSB_REG],  A
05FC: 18       POP   A                  (0398)    pop   A
05FD: 60 36    MOV   REG[0x36],A        (0399)    mov   reg[Timer32_1_COMPARE_ISB1_REG], A
05FF: 18       POP   A                  (0400)    pop   A
0600: 60 3A    MOV   REG[0x3A],A        (0401)    mov   reg[Timer32_1_COMPARE_ISB2_REG], A
0602: 18       POP   A                  (0402)    pop   A
0603: 60 3E    MOV   REG[0x3E],A        (0403)    mov   reg[Timer32_1_COMPARE_MSB_REG],  A
                                        (0404) 
                                        (0405)    ; restore start state of the timer
0605: 18       POP   A                  (0406)    pop   A
0606: 60 33    MOV   REG[0x33],A        (0407)    mov   reg[Timer32_1_CONTROL_LSB_REG], A
                                        (0408) 
                                        (0409)    ; push the flag register to restore on the stack
0608: 10       PUSH  X                  (0410)    push  X
0609: 70 3F    AND   F,0x3F             
060B: 71 C0    OR    F,0xC0             
                                        (0411) 
                                        (0412)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0413)    ; Use RETI because it pops a the flag register off the stack
                                        (0414)    ; and then returns to the caller.
060D: 7E       RETI                     (0415)    reti
060E: 70 BF    AND   F,0xBF             
0610: 60 D3    MOV   REG[0xD3],A        
                                        (0416) 
                                        (0417) .ENDSECTION
                                        (0418) 
                                        (0419) 
                                        (0420) .SECTION
                                        (0421) ;-----------------------------------------------------------------------------
                                        (0422) ;  FUNCTION NAME: Timer32_1_ReadTimer
                                        (0423) ;
                                        (0424) ;  DESCRIPTION:
                                        (0425) ;     Performs a software capture of the Count register.  A synchronous
                                        (0426) ;     read of the Count register is performed.  The timer is NOT stopped.
                                        (0427) ;
                                        (0428) ;     WARNING - this will cause loss of data in the Compare register.
                                        (0429) ;-----------------------------------------------------------------------------
                                        (0430) ;
                                        (0431) ;  ARGUMENTS: fastcall16 DWORD * pdwCount
                                        (0432) ;             (pointer: LSB in X, MSB in A, for pass-by-reference update)
                                        (0433) ;  RETURNS:   Nothing (but see Side Effects).
                                        (0434) ;  SIDE EFFECTS:
                                        (0435) ;     1) The DWORD pointed to by X takes on the value read from DR2.
                                        (0436) ;     2) May cause an interrupt.
                                        (0437) ;     3) The A and X registers may be modified by this or future implementations
                                        (0438) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0439) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0440) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0441) ;        functions.
                                        (0442) ;              
                                        (0443) ;        Currently only the page pointer registers listed below are modified: 
                                        (0444) ;              IDX_PP
                                        (0445) ;
                                        (0446) ;  THEORY of OPERATION:
                                        (0447) ;     1) Read the Count register - this causes the count value to be
                                        (0448) ;        latched into the Compare registers.
                                        (0449) ;     2) Read and return the Count register values from the Compare
                                        (0450) ;        registers into the return buffer.
                                        (0451) ;
                                        (0452)  Timer32_1_ReadTimer:
                                        (0453) _Timer32_1_ReadTimer:
                                        (0454)  Timer32_1_CaptureCounter:                       ; this name deprecated
                                        (0455) _Timer32_1_CaptureCounter:                       ; this name deprecated
                                        (0456) 
                                        (0457)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0458)    RAM_SETPAGE_IDX A 
                                        (0459) 
                                        (0460)    ; Read the LSB of the Count register, DR0. This latches the count data into
                                        (0461)    ; the Compare register of all bytes of chained PSoC blocks and may cause
                                        (0462)    ; an interrupt.
0612: 5D 30    MOV   A,REG[0x30]        (0463)    mov   A, reg[Timer32_1_COUNTER_LSB_REG]
                                        (0464) 
                                        (0465)    ; Read the Compare register, which contains the counter value
                                        (0466)    ; and store ther return result
0614: 5D 3E    MOV   A,REG[0x3E]        (0467)    mov   A, reg[Timer32_1_COMPARE_MSB_REG]
0616: 54 00    MOV   [X+0],A            (0468)    mov   [X+0], A
0618: 5D 3A    MOV   A,REG[0x3A]        (0469)    mov   A, reg[Timer32_1_COMPARE_ISB2_REG]
061A: 54 01    MOV   [X+1],A            (0470)    mov   [X+1], A
061C: 5D 36    MOV   A,REG[0x36]        (0471)    mov   A, reg[Timer32_1_COMPARE_ISB1_REG]
061E: 54 02    MOV   [X+2],A            (0472)    mov   [X+2], A
0620: 5D 32    MOV   A,REG[0x32]        (0473)    mov   A, reg[Timer32_1_COMPARE_LSB_REG]
0622: 54 03    MOV   [X+3],A            (0474)    mov   [X+3], A
0624: 70 3F    AND   F,0x3F             
0626: 71 C0    OR    F,0xC0             
                                        (0475)    RAM_EPILOGUE RAM_USE_CLASS_3
0628: 7F       RET                      (0476)    ret
                                        (0477) 
                                        (0478) .ENDSECTION
                                        (0479) 
                                        (0480) ; End of File Timer32_1.asm
FILE: lib\pwm8_speakerint.asm           (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_SpeakerINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM8_Speaker.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM8_Speaker_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM8_Speaker_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM8_Speaker_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0629: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM8_SpeakerINT.asm
FILE: lib\pwm8_speaker.asm              (0001) ;;*****************************************************************************
062A: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM8_Speaker.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:26:52
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM8_Speaker.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM8_Speaker_EnableInt
                                        (0030) export _PWM8_Speaker_EnableInt
                                        (0031) export  PWM8_Speaker_DisableInt
                                        (0032) export _PWM8_Speaker_DisableInt
                                        (0033) export  PWM8_Speaker_Start
                                        (0034) export _PWM8_Speaker_Start
                                        (0035) export  PWM8_Speaker_Stop
                                        (0036) export _PWM8_Speaker_Stop
                                        (0037) export  PWM8_Speaker_WritePeriod
                                        (0038) export _PWM8_Speaker_WritePeriod
                                        (0039) export  PWM8_Speaker_WritePulseWidth
                                        (0040) export _PWM8_Speaker_WritePulseWidth
                                        (0041) export  PWM8_Speaker_bReadPulseWidth
                                        (0042) export _PWM8_Speaker_bReadPulseWidth
                                        (0043) export  PWM8_Speaker_bReadCounter
                                        (0044) export _PWM8_Speaker_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bPWM8_Speaker_ReadPulseWidth    ; deprecated
                                        (0049) export _bPWM8_Speaker_ReadPulseWidth    ; deprecated
                                        (0050) export  bPWM8_Speaker_ReadCounter       ; deprecated
                                        (0051) export _bPWM8_Speaker_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA example_adc_lcd_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM8_Speaker_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS:
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM8_Speaker_EnableInt:
                                        (0091) _PWM8_Speaker_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM8_Speaker_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
062D: 7F       RET                      (0095)    ret
062E: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM8_Speaker_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM8_Speaker_DisableInt:
                                        (0119) _PWM8_Speaker_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM8_Speaker_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0631: 7F       RET                      (0123)    ret
0632: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM8_Speaker_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM8_Speaker_Start:
                                        (0148) _PWM8_Speaker_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM8_Speaker_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0635: 7F       RET                      (0152)    ret
0636: 41 2F FE AND   REG[0x2F],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM8_Speaker_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM8_Speaker_Stop:
                                        (0176) _PWM8_Speaker_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM8_Speaker_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0639: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM8_Speaker_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count register (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM8_Speaker_WritePeriod:
                                        (0206) _PWM8_Speaker_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
063A: 60 2D    MOV   REG[0x2D],A        (0208)    mov   reg[PWM8_Speaker_PERIOD_REG], A
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_1
063C: 7F       RET                      (0210)    ret
                                        (0211) 
                                        (0212) 
                                        (0213) .ENDSECTION
                                        (0214) 
                                        (0215) .SECTION
                                        (0216) ;-----------------------------------------------------------------------------
                                        (0217) ;  FUNCTION NAME: PWM8_Speaker_WritePulseWidth
                                        (0218) ;
                                        (0219) ;  DESCRIPTION:
                                        (0220) ;     Writes compare value into the Compare register (DR2).
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0224) ;  RETURNS:      Nothing
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PWM8_Speaker_WritePulseWidth:
                                        (0233) _PWM8_Speaker_WritePulseWidth:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
063D: 60 2E    MOV   REG[0x2E],A        (0235)    mov   reg[PWM8_Speaker_COMPARE_REG], A
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
063F: 7F       RET                      (0237)    ret
                                        (0238) 
                                        (0239) 
                                        (0240) .ENDSECTION
                                        (0241) 
                                        (0242) .SECTION
                                        (0243) ;-----------------------------------------------------------------------------
                                        (0244) ;  FUNCTION NAME: PWM8_Speaker_bReadPulseWidth
                                        (0245) ;
                                        (0246) ;  DESCRIPTION:
                                        (0247) ;     Reads the Compare register.
                                        (0248) ;-----------------------------------------------------------------------------
                                        (0249) ;
                                        (0250) ;  ARGUMENTS:    None
                                        (0251) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0252) ;  SIDE EFFECTS:
                                        (0253) ;    The A and X registers may be modified by this or future implementations
                                        (0254) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0255) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0256) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0257) ;    functions.
                                        (0258) ;
                                        (0259)  PWM8_Speaker_bReadPulseWidth:
                                        (0260) _PWM8_Speaker_bReadPulseWidth:
                                        (0261)  bPWM8_Speaker_ReadPulseWidth:                   ; this name deprecated
                                        (0262) _bPWM8_Speaker_ReadPulseWidth:                   ; this name deprecated
                                        (0263)    RAM_PROLOGUE RAM_USE_CLASS_1
0640: 5D 2E    MOV   A,REG[0x2E]        (0264)    mov   A, reg[PWM8_Speaker_COMPARE_REG]
                                        (0265)    RAM_EPILOGUE RAM_USE_CLASS_1
0642: 7F       RET                      (0266)    ret
                                        (0267) 
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) .SECTION
                                        (0272) ;-----------------------------------------------------------------------------
                                        (0273) ;  FUNCTION NAME: PWM8_Speaker_bReadCounter
                                        (0274) ;
                                        (0275) ;  DESCRIPTION:
                                        (0276) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0277) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0278) ;     from the Count to the Compare registers by holding the clock low in
                                        (0279) ;     the PSoC block.
                                        (0280) ;-----------------------------------------------------------------------------
                                        (0281) ;
                                        (0282) ;  ARGUMENTS: None
                                        (0283) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0284) ;  SIDE EFFECTS:
                                        (0285) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0286) ;     2) The A and X registers may be modified by this or future implementations
                                        (0287) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0288) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0289) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0290) ;        functions.
                                        (0291) ;
                                        (0292)  PWM8_Speaker_bReadCounter:
                                        (0293) _PWM8_Speaker_bReadCounter:
                                        (0294)  bPWM8_Speaker_ReadCounter:                      ; this name deprecated
                                        (0295) _bPWM8_Speaker_ReadCounter:                      ; this name deprecated
                                        (0296) 
                                        (0297)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0298)    bOrigClockSetting:      EQU   1               ; Frame offset to temp Input   store
                                        (0299)    wCounter:               EQU   2               ; Frame offset to temp Count   store
                                        (0300)    STACK_FRAME_SIZE:       EQU   3               ; max stack frame size is 3 bytes
                                        (0301) 
                                        (0302)    RAM_PROLOGUE RAM_USE_CLASS_2
0643: 4F       MOV   X,SP               (0303)    mov   X, SP                                   ; X <- stack frame pointer
0644: 5D 2E    MOV   A,REG[0x2E]        (0304)    mov   A, reg[PWM8_Speaker_COMPARE_REG]        ; Save the Compare register on the stack
0646: 08       PUSH  A                  (0305)    push  A                                       ;
0647: 41 2F FE AND   REG[0x2F],0xFE     
064A: 71 10    OR    F,0x10             
                                        (0306)    PWM8_Speaker_Stop_M                           ; Disable (stop) the PWM
                                        (0307)    M8C_SetBank1                                  ;
064C: 5D 2D    MOV   A,REG[0x2D]        (0308)    mov   A, reg[PWM8_Speaker_INPUT_REG]          ; save the clock input setting
064E: 08       PUSH  A                  (0309)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0310)                                                  ;   hold the clock low:
064F: 62 2D 00 MOV   REG[0x2D],0x0      (0311)    mov   reg[PWM8_Speaker_INPUT_REG], INPUT_REG_NULL
0652: 70 EF    AND   F,0xEF             
                                        (0312)    M8C_SetBank0
                                        (0313)                                                  ; Extract the Count via DR2 register
0654: 5D 2C    MOV   A,REG[0x2C]        (0314)    mov   A, reg[PWM8_Speaker_COUNTER_REG]        ; DR2 <- DR0
0656: 5D 2E    MOV   A,REG[0x2E]        (0315)    mov   A, reg[PWM8_Speaker_COMPARE_REG]        ; Stash the Count on the stack
0658: 08       PUSH  A                  (0316)    push  A                                       ;  -stack frame is now 3 bytes
0659: 52 00    MOV   A,[X+0]            (0317)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
065B: 60 2E    MOV   REG[0x2E],A        (0318)    mov   reg[PWM8_Speaker_COMPARE_REG], A
065D: 71 10    OR    F,0x10             
                                        (0319)    M8C_SetBank1                                  ; Restore the PWM operation:
065F: 52 01    MOV   A,[X+1]            (0320)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0661: 60 2D    MOV   REG[0x2D],A        (0321)    mov   reg[PWM8_Speaker_INPUT_REG], A          ;
0663: 70 EF    AND   F,0xEF             
0665: 43 2F 01 OR    REG[0x2F],0x1      
                                        (0322)    M8C_SetBank0                                  ;
                                        (0323)    PWM8_Speaker_Start_M                          ;   then re-enable the PWM.
0668: 18       POP   A                  (0324)    pop   A                                       ; Setup the return value
0669: 38 FE    ADD   SP,0xFE            (0325)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
066B: 70 3F    AND   F,0x3F             
066D: 71 C0    OR    F,0xC0             
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_2
066F: 7F       RET                      (0327)    ret
                                        (0328) 
                                        (0329) .ENDSECTION
                                        (0330) 
                                        (0331) ; End of File PWM8_Speaker.asm
FILE: lib\pga.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   PGA.asm  ( PGA )
                                        (0004) ;;  Version: 3.2, Updated on 2015/3/4 at 22:26:46
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION:  PGA User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;; -----------------------------------------------------------------
                                        (0023) ;;                         Register Definitions
                                        (0024) ;;
                                        (0025) ;; Uses 1 Continuous Time Block configured as shown.
                                        (0026) ;;
                                        (0027) ;; * For a Mask/Val pair, this indicates that the value is
                                        (0028) ;;   determined by the user either through config-time parameteriza-
                                        (0029) ;;   tion or run-time manipulation.
                                        (0030) ;;
                                        (0031) ;; BIT FIELD             Mask/Val Function
                                        (0032) ;; -----------------            -----   --------------------
                                        (0033) ;; GAIN_CR0.RES_RATIO_T2B       F0/*    User Parameter (by table)
                                        (0034) ;; GAIN_CR0.GAIN_ATTEN          08/*    Gain (by table)
                                        (0035) ;; GAIN_CR0.RES_SOURCE          04/1    Res source to output
                                        (0036) ;; GAIN_CR0.RES_REF             03/*    Res ref
                                        (0037) ;;
                                        (0038) ;; GAIN_CR1.A_OUT               80/*    User Parameter (Output bus)
                                        (0039) ;; GAIN_CR1.COMP_EN             40/0    Comparator bus disabled
                                        (0040) ;; GAIN_CR1.CT_NEG_INPUT_MUX    38/4    Neg mux to analog f.b. tap
                                        (0041) ;; GAIN_CR1.CT_POS_INPUT_MUX    07/*    Pos mux, typically to col. input mux
                                        (0042) ;;
                                        (0043) ;; GAIN_CR2.CP_COMP             80/0    Latch transparent on PH1
                                        (0044) ;; GAIN_CR2.CK_COMP             40/0    Latch transparent
                                        (0045) ;; GAIN_CR2.CC_COMP             20/1    Mode OP-AMP (not comparator)
                                        (0046) ;; GAIN_CR2.BYPASS_OBUS         1C/0    Bypass OFF
                                        (0047) ;; GAIN_CR2.PWR_SELECT          03/*    Power OFF (0h) at start-up
                                        (0048) ;;
                                        (0049) ;; --------------------------------------------------------------------
                                        (0050) 
                                        (0051) include "PGA.inc"
                                        (0052) include "m8c.inc"
                                        (0053) include "memory.inc"
                                        (0054) 
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Global Symbols
                                        (0058) ;-----------------------------------------------
                                        (0059) export  PGA_Start
                                        (0060) export _PGA_Start
                                        (0061) export  PGA_SetPower
                                        (0062) export _PGA_SetPower
                                        (0063) 
                                        (0064) export  PGA_SetGain
                                        (0065) export _PGA_SetGain
                                        (0066) 
                                        (0067) export  PGA_Stop
                                        (0068) export _PGA_Stop
                                        (0069) 
                                        (0070) IF (PGA_AGNDBUFAPI)
                                        (0071) export  PGA_EnableAGNDBuffer
                                        (0072) export _PGA_EnableAGNDBuffer
                                        (0073) export  PGA_DisableAGNDBuffer
                                        (0074) export _PGA_DisableAGNDBuffer
                                        (0075) ENDIF
                                        (0076) 
                                        (0077) ;-----------------------------------------------
                                        (0078) ;  EQUATES
                                        (0079) ;-----------------------------------------------
                                        (0080) POWERMASK:     equ 03h
                                        (0081) GAINREGMASK:   equ f8h
                                        (0082) GAINMASK:      equ fCh
                                        (0083) HIGHGAIN:      equ 04h
                                        (0084) HIGHGAINMASK:  equ 18h
                                        (0085) EXGAIN:        equ 01h
                                        (0086) AGNDBUFMASK:   equ 20h
                                        (0087) 
                                        (0088) AREA UserModules (ROM, REL)
                                        (0089) .SECTION
                                        (0090) ;-----------------------------------------------------------------------------
                                        (0091) ;  FUNCTION NAME: PGA_Start
                                        (0092) ;  FUNCTION NAME: PGA_SetPower
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;    Applies power setting to the module's PSoC block.
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ;  ARGUMENTS:
                                        (0099) ;  A  Contains the power settings 0=Off, 1=Low, 2=Med, and 3=High
                                        (0100) ;
                                        (0101) ;  RETURNS:  NA
                                        (0102) ;
                                        (0103) ;  SIDE EFFECTS:
                                        (0104) ;    The A and X registers may be modified by this or future implementations
                                        (0105) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0106) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0107) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0108) ;    functions.
                                        (0109) ;
                                        (0110)  PGA_Start:
                                        (0111) _PGA_Start:
                                        (0112)  PGA_SetPower:
                                        (0113) _PGA_SetPower:
                                        (0114) 
                                        (0115)    RAM_PROLOGUE RAM_USE_CLASS_2
0670: 21 03    AND   A,0x3              (0116)    and  A, POWERMASK                                 ; mask A to protect unchanged bits
0672: 4F       MOV   X,SP               (0117)    mov  X, SP                                        ; define temp store location
                                        (0118) ;
0673: 08       PUSH  A                  (0119)    push A                                            ; put power value in temp store
0674: 5D 73    MOV   A,REG[0x73]        (0120)    mov  A, reg[PGA_GAIN_CR2]                               ; read power value
0676: 21 FC    AND   A,0xFC             (0121)    and  A, ~POWERMASK                                ; clear power bits in A
0678: 2B 00    OR    A,[X+0]            (0122)    or   A, [X]                                       ; combine power value with balance of reg.
067A: 60 73    MOV   REG[0x73],A        (0123)    mov  reg[PGA_GAIN_CR2], A                          ; move complete value back to register
067C: 18       POP   A                  (0124)    pop  A
067D: 70 3F    AND   F,0x3F             
067F: 71 C0    OR    F,0xC0             
                                        (0125)    RAM_EPILOGUE RAM_USE_CLASS_2
0681: 7F       RET                      (0126)    ret
                                        (0127) .ENDSECTION
                                        (0128) 
                                        (0129) .SECTION
                                        (0130) ;-----------------------------------------------------------------------------
                                        (0131) ;  FUNCTION NAME: PGA_SetGain
                                        (0132) ;
                                        (0133) ;  DESCRIPTION:
                                        (0134) ;    This function sets the Gain/Atten of the amplifier.  Valid gain settings
                                        (0135) ;    are defined in the .inc file.
                                        (0136) ;
                                        (0137) ;-----------------------------------------------------------------------------
                                        (0138) ;
                                        (0139) ;  ARGUMENTS:
                                        (0140) ;    A  Contains gain settings.
                                        (0141) ;
                                        (0142) ;    Gain values shown are for example. (See .inc file for gain equates)
                                        (0143) ;
                                        (0144) ;  RETURNS:  NA
                                        (0145) ;
                                        (0146) ;  SIDE EFFECTS:
                                        (0147) ;    The A and X registers may be modified by this or future implementations
                                        (0148) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0149) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0150) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0151) ;    functions.
                                        (0152) ;
                                        (0153)  PGA_SetGain:
                                        (0154) _PGA_SetGain:
                                        (0155) 
                                        (0156)    RAM_PROLOGUE RAM_USE_CLASS_2
0682: 21 FC    AND   A,0xFC             (0157)    and  A, GAINMASK                                       ; mask A to protect unchanged bits
0684: 4F       MOV   X,SP               (0158)    mov  X, SP                                             ; define temp store location
                                        (0159) ;
0685: 08       PUSH  A                  (0160)    push A                                                 ; put gain value in temp store
0686: 5D 71    MOV   A,REG[0x71]        (0161)    mov  A, reg[PGA_GAIN_CR0]                               ; read mux settings
0688: 21 07    AND   A,0x7              (0162)    and  A, ~GAINREGMASK                                   ; clear gain bits in A
068A: 48 00 04 TST   [X+0],0x4          (0163)    tst  [X],HIGHGAIN                                      ; See if High Gain is set
068D: B0 0E    JNZ   0x069C             (0164)    jnz  .SETHIGHGAIN
068F: 41 70 FE AND   REG[0x70],0xFE     (0165)    and  reg[PGA_GAIN_CR3],~EXGAIN                          ; Clear High Gain bit.
0692: 2B 00    OR    A,[X+0]            (0166)    or   A, [X]                                            ; combine gain value with balance of reg.
0694: 60 71    MOV   REG[0x71],A        (0167)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
0696: 18       POP   A                  (0168)    pop  A
0697: 70 3F    AND   F,0x3F             
0699: 71 C0    OR    F,0xC0             
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_2
069B: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) .SETHIGHGAIN:
069C: 27 00 18 AND   [X+0],0x18         (0173)    and  [X],HIGHGAINMASK                                  ; Make sure we have a valid high gain
069F: 2B 00    OR    A,[X+0]            (0174)    or   A, [X]                                            ; combine gain value with balance of reg.
06A1: 60 71    MOV   REG[0x71],A        (0175)    mov  reg[PGA_GAIN_CR0], A                               ; move complete value back to register
06A3: 43 70 01 OR    REG[0x70],0x1      (0176)    or   reg[PGA_GAIN_CR3], EXGAIN                          ; Set High Gain bit.
06A6: 18       POP   A                  (0177)    pop  A
06A7: 70 3F    AND   F,0x3F             
06A9: 71 C0    OR    F,0xC0             
                                        (0178)    RAM_EPILOGUE RAM_USE_CLASS_2
06AB: 7F       RET                      (0179)    ret
                                        (0180) .ENDSECTION
                                        (0181) 
                                        (0182) .SECTION
                                        (0183) ;-----------------------------------------------------------------------------
                                        (0184) ;  FUNCTION NAME: PGA_Stop
                                        (0185) ;
                                        (0186) ;  DESCRIPTION:
                                        (0187) ;    Turns off the power to the amplifier.
                                        (0188) ;
                                        (0189) ;-----------------------------------------------------------------------------
                                        (0190) ;
                                        (0191) ;  ARGUMENTS: None
                                        (0192) ;
                                        (0193) ;  RETURNS:  NA
                                        (0194) ;
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    The A and X registers may be modified by this or future implementations
                                        (0197) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0198) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0199) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0200) ;    functions.
                                        (0201) ;
                                        (0202)  PGA_Stop:
                                        (0203) _PGA_Stop:
                                        (0204) 
                                        (0205)    RAM_PROLOGUE RAM_USE_CLASS_1
06AC: 41 73 FC AND   REG[0x73],0xFC     (0206)    and REG[PGA_GAIN_CR2], ~POWERMASK
                                        (0207)    RAM_EPILOGUE RAM_USE_CLASS_1
06AF: 7F       RET                      (0208)    ret
                                        (0209) .ENDSECTION
                                        (0210) 
                                        (0211) IF (PGA_AGNDBUFAPI)
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: PGA_EnableAGNDBuffer
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;    Turns on the AGND buffer power.
                                        (0218) ;
                                        (0219) ;-----------------------------------------------------------------------------
                                        (0220) ;
                                        (0221) ;  ARGUMENTS: None
                                        (0222) ;
                                        (0223) ;  RETURNS:  NA
                                        (0224) ;
                                        (0225) ;  SIDE EFFECTS:
                                        (0226) ;    The A and X registers may be modified by this or future implementations
                                        (0227) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0228) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0229) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0230) ;    functions.
                                        (0231) ;
                                        (0232)  PGA_EnableAGNDBuffer:
                                        (0233) _PGA_EnableAGNDBuffer:
                                        (0234)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0235)    and   reg[PGA_GAIN_CR3], ~AGNDBUFMASK
                                        (0236)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0237)    ret
                                        (0238) .ENDSECTION
                                        (0239) 
                                        (0240) .SECTION
                                        (0241) ;-----------------------------------------------------------------------------
                                        (0242) ;  FUNCTION NAME: PGA_DisableAGNDBuffer
                                        (0243) ;
                                        (0244) ;  DESCRIPTION:
                                        (0245) ;    Turns off the AGND buffer power.
                                        (0246) ;
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;
                                        (0249) ;  ARGUMENTS: None
                                        (0250) ;
                                        (0251) ;  RETURNS:  NA
                                        (0252) ;
                                        (0253) ;  SIDE EFFECTS:
                                        (0254) ;    The A and X registers may be modified by this or future implementations
                                        (0255) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0256) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0257) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0258) ;    functions.
                                        (0259) ;
                                        (0260)  PGA_DisableAGNDBuffer:
                                        (0261) _PGA_DisableAGNDBuffer:
                                        (0262)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0263)    or    reg[PGA_GAIN_CR3], AGNDBUFMASK
                                        (0264)    RAM_EPILOGUE RAM_USE_CLASS_1
                                        (0265)    ret
                                        (0266) .ENDSECTION
                                        (0267) ENDIF
                                        (0268) 
                                        (0269) ; End of File PGA.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
06B0: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
06B1: 10       PUSH  X                  (0209)     push  X
06B2: 28       ROMX                     (0210)     romx                               ; Get character from ROM
06B3: B0 04    JNZ   0x06B8             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
06B5: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
06B6: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
06B7: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
06B8: 90 44    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0218)     call  LCD_WriteData                ; Write data to LCD
06BA: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
06BB: 18       POP   A                  (0220)     pop   A
06BC: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
06BD: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
06BF: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
06C0: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
06D2: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
06D3: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
06D4: 67       ASR   A                  (0262)     asr   A
06D5: 67       ASR   A                  (0263)     asr   A
06D6: 67       ASR   A                  (0264)     asr   A
06D7: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
06D9: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
06DB: 90 21    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0267)     call  LCD_WriteData                ; Write data to screen
06DD: 18       POP   A                  (0268)     pop   A                            ; Restore value
06DE: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
06E0: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
06E2: 90 1A    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
06E4: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
06E5: 4B       SWAP  A,X                (0305)     swap  A,X
06E6: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
06E8: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
06E9: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
06EB: 7F       RET                      (0310)     ret
06EC: 70 BF    AND   F,0xBF             
06EE: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
06F0: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
06F2: A0 06    JZ    0x06F9             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
06F4: 90 08    CALL  _LCD_Write_Data|LCD_WriteData|_LCD_WriteData(0349)     call  LCD_WriteData                ; Write data to screen
06F6: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
06F7: 8F F8    JMP   0x06F0             (0351)     jmp   .Loop_PrString               ; Go get next character
06F9: 70 3F    AND   F,0x3F             
06FB: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
06FD: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
06FE: 90 65    CALL  0x0765             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
0700: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
0701: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
0702: 67       ASR   A                  (0390)     asr   A
0703: 67       ASR   A                  (0391)     asr   A
0704: 67       ASR   A                  (0392)     asr   A
0705: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
0707: 90 3B    CALL  0x0744             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
0709: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
070A: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
070C: 40       NOP                      (0397)     nop
070D: 40       NOP                      (0398)     nop
070E: 40       NOP                      (0399)     nop
070F: 90 33    CALL  0x0744             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
0711: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
0712: 90 51    CALL  0x0765             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
0714: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
0715: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
0716: 67       ASR   A                  (0436)     asr   A
0717: 67       ASR   A                  (0437)     asr   A
0718: 67       ASR   A                  (0438)     asr   A
0719: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
071B: 90 09    CALL  0x0726             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
071D: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
071E: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
0720: 40       NOP                      (0443)     nop
0721: 40       NOP                      (0444)     nop
0722: 40       NOP                      (0445)     nop
0723: 90 01    CALL  0x0726             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
0725: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
0726: 08       PUSH  A                  (0477)     push  A
0727: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
072A: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
072D: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
072F: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
0731: 18       POP   A                  (0483)     pop   A
0732: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
0734: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
0736: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
0738: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
073A: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
073C: 40       NOP                      (0489)     nop
073D: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
073F: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
0741: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
0743: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
0744: 08       PUSH  A                  (0523)     push  A
0745: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
0748: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
074B: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
074E: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
0750: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
0752: 18       POP   A                  (0530)     pop   A
0753: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
0755: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
0757: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
0759: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
075B: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
075D: 40       NOP                      (0536)     NOP
075E: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0760: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0762: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0764: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0765: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0766: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
0769: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
076C: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
076E: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0770: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0773: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0775: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0777: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
0779: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
077B: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
077E: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
0780: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0782: 40       NOP                      (0586)     NOP
                                        (0587) 
0783: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0784: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0786: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
0789: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
078B: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
078D: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
078E: 40       NOP                      (0597)     nop
078F: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0791: 08       PUSH  A                  (0610)     push  A
0792: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0795: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
0797: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
0799: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
079A: 40       NOP                      (0616)     nop                                    ; fastest PSoC
079B: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
079C: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
079F: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
07A1: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
07A3: 40       NOP                      (0623)     nop
07A4: 40       NOP                      (0624)     nop
                                        (0625) 
07A5: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
07A8: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
07AA: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
07AC: 18       POP   A                  (0630)     pop   A
07AD: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
07AF: A0 04    JZ    0x07B4             (0633)     jz    .UNLOCK
07B1: 79       DEC   X                  (0634)     dec   X
07B2: BF D3    JNZ   0x0786             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
07B4: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
07B5: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
07B8: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
07BA: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
07BC: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
07BE: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
07C0: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
07C1: 7F       RET                      (0646)     ret
07C2: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
07C5: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
07C8: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
07CB: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
07CE: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
07D0: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
07D2: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
07D4: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
07D6: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
07D8: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
07DA: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
07DC: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
07DE: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
07E0: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
07E2: 50 03    MOV   A,0x3              (0701)     mov   A,03h
07E4: 9F 40    CALL  0x0726             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
07E6: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
07E8: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
07EA: 50 03    MOV   A,0x3              (0707)     mov   A,03h
07EC: 9F 38    CALL  0x0726             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
07EE: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
07F0: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
07F2: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
07F4: 50 03    MOV   A,0x3              (0714)     mov   A,03h
07F6: 9F 2E    CALL  0x0726             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
07F8: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
07FA: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
07FC: 50 02    MOV   A,0x2              (0720)     mov   A,02h
07FE: 9F 26    CALL  0x0726             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
0800: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0802: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
0804: 50 08    MOV   A,0x8              (0726)     mov   A,08h
0806: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
0808: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
080A: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
080C: 50 01    MOV   A,0x1              (0731)     mov   A,01h
080E: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
0810: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
0812: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
0814: 50 06    MOV   A,0x6              (0736)     mov   A,06h
0816: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
0818: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
081A: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
081C: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
081E: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
0820: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
0822: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
0824: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
0826: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
0828: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
082A: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
082C: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
082E: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
0830: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
0835: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
0837: 10       PUSH  X                  (0791)     push  X                            ; Store COL
0838: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
083A: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
083B: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
083D: 20       POP   X                  (0795)     pop   X
                                        (0796) 
083E: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
0840: 70 3F    AND   F,0x3F             
0842: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
0844: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
0845: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
0847: 78       DEC   A                  (0828)     dec   A
0848: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
084A: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
0853: 08       PUSH  A                  (0871)     push  A
0854: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
0856: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
0858: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
085A: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
085C: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
085E: D0 06    JNC   0x0865             (0877)     jnc   .Delay50u_End
0860: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0862: 78       DEC   A                  (0880)     dec   A                              ; [4]
0863: BF FE    JNZ   0x0862             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0865: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0866: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1015)     mov   X, SP
                                        (1016)     push  X
                                        (1017)     mov   A,[X+BG_ROW]                 ; Row in A
                                        (1018)     mov   X,[X+BG_COL]                 ; Col in X
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
                                        (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
                                        (1026)     jnz   .LCD_CHECK1
                                        (1027)     mov   A,00h                        ; Load empty character
                                        (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
                                        (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
                                        (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
                                        (1033)     mov   A,[X+BG_LENGTH]
                                        (1034)     sub   [X+BG_LENGTH],A
                                        (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
                                        (1038)     mov   A, 06h
                                        (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
                                        (1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
                                        (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
                                        (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1168)     mov   X, SP
                                        (1169)     mov   A, [X+VBG_ROW]
                                        (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
                                        (1172)     push  A
                                        (1173)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
                                        (1175)     call  LCD_Control                  ; Position Cursor
                                        (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
                                        (1177)     jnz   .VBG_NZ_SEG
                                        (1178)     mov   A,' '                        ; Load space character
                                        (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
                                        (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
                                        (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
                                        (1184)     mov   A,[X+VBG_SEG_HEIGHT]
                                        (1185)     dec   A
                                        (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
                                        (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
                                        (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
                                        (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
                                        (1194)     call  LCD_WriteData                ; Write value
                                        (1195)     pop   A
                                        (1196)     dec   A
                                        (1197)     dec   [X+VBG_CHAR_HEIGHT]
                                        (1198)     jnz   .VBG_LOOP
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1238)     mov   X,SP                         ; Get location of stack
                                        (1239)     push  A                            ; Create 2 locations
                                        (1240)     push  A
                                        (1241) 
                                        (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1243)     call  LCD_Control                  ; Position the CG pointer
                                        (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
                                        (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
                                        (1249)     mov   A,[X+VBGDATA_CTR]
                                        (1250)     cmp   A,[X+VBG_BYTES]
                                        (1251)     jnc   .VBG_SOLID
                                        (1252)     mov   A,00h                        ; Empty line
                                        (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
                                        (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
                                        (1257)     call  LCD_WriteData                ; character data
                                        (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
                                        (1259)     jnz   .VBG_Loop2                    ; End Loop 2
                                        (1260)     inc   [X+VBGDATA_CTR]
                                        (1261)     cmp   [X+VBGDATA_CTR],09h
                                        (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
                                        (1264)     pop  A
                                        (1265)     pop  A
                                        (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
                                        (1267)     call LCD_Control                   ; need this.
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
                                        (1319)     mov   X,SP                         ; Get location of stack
                                        (1320)     add   SP,3
                                        (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
                                        (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
                                        (1324)     call  LCD_Control                  ; Position the CG pointer
                                        (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
                                        (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
                                        (1330)     mov   A,[X+BGDATA_PTR]
                                        (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
                                        (1332)     jnz   .BG_OTHER
                                        (1333)     index LCD_BG_TYPE1
                                        (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
                                        (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
                                        (1338)     call  LCD_WriteData
                                        (1339)     dec   [X+BGCHARS]                  ; Character builder counter
                                        (1340)     jnz   .BG_Loop2
                                        (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
                                        (1342)     cmp   [X+BGDATA_PTR],07h
                                        (1343)     jnz   .BG_Loop1
                                        (1344) 
                                        (1345)     add   SP,-3
                                        (1346)     mov   A,LCD_DISP_ON
                                        (1347)     call  LCD_Control
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
                                        (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: lib\adcint.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   ADCINT.asm
                                        (0004) ;;  Version: 4.00, Updated on 2015/3/4 at 22:21:28
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR Interrupt Service Routines
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "ADC.inc"
                                        (0016) 
                                        (0017) ;-----------------------------------------------
                                        (0018) ;  Global Symbols
                                        (0019) ;-----------------------------------------------
                                        (0020) export _ADC_CNT_ISR
                                        (0021) export _ADC_PWM16_ISR
                                        (0022) export  ADC_cCounterU
                                        (0023) export _ADC_iResult
                                        (0024) export  ADC_iResult
                                        (0025) export _ADC_bfStatus
                                        (0026) export  ADC_bfStatus
                                        (0027) export  ADC_bSampC
                                        (0028) 
                                        (0029) ;-----------------------------------------------
                                        (0030) ; Variable Allocation
                                        (0031) ;-----------------------------------------------
                                        (0032) AREA InterruptRAM(RAM, REL, CON)
                                        (0033) 
                                        (0034)  ADC_cCounterU:     BLK   1  ;The Upper byte of the Counter
                                        (0035) _ADC_iResult:
                                        (0036)  ADC_iResult:       BLK   2  ;A/D value
                                        (0037) _ADC_bfStatus:
                                        (0038)  ADC_bfStatus:      BLK   1  ;Data Valid Flag
                                        (0039)  ADC_bSampC:        BLK   1  ;# of times to run A/D
                                        (0040) 
                                        (0041) 
                                        (0042) ;-----------------------------------------------
                                        (0043) ;  EQUATES and TABLES
                                        (0044) ;-----------------------------------------------
                                        (0045) LowByte:   equ 1
                                        (0046) HighByte:  equ 0
                                        (0047) 
                                        (0048) 
                                        (0049) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0050) ;---------------------------------------------------
                                        (0051) ; Insert your custom declarations below this banner
                                        (0052) ;---------------------------------------------------
                                        (0053) 
                                        (0054) ;------------------------
                                        (0055) ; Includes
                                        (0056) ;------------------------
                                        (0057) 
                                        (0058) 	
                                        (0059) ;------------------------
                                        (0060) ;  Constant Definitions
                                        (0061) ;------------------------
                                        (0062) 
                                        (0063) 
                                        (0064) ;------------------------
                                        (0065) ; Variable Allocation
                                        (0066) ;------------------------
                                        (0067) 
                                        (0068) 
                                        (0069) ;---------------------------------------------------
                                        (0070) ; Insert your custom declarations above this banner
                                        (0071) ;---------------------------------------------------
                                        (0072) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0073) 
                                        (0074) AREA UserModules (ROM, REL)
                                        (0075) 
                                        (0076) .LITERAL
                                        (0077) ADCMaxNegX4Table:
                                        (0078) ; Bits  7    8    9   10   11   12   13
                                        (0079)    DB  FFh, FEh, FCh, F8h, F0h, E0h, C0h
                                        (0080) 
                                        (0081) ADCMaxPosX4Table:
                                        (0082) IF (ADC_DATA_FORMAT)
                                        (0083) ; Bits (signed)    7    8    9   10   11   12   13
                                        (0084)               DB  01h, 02h, 04h, 08h, 10h, 20h, 40h
                                        (0085) ELSE
                                        (0086) ; Bits (unsigned)  7    8    9   10   11   12   13
                                        (0087)               DB  02h, 04h, 08h, 10h, 20h, 40h, 80h
                                        (0088) 
                                        (0089)  ENDIF
                                        (0090) .ENDLITERAL
                                        (0091) 
                                        (0092) ;-----------------------------------------------------------------------------
                                        (0093) ;  FUNCTION NAME: _ADC_CNT_ISR (Counter8 Interrupt)
                                        (0094) ;
                                        (0095) ;
                                        (0096) ;  DESCRIPTION:
                                        (0097) ;     Increment the upper (software) half on the counter whenever the
                                        (0098) ;     lower (hardware) half of the counter underflows.  This counter
                                        (0099) ;     should start out at the most negative value (0xFF).
                                        (0100) ;
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;
                                        (0103) _ADC_CNT_ISR:
0875: 76 03    INC   [0x3]              (0104)    inc [ADC_cCounterU]
                                        (0105)    ;@PSoC_UserCode_BODY_1@ (Do not change this line.)
                                        (0106)    ;---------------------------------------------------
                                        (0107)    ; Insert your custom assembly code below this banner
                                        (0108)    ;---------------------------------------------------
                                        (0109)    ;   NOTE: interrupt service routines must preserve
                                        (0110)    ;   the values of the A and X CPU registers.
                                        (0111)    
                                        (0112)    ;---------------------------------------------------
                                        (0113)    ; Insert your custom assembly code above this banner
                                        (0114)    ;---------------------------------------------------
                                        (0115)    
                                        (0116)    ;---------------------------------------------------
                                        (0117)    ; Insert a lcall to a C function below this banner
                                        (0118)    ; and un-comment the lines between these banners
                                        (0119)    ;---------------------------------------------------
                                        (0120)    
                                        (0121)    ;PRESERVE_CPU_CONTEXT
                                        (0122)    ;lcall _My_C_Function
                                        (0123)    ;RESTORE_CPU_CONTEXT
                                        (0124)    
                                        (0125)    ;---------------------------------------------------
                                        (0126)    ; Insert a lcall to a C function above this banner
                                        (0127)    ; and un-comment the lines between these banners
                                        (0128)    ;---------------------------------------------------
                                        (0129)    ;@PSoC_UserCode_END@ (Do not change this line.)
0877: 7E       RETI                     (0130)    reti
                                        (0131) 
                                        (0132) 
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;  FUNCTION NAME: _ADC_PWM16_ISR  (PWM16 Interrupt)
                                        (0135) ;
                                        (0136) ;  DESCRIPTION:
                                        (0137) ;     This ISR is called when the ADC has completed and integrate cycle.
                                        (0138) ;     The ADC value is calculated and stored in a global location before
                                        (0139) ;     the end of the ISR.
                                        (0140) ;
                                        (0141) ;-----------------------------------------------------------------------------
                                        (0142) ;
                                        (0143) _ADC_PWM16_ISR:
0878: 41 23 FE AND   REG[0x23],0xFE     (0144)    and   reg[ADC_bCounter_CR0], ~ADC_fDBLK_ENABLE          ; Disable Counter
                                        (0145) IF ADC_NoAZ
087B: 43 82 20 OR    REG[0x82],0x20     (0146)    or    reg[ADC_bfAtoDcr2], ADC_fAutoZero                 ; Put Integrator in AutoZero
                                        (0147) ENDIF
087E: 43 83 10 OR    REG[0x83],0x10     (0148)    or   reg[ADC_bfAtoDcr3],ADC_fFSW0                       ; Put Integrator in reset
0881: 71 01    OR    F,0x1              
                                        (0149) 
                                        (0150)                                                            ; Enable interrupts for a short period of time just in case.
                                        (0151)                                                            ; Make sure we didn't have a counter interrupt ready to fire
                                        (0152)    M8C_EnableGInt
0883: 40       NOP                      (0153)    nop                                                     ; Wait a couple cycles
0884: 70 FE    AND   F,0xFE             
                                        (0154)    M8C_DisableGInt                                         ; Disable interrupt, read to complete processing
0886: 08       PUSH  A                  (0155)    push  A                                                 ; Save the Accumulator
0887: 5D 20    MOV   A,REG[0x20]        (0156)    mov   A,reg[ADC_bCount]                                 ; Read counter value  (Bogus read puts value in Period register)
0889: 5D 22    MOV   A,REG[0x22]        (0157)    mov   A,reg[ADC_bCompare]                               ; Read counter value
088B: 78       DEC   A                  (0158)    dec   A                                                 ; Decrement by one to make sure we didn't miss a count
088C: 73       CPL   A                  (0159)    cpl   A                                                 ; Invert the value
088D: D0 03    JNC   0x0891             (0160)    jnc   ADC_INT_CALCV                                     ; if carry, then inc MSB as well
088F: 76 03    INC   [0x3]              (0161)    inc   [ADC_cCounterU]
                                        (0162) ADC_INT_CALCV:
0891: 53 05    MOV   [0x5],A            (0163)    mov   [(ADC_iResult + LowByte)], A                      ; Store LSB value
0893: 51 03    MOV   A,[0x3]            (0164)    mov   A, [ADC_cCounterU]                                ; Store MSB from temp counter
0895: 53 04    MOV   [0x4],A            (0165)    mov   [(ADC_iResult + HighByte)], A
                                        (0166)                                                            ; The new value has been stored,
                                        (0167)                                                            ; so get counters ready for next reading first.
0897: 62 21 FF MOV   REG[0x21],0xFF     (0168)    mov   reg[ADC_bPeriod], ffh                             ; Initialize counter to FF - Set to overflow after 256 counts
089A: 43 23 01 OR    REG[0x23],0x1      (0169)    or    reg[ADC_bCounter_CR0],ADC_fDBLK_ENABLE            ; Enable Counter
                                        (0170) 
                                        (0171) IF (ADC_DATA_FORMAT)                                       ; Only check for Negative numbers if SIGNED result
                                        (0172)    mov   A, [ADC_bfStatus]                                 ; Get Status with Resolution
                                        (0173)    and   A, ADC_bRES_MASK                                  ; Mask of resolution
                                        (0174)    index ADCMaxNegX4Table                                  ; Get Maximum negative value from table
                                        (0175)    mov   [ADC_cCounterU], A                                ; Place result back into MSB of counter
                                        (0176) ELSE
089D: 55 03 00 MOV   [0x3],0x0          (0177)    mov   [ADC_cCounterU], 00h                              ; Place result back into MSB of counter
                                        (0178) ENDIF
                                        (0179) 
                                        (0180)    ;@PSoC_UserCode_BODY_2@ (Do not change this line.)
                                        (0181)    ;---------------------------------------------------
                                        (0182)    ; If the input is muxed with multiple inputs
                                        (0183)    ; this is a good place to change inputs.
                                        (0184)    ; Insert your custom code below this banner
                                        (0185)    ;---------------------------------------------------
                                        (0186)    ;   NOTE: interrupt service routines must preserve
                                        (0187)    ;   the values of the A and X CPU registers. At this
                                        (0188)    ;   point A is already preserved and will be restored;
                                        (0189)    ;   however, if you use X, you must take care of it
                                        (0190)    ;   here!
                                        (0191) 
                                        (0192)    ;---------------------------------------------------
                                        (0193)    ; Insert your custom code above this banner
                                        (0194)    ;---------------------------------------------------
                                        (0195)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0196) 
08A0: 41 83 EF AND   REG[0x83],0xEF     (0197)    and   reg[ADC_bfAtoDcr3],~ADC_fFSW0                     ; Take Integrator out of reset
                                        (0198) IF ADC_NoAZ
08A3: 41 82 DF AND   REG[0x82],0xDF     (0199)    and   reg[ADC_bfAtoDcr2],~ADC_fAutoZero                 ; Take Integrator out of AutoZero
                                        (0200) ENDIF
                                        (0201) 
                                        (0202)    ;****************************************************************************
                                        (0203)    ;M8C_EnableGInt            ; May want to re-enable interrupts at this point,
                                        (0204)    ;                          ; if stack space isn't at a premium.
                                        (0205)    ; NOTE:  this will make system more responsive but, will increase the
                                        (0206)    ;        overall processing time of the A/D calctime.  If an interrupt is
                                        (0207)    ;        taken, it must return within the specified CalcTime to guarantee
                                        (0208)    ;        successful acquisition of the next byte.
                                        (0209)    ;****************************************************************************
                                        (0210) IF (ADC_DATA_FORMAT)                             ; Only check for Negative numbers if SIGNED result
                                        (0211) 
                                        (0212)                                                  ; Negative Overflow Check
                                        (0213)    tst   [(ADC_iResult + HighByte)],80h
                                        (0214)    jnz   ADC_NOT_POVFL2
                                        (0215) 
                                        (0216) ENDIF
                                        (0217)                                                  ; Postive Overflow Check
                                        (0218)                                                  ; Get MSB of Max Positive value x4 + 1
08A6: 51 06    MOV   A,[0x6]            (0219)    mov   A,[ADC_bfStatus]                        ; Get Status with Resolution
08A8: 21 0F    AND   A,0xF              (0220)    and   A,ADC_bRES_MASK                         ; Mask of resolution normalized to 0
08AA: FF C2    INDEX 0x086E             (0221)    index ADCMaxPosX4Table                        ; Get Maximum positive value x4 + 1 from table
08AC: 08       PUSH  A                  (0222)    push  A
08AD: 22 04    AND   A,[0x4]            (0223)    and   A, [(ADC_iResult + HighByte)]
08AF: A0 0B    JZ    0x08BB             (0224)    jz    ADC_NOT_POVFL
                                        (0225)                                                  ; Positive overflow, fix it - set to Max Positive + 1
08B1: 18       POP   A                  (0226)    pop   A
08B2: 11 01    SUB   A,0x1              (0227)    sub   A, 01h
                                        (0228) 
                                        (0229)                                                  ; Force most positive * 4 into result
08B4: 53 04    MOV   [0x4],A            (0230)    mov   [(ADC_iResult + HighByte)], A
08B6: 55 05 FF MOV   [0x5],0xFF         (0231)    mov   [(ADC_iResult + LowByte)], ffh
08B9: 80 02    JMP   0x08BC             (0232)    jmp   ADC_NOT_POVFL2
                                        (0233) ADC_NOT_POVFL:
08BB: 18       POP   A                  (0234)    pop   A
                                        (0235) 
                                        (0236) ADC_NOT_POVFL2:
08BC: 68 04    ASR   [0x4]              (0237)    asr   [(ADC_iResult + HighByte)]              ; Shift MSB and LSB right twice to divide by four
08BE: 6E 05    RRC   [0x5]              (0238)    rrc   [(ADC_iResult + LowByte)]               ; Remember digital clock 4 times analog clock
08C0: 68 04    ASR   [0x4]              (0239)    asr   [(ADC_iResult + HighByte)]
08C2: 6E 05    RRC   [0x5]              (0240)    rrc   [(ADC_iResult + LowByte)]
                                        (0241) 
                                        (0242)    ;@PSoC_UserCode_BODY_3@ (Do not change this line.)
                                        (0243)    ;---------------------------------------------------
                                        (0244)    ; Data is ready at this point.
                                        (0245)    ; If processing Data at Interrupt level - add
                                        (0246)    ; User Code to handle the data below this banner
                                        (0247)    ;---------------------------------------------------
                                        (0248)    ;   NOTE: interrupt service routines must preserve
                                        (0249)    ;   the values of the A and X CPU registers. At this
                                        (0250)    ;   point A is already preserved and will be restored;
                                        (0251)    ;   however, if you use X, you must take care of it
                                        (0252)    ;   here!
                                        (0253) 
                                        (0254)    ;---------------------------------------------------
                                        (0255)    ; Insert your custom code above this banner
                                        (0256)    ;---------------------------------------------------
                                        (0257)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0258) 
08C4: 18       POP   A                  (0259)    pop   A                                       ; Restore A, not used any more
                                        (0260) 
08C5: 2E 06 10 OR    [0x6],0x10         (0261)    or    [ADC_bfStatus],ADC_fDATA_READY          ; Set Data ready bit
                                        (0262) 
08C8: 47 07 FF TST   [0x7],0xFF         (0263)    tst   [ADC_bSampC], ffh                       ; If sample_counter == 0 -->> continuous data collection
08CB: A0 17    JZ    0x08E3             (0264)    jz    ADC_END_PWM16_ISR
                                        (0265) 
08CD: 7A 07    DEC   [0x7]              (0266)    dec   [ADC_bSampC]                            ; Dec sample counter and check for zero
08CF: B0 13    JNZ   0x08E3             (0267)    jnz   ADC_END_PWM16_ISR
                                        (0268) 
                                        (0269)    ;**********************************************
                                        (0270)    ; Turn off ADC
                                        (0271)    ;**********************************************
08D1: 41 27 FE AND   REG[0x27],0xFE     (0272)    and   reg[ADC_fPWM_LSB_CR0], ~ADC_fDBLK_ENABLE              ; Disable the PWM
08D4: 41 23 FE AND   REG[0x23],0xFE     (0273)    and   reg[ADC_bCounter_CR0], ~ADC_fDBLK_ENABLE              ; Disable the Counter
                                        (0274) IF ADC_NoAZ
08D7: 43 82 20 OR    REG[0x82],0x20     (0275)    or    reg[ADC_bfAtoDcr2], ADC_fAutoZero                     ; Put the Integrator into Autozero mode
                                        (0276) ENDIF
08DA: 43 83 10 OR    REG[0x83],0x10     (0277)    or    reg[ADC_bfAtoDcr3], ADC_fFSW0                         ; Put Integrator into reset
08DD: 41 E1 FB AND   REG[0xE1],0xFB     (0278)    and   reg[ADC_bfPWM16_INT_REG], ~ADC_bfPWM16_Mask           ; Disable interrupts
08E0: 41 E1 FE AND   REG[0xE1],0xFE     (0279)    and   reg[ADC_bfCounter_INT_REG], ~ADC_bfCounter_Mask
                                        (0280) 
                                        (0281) ADC_END_PWM16_ISR:
08E3: 7E       RETI                     (0282)    reti
                                        (0283) 
                                        (0284) ; End of File ADCINT.asm
FILE: lib\adc.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
08E4: 62 D0 00 MOV   REG[0xD0],0x0      (0003) ;;  ADC.asm
                                        (0004) ;;  Version: 4.00, Updated on 2015/3/4 at 22:21:28
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: ADCINCVR User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "ADC.inc"
                                        (0023) include "m8c.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  ADC_Start
                                        (0030) export _ADC_Start
                                        (0031) export  ADC_SetPower
                                        (0032) export _ADC_SetPower
                                        (0033) export  ADC_Stop
                                        (0034) export _ADC_Stop
                                        (0035) export  ADC_GetSamples
                                        (0036) export _ADC_GetSamples
                                        (0037) export  ADC_StopAD
                                        (0038) export _ADC_StopAD
                                        (0039) export  ADC_fIsData
                                        (0040) export _ADC_fIsData
                                        (0041) export  ADC_fIsDataAvailable
                                        (0042) export _ADC_fIsDataAvailable
                                        (0043) export  ADC_iGetData
                                        (0044) export _ADC_iGetData
                                        (0045) export  ADC_ClearFlag
                                        (0046) export _ADC_ClearFlag
                                        (0047) export  ADC_iGetDataClearFlag
                                        (0048) export _ADC_iGetDataClearFlag
                                        (0049) export  ADC_SetResolution
                                        (0050) export _ADC_SetResolution
                                        (0051) 
                                        (0052) ;-----------------------------------------------
                                        (0053) ;  EQUATES
                                        (0054) ;-----------------------------------------------
                                        (0055) LowByte:       equ 1
                                        (0056) HighByte:      equ 0
                                        (0057) 
                                        (0058) ; Calctime parameters
                                        (0059) wCalcTime:     equ   ADC_bCALCTIME
                                        (0060) 
                                        (0061) AREA UserModules (ROM, REL)
                                        (0062) 
                                        (0063) .SECTION
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;  FUNCTION NAME: ADC_Start
                                        (0066) ;  FUNCTION NAME: ADC_SetPower
                                        (0067) ;
                                        (0068) ;  DESCRIPTION:
                                        (0069) ;  Applies power setting to the module's analog PSoc block.
                                        (0070) ;
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;
                                        (0073) ;  ARGUMENTS:
                                        (0074) ;   A  Contains power level setting 0 to 3
                                        (0075) ;
                                        (0076) ;  RETURNS:  NA
                                        (0077) ;
                                        (0078) ;  SIDE EFFECTS:
                                        (0079) ;    The A and X registers may be modified by this or future implementations
                                        (0080) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0081) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0082) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0083) ;    functions.
                                        (0084) ;          
                                        (0085) ;    Currently only the page pointer registers listed below are modified:
                                        (0086) ;          CUR_PP
                                        (0087) ;
                                        (0088)  ADC_Start:
                                        (0089) _ADC_Start:
                                        (0090)  ADC_SetPower:
                                        (0091) _ADC_SetPower:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0094)    RAM_SETPAGE_CUR >ADC_bfStatus
                                        (0095)    
08E7: 4F       MOV   X,SP               (0096)    mov   X, SP                                       ; Get location of next location on stack
08E8: 21 03    AND   A,0x3              (0097)    and   A,ADC_bfPOWERMASK                           ; Mask only the valid power setting bits
08EA: 08       PUSH  A                  (0098)    push  A                                           ; Save power value on temp location
08EB: 5D 83    MOV   A,REG[0x83]        (0099)    mov   A, reg[ADC_bfAtoDcr3]                       ; Get current value of AtoDcr3
08ED: 21 FC    AND   A,0xFC             (0100)    and   A, ~ADC_bfPOWERMASK                         ; Mask off old power value
08EF: 2B 00    OR    A,[X+0]            (0101)    or    A, [X]                                      ; OR in new power value
08F1: 29 F0    OR    A,0xF0             (0102)    or    A, f0h                                      ; Make sure other register is set correctly
08F3: 60 83    MOV   REG[0x83],A        (0103)    mov   reg[ADC_bfAtoDcr3], A                       ; Reload CR with new power value
                                        (0104) 
08F5: 49 82 01 TST   REG[0x82],0x1      (0105)    tst   reg[ADC_bfAtoDcr2], ADC_fRES_SET
08F8: A0 05    JZ    0x08FE             (0106)    jz    .DoNotLoadRes
08FA: 50 05    MOV   A,0x5              (0107)    mov   A,ADC_bNUMBITS - ADC_bMINRES                           ; get and set the resolution
08FC: 53 06    MOV   [0x6],A            (0108)    mov   [ADC_bfStatus], A              ; place it in the status variable
                                        (0109) .DoNotLoadRes:
08FE: 18       POP   A                  (0110)    pop   A                                           ; Restore the stack and power value
08FF: 70 3F    AND   F,0x3F             
0901: 71 C0    OR    F,0xC0             
                                        (0111)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_4
0903: 7F       RET                      (0113)    ret
                                        (0114) .ENDSECTION
                                        (0115) 
                                        (0116) .SECTION
                                        (0117) ;-----------------------------------------------------------------------------
                                        (0118) ;  FUNCTION NAME: ADC_Stop
                                        (0119) ;
                                        (0120) ;  DESCRIPTION:
                                        (0121) ;  Removes power from the module's analog PSoc block, but the digital
                                        (0122) ;  blocks keep on running.
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: None
                                        (0127) ;
                                        (0128) ;  RETURNS:   NA
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  ADC_Stop:
                                        (0138) _ADC_Stop:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
0904: 41 83 FC AND   REG[0x83],0xFC     (0140)    and   reg[ADC_bfAtoDcr3], ~ADC_bfPOWERMASK
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0907: 7F       RET                      (0142)    ret
0908: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0143) .ENDSECTION
                                        (0144) 
                                        (0145) .SECTION
                                        (0146) ;-----------------------------------------------------------------------------
                                        (0147) ;  FUNCTION NAME: ADC_Get_Samples
                                        (0148) ;
                                        (0149) ;  DESCRIPTION:
                                        (0150) ;  Starts the A/D convertor and will place data is memory.  A flag
                                        (0151) ;  is set whenever a new data value is available.
                                        (0152) ;
                                        (0153) ;-----------------------------------------------------------------------------
                                        (0154) ;
                                        (0155) ;  ARGUMENTS:
                                        (0156) ;  A  Number of samples to be taken.  A zero will cause the ADC to run
                                        (0157) ;     continuously.
                                        (0158) ;
                                        (0159) ;  RETURNS:  NA
                                        (0160) ;
                                        (0161) ;  SIDE EFFECTS:
                                        (0162) ;    The A and X registers may be modified by this or future implementations
                                        (0163) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0164) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0165) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0166) ;    functions.
                                        (0167) ;          
                                        (0168) ;    Currently only the page pointer registers listed below are modified:
                                        (0169) ;          CUR_PP
                                        (0170) ;
                                        (0171)  ADC_GetSamples:
                                        (0172) _ADC_GetSamples:
                                        (0173)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0174)    RAM_SETPAGE_CUR >ADC_bfStatus
090B: 53 07    MOV   [0x7],A            (0175)    mov   [ADC_bSampC], A                                   ; Store sample count
                                        (0176)                                                            ; Interrupts, Put A/D in reset
090D: 51 06    MOV   A,[0x6]            (0177)    mov   A,[ADC_bfStatus]                                  ; get and set the resolution
090F: 21 0F    AND   A,0xF              (0178)    and   A,ADC_bRES_MASK
0911: 01 07    ADD   A,0x7              (0179)    add   A,ADC_bMINRES
0913: 90 5B    CALL  _ADC_SetResolution (0180)    call  ADC_SetResolution
                                        (0181) 
                                        (0182) ADC_LoadMSBCounter:                                        ; The PWM has been setup by SetResolution, now set the upper
                                        (0183)                                                            ; counter which will be the same as the period.
                                        (0184)                                                            ; Reset MSB of counter to most negative value
                                        (0185) 
0915: 5D 2A    MOV   A,REG[0x2A]        (0186)    mov   A,reg[ADC_bPWM_IntTime_MSB]                       ; Get MSB of PWM and move it into RAM
0917: 53 03    MOV   [0x3],A            (0187)    mov   [ADC_cCounterU], A                                ; Use counter as temp location
0919: 50 00    MOV   A,0x0              (0188)    mov   A, 00h                                            ; Load A with zero for the calculation
091B: 12 03    SUB   A,[0x3]            (0189)    sub   A, [ADC_cCounterU]                                ; 0 - MSB_PWM = MSB_of_most_neg_value
091D: 67       ASR   A                  (0190)    asr   A                                                 ; Half the range (+ and -)
                                        (0191) IF (ADC_DATA_FORMAT)
                                        (0192)    mov   [ADC_cCounterU], A                                ; Place result back into MSB of counter
                                        (0193) ELSE
091E: 55 03 00 MOV   [0x3],0x0          (0194)    mov   [ADC_cCounterU], 00h                              ; Always start at zero for unsigned values
                                        (0195) ENDIF
0921: 5D 26    MOV   A,REG[0x26]        (0196)    mov   A, reg[ADC_bPWM_IntTime_LSB]                      ; Dummy Read  - required do not remove
0923: 62 21 FF MOV   REG[0x21],0xFF     (0197)    mov   reg[ADC_bPeriod], FFh                             ; Make sure counter starts at FF
                                        (0198) 
0926: 41 83 EF AND   REG[0x83],0xEF     (0199)    and   reg[ADC_bfAtoDcr3],~ADC_fFSW0                     ; Take Integrator out of reset
                                        (0200) IF ADC_NoAZ
0929: 41 82 DF AND   REG[0x82],0xDF     (0201)     and  reg[ADC_bfAtoDcr2],~ADC_fAutoZero                 ; Take Integrator out of AutoZero
                                        (0202) ENDIF
                                        (0203) 
                                        (0204)                                                                ; Enable the A/D and Start it!
092C: 43 23 05 OR    REG[0x23],0x5      (0205)    or    reg[ADC_bCounter_CR0], (ADC_fDBLK_ENABLE|ADC_fPULSE_WIDE)   ; Enable the Counter
092F: 43 27 01 OR    REG[0x27],0x1      (0206)    or    reg[ADC_fPWM_LSB_CR0], ADC_fDBLK_ENABLE               ; Enable PWM
0932: 43 E1 04 OR    REG[0xE1],0x4      (0207)    or    reg[ADC_bfPWM16_INT_REG], ADC_bfPWM16_Mask            ; Enable Counter interrupts
0935: 43 E1 01 OR    REG[0xE1],0x1      (0208)    or    reg[ADC_bfCounter_INT_REG], ADC_bfCounter_Mask
                                        (0209)    RAM_EPILOGUE RAM_USE_CLASS_4
0938: 7F       RET                      (0210)    ret
                                        (0211) .ENDSECTION
                                        (0212) 
                                        (0213) .SECTION
                                        (0214) ;-----------------------------------------------------------------------------
                                        (0215) ;  FUNCTION NAME: ADC_StopAD
                                        (0216) ;
                                        (0217) ;  DESCRIPTION:
                                        (0218) ;  Completely shuts down the A/D is an orderly manner.  Both the
                                        (0219) ;  Timer and Counter are disabled and their interrupts are deactivated.
                                        (0220) ;
                                        (0221) ;-----------------------------------------------------------------------------
                                        (0222) ;
                                        (0223) ;  ARGUMENTS:  None
                                        (0224) ;
                                        (0225) ;  RETURNS: NA
                                        (0226) ;
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  ADC_StopAD:
                                        (0235) _ADC_StopAD:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0939: 41 27 FE AND   REG[0x27],0xFE     (0237)    and   reg[ADC_fPWM_LSB_CR0], ~ADC_fDBLK_ENABLE              ; Disable the PWM
                                        (0238) 
093C: 41 23 FE AND   REG[0x23],0xFE     (0239)    and   reg[ADC_bCounter_CR0], ~ADC_fDBLK_ENABLE              ; Disable the Counter
                                        (0240) 
                                        (0241) IF ADC_NoAZ
093F: 43 82 20 OR    REG[0x82],0x20     (0242)    or   reg[ADC_bfAtoDcr2], ADC_fAutoZero                      ; Put the Integrator into Autozero mode
                                        (0243) ENDIF
                                        (0244) 
0942: 43 83 10 OR    REG[0x83],0x10     (0245)    or   reg[ADC_bfAtoDcr3], ADC_fFSW0                          ; Put Integrator into reset
0945: 08       PUSH  A                  (0246)    push A
0946: 41 E1 FB AND   REG[0xE1],0xFB     
0949: 41 E1 FE AND   REG[0xE1],0xFE     
                                        (0247)    M8C_DisableIntMask ADC_bfPWM16_INT_REG, ADC_bfPWM16_Mask    ; Disable interrupts
                                        (0248)    M8C_DisableIntMask ADC_bfCounter_INT_REG, ADC_bfCounter_Mask
094C: 18       POP   A                  (0249)    pop  A
                                        (0250)    RAM_EPILOGUE RAM_USE_CLASS_1
094D: 7F       RET                      (0251)    ret
094E: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0252) .ENDSECTION
                                        (0253) 
                                        (0254) .SECTION
                                        (0255) ;-----------------------------------------------------------------------------
                                        (0256) ;  FUNCTION NAME: ADC_fIsData
                                        (0257) ;  FUNCTION NAME: ADC_fIsDataAvailable
                                        (0258) ;
                                        (0259) ;  DESCRIPTION:
                                        (0260) ;  Returns the status of the A/D Data is set whenever a new data
                                        (0261) ;  value is available.
                                        (0262) ;
                                        (0263) ;-----------------------------------------------------------------------------
                                        (0264) ;
                                        (0265) ;  ARGUMENTS: None
                                        (0266) ;
                                        (0267) ;  RETURNS:
                                        (0268) ;  A  Returns data status  A == 0 no data available
                                        (0269) ;                          A != 0 data available
                                        (0270) ;
                                        (0271) ;  SIDE EFFECTS:
                                        (0272) ;    The A and X registers may be modified by this or future implementations
                                        (0273) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0274) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0275) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0276) ;    functions.
                                        (0277) ;          
                                        (0278) ;    Currently only the page pointer registers listed below are modified: 
                                        (0279) ;          CUR_PP
                                        (0280) ;
                                        (0281)  ADC_fIsData:
                                        (0282) _ADC_fIsData:
                                        (0283)  ADC_fIsDataAvailable:
                                        (0284) _ADC_fIsDataAvailable:
                                        (0285)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0286)    RAM_SETPAGE_CUR >ADC_bfStatus
0951: 51 06    MOV   A,[0x6]            (0287)    mov   A, [ADC_bfStatus]                            ; Get status byte
0953: 21 10    AND   A,0x10             (0288)    and   A, ADC_fDATA_READY                           ; Mask off other bits
                                        (0289)    RAM_EPILOGUE RAM_USE_CLASS_4
0955: 7F       RET                      (0290)    ret
0956: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0291) .ENDSECTION
                                        (0292) 
                                        (0293) .SECTION
                                        (0294) ;-----------------------------------------------------------------------------
                                        (0295) ;  FUNCTION NAME: ADC_iGetDataClearFlag
                                        (0296) ;  FUNCTION NAME: ADC_iGetData
                                        (0297) ;
                                        (0298) ;  DESCRIPTION:
                                        (0299) ;  Returns the data from the A/D.  Does not check if data is available.
                                        (0300) ;  iGetDataClearFlag clears the result ready flag as well.
                                        (0301) ;
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;
                                        (0304) ;  ARGUMENTS: None
                                        (0305) ;
                                        (0306) ;  RETURNS:
                                        (0307) ;  A:X  return the ADC result.
                                        (0308) ;
                                        (0309) ;  SIDE EFFECTS:
                                        (0310) ;    The A and X registers may be modified by this or future implementations
                                        (0311) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0312) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0313) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0314) ;    functions.
                                        (0315) ;          
                                        (0316) ;    Currently only the page pointer registers listed below are modified: 
                                        (0317) ;          CUR_PP
                                        (0318) ;
                                        (0319)  ADC_iGetDataClearFlag:
                                        (0320) _ADC_iGetDataClearFlag:   
                                        (0321)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0322)    RAM_SETPAGE_CUR >ADC_bfStatus
0959: 26 06 EF AND   [0x6],0xEF         (0323)    and   [ADC_bfStatus], ~ADC_fDATA_READY  ; Clear Data ready bit
095C: 58 04    MOV   X,[0x4]            (0324)    mov   X, [(ADC_iResult + HighByte)]
095E: 51 05    MOV   A,[0x5]            (0325)    mov   A, [(ADC_iResult + LowByte)]
                                        (0326)    RAM_EPILOGUE RAM_USE_CLASS_4
0960: 7F       RET                      (0327)    ret
0961: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0328) 
                                        (0329) 
                                        (0330)  ADC_iGetData:
                                        (0331) _ADC_iGetData:
                                        (0332)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0333)    RAM_SETPAGE_CUR >ADC_iResult
0964: 58 04    MOV   X,[0x4]            (0334)    mov   X, [(ADC_iResult + HighByte)]
0966: 51 05    MOV   A,[0x5]            (0335)    mov   A, [(ADC_iResult + LowByte)]
                                        (0336)    RAM_EPILOGUE RAM_USE_CLASS_4
0968: 7F       RET                      (0337)    ret
0969: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0338) .ENDSECTION
                                        (0339) 
                                        (0340) .SECTION
                                        (0341) ;-----------------------------------------------------------------------------
                                        (0342) ;  FUNCTION NAME: ADC_ClearFlag
                                        (0343) ;
                                        (0344) ;  DESCRIPTION:
                                        (0345) ;  Clears the data ready flag.
                                        (0346) ;
                                        (0347) ;-----------------------------------------------------------------------------
                                        (0348) ;
                                        (0349) ;  ARGUMENTS: None
                                        (0350) ;
                                        (0351) ;  RETURNS: NA
                                        (0352) ;
                                        (0353) ;  SIDE EFFECTS:
                                        (0354) ;    The A and X registers may be modified by this or future implementations
                                        (0355) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0356) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0357) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0358) ;    functions.
                                        (0359) ;          
                                        (0360) ;    Currently only the page pointer registers listed below are modified: 
                                        (0361) ;          CUR_PP
                                        (0362) ;
                                        (0363)  ADC_ClearFlag:
                                        (0364) _ADC_ClearFlag:
                                        (0365)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0366)    RAM_SETPAGE_CUR >ADC_bfStatus
096C: 26 06 EF AND   [0x6],0xEF         (0367)    and   [ADC_bfStatus], ~ADC_fDATA_READY  ; Clear Data ready bit
                                        (0368)    RAM_EPILOGUE RAM_USE_CLASS_4
096F: 7F       RET                      (0369)    ret
0970: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0370) .ENDSECTION
                                        (0371) 
                                        (0372) .SECTION
                                        (0373) ;-----------------------------------------------------------------------------
                                        (0374) ;  FUNCTION NAME: ADC_SetResolution
                                        (0375) ;
                                        (0376) ;  DESCRIPTION:
                                        (0377) ;  Sets A/D resolution between 7 and 13 bits.
                                        (0378) ;
                                        (0379) ;-----------------------------------------------------------------------------
                                        (0380) ;
                                        (0381) ;  ARGUMENTS:
                                        (0382) ;  A  Passes the number of bits of resolution, between 7 and 13.
                                        (0383) ;
                                        (0384) ;  RETURNS:  NA
                                        (0385) ;
                                        (0386) ;  SIDE EFFECTS:
                                        (0387) ;    The A and X registers may be modified by this or future implementations
                                        (0388) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0389) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0390) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0391) ;    functions.
                                        (0392) ;          
                                        (0393) ;    Currently only the page pointer registers listed below are modified: 
                                        (0394) ;          CUR_PP
                                        (0395) ;
                                        (0396) ;     This function halts the PWM and the counter to sync the A/D , but
                                        (0397) ;     does not re-enable the counter or PWM. To restart the A/D, "Get_Samples"
                                        (0398) ;     should be called.
                                        (0399) ;
                                        (0400)  ADC_SetResolution:
                                        (0401) _ADC_SetResolution:
                                        (0402)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0403)    RAM_SETPAGE_CUR >ADC_bfStatus
                                        (0404)    
0973: 41 82 FE AND   REG[0x82],0xFE     (0405)    and   reg[ADC_bfAtoDcr2], ~ADC_fRES_SET
                                        (0406) 
0976: 9F C1    CALL  _ADC_StopAD        (0407)    call  ADC_StopAD                                ; Stop the A/D if it is running
0978: 55 06 00 MOV   [0x6],0x0          (0408)    mov   [ADC_bfStatus], 00h                       ; and clear status and old resolution
                                        (0409) 
                                        (0410)                                                    ; Check for resolution to be within min and max values
097B: 39 07    CMP   A,0x7              (0411)    cmp   A,ADC_bMINRES                             ; Check low end of resolution
097D: D0 05    JNC   0x0983             (0412)    jnc   ADC_CHECKHI
097F: 50 07    MOV   A,0x7              (0413)    mov   A,ADC_bMINRES                             ; Too low - load legal low value
0981: 80 07    JMP   0x0989             (0414)    jmp   ADC_RES_OK
                                        (0415) 
                                        (0416) ADC_CHECKHI:                                       ; Check high end of resolution
0983: 39 0D    CMP   A,0xD              (0417)    cmp   A,ADC_bMAXRES
0985: C0 03    JC    0x0989             (0418)    jc    ADC_RES_OK
0987: 50 0D    MOV   A,0xD              (0419)    mov   A,ADC_bMAXRES                             ; Too high - load legal Max value
                                        (0420) 
                                        (0421) ADC_RES_OK:
                                        (0422)                                                    ; Calculate compare value for the PWM which
                                        (0423)                                                    ; computes the integrate time
0989: 11 07    SUB   A,0x7              (0424)    sub   A, ADC_bMINRES                            ; Normalize with min resolution
098B: 2C 06    OR    [0x6],A            (0425)    or    [ADC_bfStatus], A
                                        (0426)                                                    ; Since min resolution is 7, 2^^7 = 128, the clock
                                        (0427)                                                    ; is running 4x so 128*4=512 or 0x0200
098D: 01 01    ADD   A,0x1              (0428)    add   A,01h                                     ; The MSB is 02h.
098F: 5C       MOV   X,A                (0429)    mov   X,A
0990: 50 01    MOV   A,0x1              (0430)    mov   A,01h
                                        (0431) 
                                        (0432) ADC_CALC_INTTIME:                                  ; Now shift the MSB left for every bit of resolution of min (7).
0992: 64       ASL   A                  (0433)    asl   A
0993: 79       DEC   X                  (0434)    dec   X
0994: BF FD    JNZ   0x0992             (0435)    jnz   ADC_CALC_INTTIME
                                        (0436) 
                                        (0437) ADC_LOAD_INTTIME:                                  ; Load compare value and Calc time into registers
                                        (0438)                                                    ; Since minimum resolution is 7 bits, this value will always start at 0
0996: 62 26 00 MOV   REG[0x26],0x0      (0439)    mov   reg[ADC_bPWM_IntTime_LSB], 00h
0999: 60 2A    MOV   REG[0x2A],A        (0440)    mov   reg[ADC_bPWM_IntTime_MSB], A
                                        (0441) 
                                        (0442)                                                    ; Load the CalcTime into the PWM Period
099B: 62 25 0A MOV   REG[0x25],0xA      (0443)    mov   reg[ADC_bPWM_Period_LSB], <wCalcTime
099E: 01 00    ADD   A,0x0              (0444)    add   A, >wCalcTime
09A0: 60 29    MOV   REG[0x29],A        (0445)    mov   reg[ADC_bPWM_Period_MSB],A
                                        (0446)    RAM_EPILOGUE RAM_USE_CLASS_4
09A2: 7F       RET                      (0447)    ret
                                        (0448) .ENDSECTION
                                        (0449) ; End of File ADC.asm
FILE: C:\Users\student\DOCUME~1\PSOCDE~1.4PR\CE5428~1.ARC\CE5428~2\CE54287\CE54287\main.c
(0001) 
(0002) #include <m8c.h>        // part specific constants and macros
(0003) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0004) #include "stdlib.h"		// Add this header to use the ftoa function
(0005) #include "stdio.h"
(0006) #include "math.h"
(0007) 
(0008) #define N_WORDS 16
(0009) #define LEN_L 16
(0010) #define y 150
(0011) #define z 150
(0012) // #define N_WORDS 8
(0013) 
(0014) 
(0015) 
(0016) int iData;				// Variable that stores the ADC result
(0017) float fVolts;			// Variable that stores the converted voltage value
(0018) float fScaleFactor;		// Variable that stores the volts/count scale factor
(0019) char *pResult;			// Pointer used to store the result returned by ftoa function
(0020) int iStatus;			// Status variable for the ftoa function
(0021) int light_reading;
(0022) char buffer[17];
(0023) 
(0024) // global parameters
(0025) int MIN_LIGHT_READING = 0;
(0026) int MAX_LIGHT_READING = 800;
(0027) BYTE N_LIGHT_BINS = 8;
(0028) int x_isr = 0;
(0029) //BYTE N_WORDS = 8;
(0030) //int MIN_TEMP_READING = -20;
(0031) //int MAX_TEMP_READING = 100;
(0032) // BYTE N_TEMP_BINS = 8;
(0033) // BYTE LEN_L = 8;
(0034) BYTE len_M = 32;
(0035) BYTE my_vocab_index = 0;
(0036) 
(0037) typedef struct Embedding {
(0038) 	BYTE light_bin;		// 1 byte
(0039) 	//BYTE temp_bin;	// 1 byte
(0040) 	BYTE word;			// 1 byte
(0041) 	BYTE freq;			// 1 byte
(0042) } embedding;
(0043) embedding my_vocab[LEN_L];
(0044) BYTE i;
(0045) 
(0046) 
(0047) // function protype definitions
(0048) void WaitMs(int);
(0049) void init_my_word_map(BYTE *);
(0050) BYTE get_light_bin(int);
(0051) // BYTE get_temp_bin(int);
(0052) BYTE get_word(BYTE, BYTE);
(0053) void insert_vocab(embedding *,  BYTE *, BYTE, BYTE, BYTE);
(0054) void reorder(void );
(0055) 
(0056) 
(0057) void WaitMs(int ms) { 
__UserModules_end|_WaitMs|__text_start|_WaitMs:
  i                    --> X+2
  j                    --> X+0
  ms                   --> X-5
    09A3: 10       PUSH  X
    09A4: 4F       MOV   X,SP
    09A5: 38 04    ADD   SP,0x4
(0058) //	ms delay at 3MHz clock
(0059) 	int i, j;
(0060) 	for(i = 0; i < ms; i++)
    09A7: 56 03 00 MOV   [X+3],0x0
    09AA: 56 02 00 MOV   [X+2],0x0
    09AD: 80 1D    JMP   0x09CB
(0061) 		for(j = 0; j < 120; j++);
    09AF: 56 01 00 MOV   [X+1],0x0
    09B2: 56 00 00 MOV   [X+0],0x0
    09B5: 77 01    INC   [X+1]
    09B7: 0F 00 00 ADC   [X+0],0x0
    09BA: 52 01    MOV   A,[X+1]
    09BC: 11 78    SUB   A,0x78
    09BE: 52 00    MOV   A,[X+0]
    09C0: 31 80    XOR   A,0x80
    09C2: 19 80    SBB   A,0x80
    09C4: CF F0    JC    0x09B5
    09C6: 77 03    INC   [X+3]
    09C8: 0F 02 00 ADC   [X+2],0x0
    09CB: 52 03    MOV   A,[X+3]
    09CD: 13 FC    SUB   A,[X-4]
    09CF: 52 FB    MOV   A,[X-5]
    09D1: 31 80    XOR   A,0x80
    09D3: 62 D0 00 MOV   REG[0xD0],0x0
    09D6: 53 64    MOV   [__rX],A
    09D8: 52 02    MOV   A,[X+2]
    09DA: 31 80    XOR   A,0x80
    09DC: 1A 64    SBB   A,[__rX]
    09DE: CF D0    JC    0x09AF
    09E0: 38 FC    ADD   SP,0xFC
    09E2: 20       POP   X
    09E3: 7F       RET   
(0062) }
(0063) 
(0064) void init_my_word_map(BYTE *my_word_map) {
_init_my_word_map:
  i                    --> X+0
  my_word_map          --> X-5
    09E4: 10       PUSH  X
    09E5: 4F       MOV   X,SP
    09E6: 38 01    ADD   SP,0x1
(0065) 	BYTE i;
(0066) 	// N_WORDS = 16;
(0067) 	for (i = 0; i < N_WORDS; i++) my_word_map[i] = LEN_L;		// initializing to default index
    09E8: 56 00 00 MOV   [X+0],0x0
    09EB: 80 1D    JMP   0x0A09
    09ED: 62 D0 00 MOV   REG[0xD0],0x0
    09F0: 52 00    MOV   A,[X+0]
    09F2: 53 6F    MOV   [__r1],A
    09F4: 55 70 00 MOV   [__r0],0x0
    09F7: 52 FC    MOV   A,[X-4]
    09F9: 04 6F    ADD   [__r1],A
    09FB: 52 FB    MOV   A,[X-5]
    09FD: 0C 70    ADC   [__r0],A
    09FF: 51 70    MOV   A,[__r0]
    0A01: 60 D5    MOV   REG[0xD5],A
    0A03: 50 10    MOV   A,0x10
    0A05: 3F 6F    MVI   [__r1],A
    0A07: 77 00    INC   [X+0]
    0A09: 3D 00 10 CMP   [X+0],0x10
    0A0C: CF E0    JC    0x09ED
    0A0E: 38 FF    ADD   SP,0xFF
    0A10: 20       POP   X
    0A11: 7F       RET   
(0068) }
(0069) 
(0070) BYTE get_light_bin(int light_reading) {
_get_light_bin:
  bin                  --> X+4
  step_size            --> X+0
  light_reading        --> X-5
    0A12: 10       PUSH  X
    0A13: 4F       MOV   X,SP
    0A14: 38 07    ADD   SP,0x7
(0071) // @param: light_reading: current light reading
(0072) 	float step_size = (MAX_LIGHT_READING - MIN_LIGHT_READING) / N_LIGHT_BINS;
    0A16: 62 D0 00 MOV   REG[0xD0],0x0
    0A19: 51 8B    MOV   A,[N_LIGHT_BINS]
    0A1B: 62 D0 00 MOV   REG[0xD0],0x0
    0A1E: 53 6F    MOV   [__r1],A
    0A20: 62 D0 00 MOV   REG[0xD0],0x0
    0A23: 51 80    MOV   A,[MAX_LIGHT_READING+1]
    0A25: 62 D0 00 MOV   REG[0xD0],0x0
    0A28: 12 82    SUB   A,[MIN_LIGHT_READING+1]
    0A2A: 62 D0 00 MOV   REG[0xD0],0x0
    0A2D: 53 6D    MOV   [__r3],A
    0A2F: 62 D0 00 MOV   REG[0xD0],0x0
    0A32: 51 7F    MOV   A,[MAX_LIGHT_READING]
    0A34: 62 D0 00 MOV   REG[0xD0],0x0
    0A37: 1A 81    SBB   A,[MIN_LIGHT_READING]
    0A39: 62 D0 00 MOV   REG[0xD0],0x0
    0A3C: 53 6E    MOV   [__r2],A
    0A3E: 50 00    MOV   A,0x0
    0A40: 08       PUSH  A
    0A41: 51 6F    MOV   A,[__r1]
    0A43: 08       PUSH  A
    0A44: 51 6E    MOV   A,[__r2]
    0A46: 08       PUSH  A
    0A47: 51 6D    MOV   A,[__r3]
    0A49: 08       PUSH  A
    0A4A: 7C 12 0B LCALL 0x120B
    0A4D: 18       POP   A
    0A4E: 53 6F    MOV   [__r1],A
    0A50: 18       POP   A
    0A51: 53 70    MOV   [__r0],A
    0A53: 38 FE    ADD   SP,0xFE
    0A55: 51 6F    MOV   A,[__r1]
    0A57: 54 03    MOV   [X+3],A
    0A59: 51 70    MOV   A,[__r0]
    0A5B: 54 02    MOV   [X+2],A
    0A5D: 48 02 80 TST   [X+2],0x80
    0A60: A0 09    JZ    0x0A6A
    0A62: 56 01 FF MOV   [X+1],0xFF
    0A65: 56 00 FF MOV   [X+0],0xFF
    0A68: 80 07    JMP   0x0A70
    0A6A: 56 01 00 MOV   [X+1],0x0
    0A6D: 56 00 00 MOV   [X+0],0x0
    0A70: 52 00    MOV   A,[X+0]
    0A72: 08       PUSH  A
    0A73: 52 01    MOV   A,[X+1]
    0A75: 08       PUSH  A
    0A76: 52 02    MOV   A,[X+2]
    0A78: 08       PUSH  A
    0A79: 52 03    MOV   A,[X+3]
    0A7B: 08       PUSH  A
    0A7C: 62 D0 00 MOV   REG[0xD0],0x0
    0A7F: 7C 17 56 LCALL 0x1756
    0A82: 18       POP   A
    0A83: 54 03    MOV   [X+3],A
    0A85: 18       POP   A
    0A86: 54 02    MOV   [X+2],A
    0A88: 18       POP   A
    0A89: 54 01    MOV   [X+1],A
    0A8B: 18       POP   A
    0A8C: 54 00    MOV   [X+0],A
(0073) 	BYTE bin = (BYTE)ceil((light_reading - MIN_LIGHT_READING)/ step_size);
    0A8E: 62 D0 00 MOV   REG[0xD0],0x0
FILE: C:\Users\student\DOCUME~1\PSOCDE~1.4PR\CE5428~1.ARC\CE5428~2\CE54287\CE54287\main.c
(0074) 	return bin;
    0BA7: 52 04    MOV   A,[X+4]
    0BA9: 38 F9    ADD   SP,0xF9
    0BAB: 20       POP   X
    0BAC: 7F       RET   
(0075) }
(0076) 
(0077) BYTE get_word(BYTE light_bin, BYTE temp_bin) {
_get_word:
  temp_bin             --> X-5
  light_bin            --> X-4
    0BAD: 10       PUSH  X
    0BAE: 4F       MOV   X,SP
(0078) 	// @param:  light_bin, temp_bin: light & temperature bins
(0079) 	// returns encoded light and temperature bins using a hash function
(0080) 	// return 1 + (light_bin - 1) * KEY + (temp_bin - 1);
(0081)     return light_bin;
    0BAF: 52 FC    MOV   A,[X-4]
    0BB1: 62 D0 00 MOV   REG[0xD0],0x0
    0BB4: 20       POP   X
    0BB5: 7F       RET   
(0082) }
(0083) 
(0084) void insert_vocab(embedding *vocab, BYTE *my_word_map, BYTE light_bin, BYTE temp_bin, BYTE word) {
_insert_vocab:
  index                --> X+0
  word                 --> X-10
  temp_bin             --> X-9
  light_bin            --> X-8
  my_word_map          --> X-7
  vocab                --> X-5
    0BB6: 10       PUSH  X
    0BB7: 4F       MOV   X,SP
    0BB8: 38 01    ADD   SP,0x1
(0085) 	// if (my_vocab_index == SIZE(vocab))
(0086) 	// !!!!!
(0087) 	BYTE index = my_word_map[word - 1];		// word is 1 ... N_WORDS
    0BBA: 62 D0 00 MOV   REG[0xD0],0x0
    0BBD: 52 F6    MOV   A,[X-10]
    0BBF: 53 6F    MOV   [__r1],A
    0BC1: 55 70 00 MOV   [__r0],0x0
    0BC4: 16 6F 01 SUB   [__r1],0x1
    0BC7: 1E 70 00 SBB   [__r0],0x0
    0BCA: 52 FA    MOV   A,[X-6]
    0BCC: 04 6F    ADD   [__r1],A
    0BCE: 52 F9    MOV   A,[X-7]
    0BD0: 0C 70    ADC   [__r0],A
    0BD2: 51 70    MOV   A,[__r0]
    0BD4: 60 D4    MOV   REG[0xD4],A
    0BD6: 3E 6F    MVI   A,[__r1]
    0BD8: 54 00    MOV   [X+0],A
(0088) 	if (index == LEN_L) {
    0BDA: 3D 00 10 CMP   [X+0],0x10
    0BDD: B0 D0    JNZ   0x0CAE
(0089) 		// insert
(0090) 		vocab[my_vocab_index].light_bin = light_bin;
    0BDF: 62 D0 00 MOV   REG[0xD0],0x0
    0BE2: 51 89    MOV   A,[my_vocab_index]
    0BE4: 62 D0 00 MOV   REG[0xD0],0x0
    0BE7: 53 6F    MOV   [__r1],A
    0BE9: 50 00    MOV   A,0x0
    0BEB: 08       PUSH  A
    0BEC: 51 6F    MOV   A,[__r1]
    0BEE: 08       PUSH  A
    0BEF: 50 00    MOV   A,0x0
    0BF1: 08       PUSH  A
    0BF2: 50 03    MOV   A,0x3
    0BF4: 08       PUSH  A
    0BF5: 7C 17 C1 LCALL 0x17C1
    0BF8: 38 FC    ADD   SP,0xFC
    0BFA: 51 64    MOV   A,[__rX]
    0BFC: 53 6F    MOV   [__r1],A
    0BFE: 51 63    MOV   A,[__rY]
    0C00: 53 70    MOV   [__r0],A
    0C02: 52 FC    MOV   A,[X-4]
    0C04: 04 6F    ADD   [__r1],A
    0C06: 52 FB    MOV   A,[X-5]
    0C08: 0C 70    ADC   [__r0],A
    0C0A: 51 70    MOV   A,[__r0]
    0C0C: 60 D5    MOV   REG[0xD5],A
    0C0E: 52 F8    MOV   A,[X-8]
    0C10: 3F 6F    MVI   [__r1],A
(0091) 		// vocab[my_vocab_index].temp_bin = temp_bin;
(0092) 		vocab[my_vocab_index].word = word;
    0C12: 62 D0 00 MOV   REG[0xD0],0x0
    0C15: 51 89    MOV   A,[my_vocab_index]
    0C17: 62 D0 00 MOV   REG[0xD0],0x0
    0C1A: 53 6F    MOV   [__r1],A
    0C1C: 50 00    MOV   A,0x0
    0C1E: 08       PUSH  A
    0C1F: 51 6F    MOV   A,[__r1]
    0C21: 08       PUSH  A
    0C22: 50 00    MOV   A,0x0
    0C24: 08       PUSH  A
    0C25: 50 03    MOV   A,0x3
    0C27: 08       PUSH  A
    0C28: 7C 17 C1 LCALL 0x17C1
    0C2B: 38 FC    ADD   SP,0xFC
    0C2D: 51 64    MOV   A,[__rX]
    0C2F: 53 6F    MOV   [__r1],A
    0C31: 51 63    MOV   A,[__rY]
    0C33: 53 70    MOV   [__r0],A
    0C35: 52 FC    MOV   A,[X-4]
    0C37: 04 6F    ADD   [__r1],A
    0C39: 52 FB    MOV   A,[X-5]
    0C3B: 0C 70    ADC   [__r0],A
    0C3D: 06 6F 01 ADD   [__r1],0x1
    0C40: 0E 70 00 ADC   [__r0],0x0
    0C43: 51 70    MOV   A,[__r0]
    0C45: 60 D5    MOV   REG[0xD5],A
    0C47: 52 F6    MOV   A,[X-10]
    0C49: 3F 6F    MVI   [__r1],A
(0093) 		vocab[my_vocab_index].freq = 1;
    0C4B: 62 D0 00 MOV   REG[0xD0],0x0
    0C4E: 51 89    MOV   A,[my_vocab_index]
    0C50: 62 D0 00 MOV   REG[0xD0],0x0
    0C53: 53 6F    MOV   [__r1],A
    0C55: 50 00    MOV   A,0x0
    0C57: 08       PUSH  A
    0C58: 51 6F    MOV   A,[__r1]
    0C5A: 08       PUSH  A
    0C5B: 50 00    MOV   A,0x0
    0C5D: 08       PUSH  A
    0C5E: 50 03    MOV   A,0x3
    0C60: 08       PUSH  A
    0C61: 7C 17 C1 LCALL 0x17C1
    0C64: 38 FC    ADD   SP,0xFC
    0C66: 51 64    MOV   A,[__rX]
    0C68: 53 6F    MOV   [__r1],A
    0C6A: 51 63    MOV   A,[__rY]
    0C6C: 53 70    MOV   [__r0],A
    0C6E: 52 FC    MOV   A,[X-4]
    0C70: 04 6F    ADD   [__r1],A
    0C72: 52 FB    MOV   A,[X-5]
    0C74: 0C 70    ADC   [__r0],A
    0C76: 06 6F 02 ADD   [__r1],0x2
    0C79: 0E 70 00 ADC   [__r0],0x0
    0C7C: 51 70    MOV   A,[__r0]
    0C7E: 60 D5    MOV   REG[0xD5],A
    0C80: 50 01    MOV   A,0x1
    0C82: 3F 6F    MVI   [__r1],A
(0094) 		my_word_map[word - 1] = my_vocab_index;
    0C84: 52 F6    MOV   A,[X-10]
    0C86: 53 6F    MOV   [__r1],A
    0C88: 55 70 00 MOV   [__r0],0x0
    0C8B: 16 6F 01 SUB   [__r1],0x1
    0C8E: 1E 70 00 SBB   [__r0],0x0
    0C91: 52 FA    MOV   A,[X-6]
    0C93: 04 6F    ADD   [__r1],A
    0C95: 52 F9    MOV   A,[X-7]
    0C97: 0C 70    ADC   [__r0],A
    0C99: 51 70    MOV   A,[__r0]
    0C9B: 60 D5    MOV   REG[0xD5],A
    0C9D: 62 D0 00 MOV   REG[0xD0],0x0
    0CA0: 51 89    MOV   A,[my_vocab_index]
    0CA2: 62 D0 00 MOV   REG[0xD0],0x0
    0CA5: 3F 6F    MVI   [__r1],A
(0095) 		my_vocab_index++;	// move to the next index
    0CA7: 62 D0 00 MOV   REG[0xD0],0x0
    0CAA: 76 89    INC   [my_vocab_index]
(0096) 	}
    0CAC: 80 44    JMP   0x0CF1
(0097) 	else {
(0098) 		vocab[index].freq++;
    0CAE: 62 D0 00 MOV   REG[0xD0],0x0
    0CB1: 52 00    MOV   A,[X+0]
    0CB3: 53 6F    MOV   [__r1],A
    0CB5: 50 00    MOV   A,0x0
    0CB7: 08       PUSH  A
    0CB8: 51 6F    MOV   A,[__r1]
    0CBA: 08       PUSH  A
    0CBB: 50 00    MOV   A,0x0
    0CBD: 08       PUSH  A
    0CBE: 50 03    MOV   A,0x3
    0CC0: 08       PUSH  A
    0CC1: 7C 17 C1 LCALL 0x17C1
    0CC4: 38 FC    ADD   SP,0xFC
    0CC6: 51 64    MOV   A,[__rX]
    0CC8: 53 6F    MOV   [__r1],A
    0CCA: 51 63    MOV   A,[__rY]
    0CCC: 53 70    MOV   [__r0],A
    0CCE: 52 FC    MOV   A,[X-4]
    0CD0: 04 6F    ADD   [__r1],A
    0CD2: 52 FB    MOV   A,[X-5]
    0CD4: 0C 70    ADC   [__r0],A
    0CD6: 06 6F 02 ADD   [__r1],0x2
    0CD9: 0E 70 00 ADC   [__r0],0x0
    0CDC: 51 70    MOV   A,[__r0]
    0CDE: 60 D4    MOV   REG[0xD4],A
    0CE0: 3E 6F    MVI   A,[__r1]
    0CE2: 7A 6F    DEC   [__r1]
    0CE4: 53 6E    MOV   [__r2],A
    0CE6: 06 6E 01 ADD   [__r2],0x1
    0CE9: 51 70    MOV   A,[__r0]
    0CEB: 60 D5    MOV   REG[0xD5],A
    0CED: 51 6E    MOV   A,[__r2]
    0CEF: 3F 6F    MVI   [__r1],A
(0099) 	}
    0CF1: 38 FF    ADD   SP,0xFF
    0CF3: 20       POP   X
    0CF4: 7F       RET   
(0100) }
(0101) void reorder(void ) {
_reorder:
  temp                 --> X+3
  i                    --> X+2
  key                  --> X+1
  j                    --> X+0
    0CF5: 10       PUSH  X
    0CF6: 4F       MOV   X,SP
    0CF7: 38 06    ADD   SP,0x6
(0102) 	CHAR i, j;
(0103) 	BYTE key;
(0104) 	embedding temp;
(0105) 	j = 0;
    0CF9: 56 00 00 MOV   [X+0],0x0
(0106)     for ( i = 1; i < my_vocab_index; i++) {
    0CFC: 56 02 01 MOV   [X+2],0x1
    0CFF: 81 79    JMP   0x0E79
(0107) 		temp = my_vocab[i];
    0D01: 62 D0 00 MOV   REG[0xD0],0x0
    0D04: 52 02    MOV   A,[X+2]
    0D06: 53 6F    MOV   [__r1],A
    0D08: 55 70 00 MOV   [__r0],0x0
    0D0B: 47 6F 80 TST   [__r1],0x80
    0D0E: A0 04    JZ    0x0D13
    0D10: 55 70 FF MOV   [__r0],0xFF
    0D13: 62 D0 00 MOV   REG[0xD0],0x0
    0D16: 51 70    MOV   A,[__r0]
    0D18: 08       PUSH  A
    0D19: 51 6F    MOV   A,[__r1]
    0D1B: 08       PUSH  A
    0D1C: 50 00    MOV   A,0x0
    0D1E: 08       PUSH  A
    0D1F: 50 03    MOV   A,0x3
    0D21: 08       PUSH  A
    0D22: 7C 17 C1 LCALL 0x17C1
    0D25: 38 FC    ADD   SP,0xFC
    0D27: 51 64    MOV   A,[__rX]
    0D29: 53 6F    MOV   [__r1],A
    0D2B: 51 63    MOV   A,[__rY]
    0D2D: 53 70    MOV   [__r0],A
    0D2F: 06 6F 08 ADD   [__r1],0x8
    0D32: 0E 70 00 ADC   [__r0],0x0
    0D35: 5A 6D    MOV   [__r3],X
    0D37: 06 6D 03 ADD   [__r3],0x3
    0D3A: 51 70    MOV   A,[__r0]
    0D3C: 60 D4    MOV   REG[0xD4],A
    0D3E: 62 D5 07 MOV   REG[0xD5],0x7
    0D41: 3E 6F    MVI   A,[__r1]
    0D43: 3F 6D    MVI   [__r3],A
    0D45: 3E 6F    MVI   A,[__r1]
    0D47: 3F 6D    MVI   [__r3],A
    0D49: 3E 6F    MVI   A,[__r1]
    0D4B: 3F 6D    MVI   [__r3],A
(0108) 		key = my_vocab[i].freq;
    0D4D: 52 02    MOV   A,[X+2]
    0D4F: 53 6F    MOV   [__r1],A
    0D51: 55 70 00 MOV   [__r0],0x0
    0D54: 47 6F 80 TST   [__r1],0x80
    0D57: A0 04    JZ    0x0D5C
    0D59: 55 70 FF MOV   [__r0],0xFF
    0D5C: 62 D0 00 MOV   REG[0xD0],0x0
    0D5F: 51 70    MOV   A,[__r0]
    0D61: 08       PUSH  A
    0D62: 51 6F    MOV   A,[__r1]
    0D64: 08       PUSH  A
    0D65: 50 00    MOV   A,0x0
    0D67: 08       PUSH  A
    0D68: 50 03    MOV   A,0x3
    0D6A: 08       PUSH  A
    0D6B: 7C 17 C1 LCALL 0x17C1
    0D6E: 38 FC    ADD   SP,0xFC
    0D70: 51 64    MOV   A,[__rX]
    0D72: 53 6F    MOV   [__r1],A
    0D74: 51 63    MOV   A,[__rY]
    0D76: 53 70    MOV   [__r0],A
    0D78: 06 6F 0A ADD   [__r1],0xA
    0D7B: 0E 70 00 ADC   [__r0],0x0
    0D7E: 51 70    MOV   A,[__r0]
    0D80: 60 D4    MOV   REG[0xD4],A
    0D82: 3E 6F    MVI   A,[__r1]
    0D84: 54 01    MOV   [X+1],A
(0109)         //printf("%d\t%d\n", i, key);
(0110)         j = i - 1;
    0D86: 52 02    MOV   A,[X+2]
    0D88: 11 01    SUB   A,0x1
    0D8A: 54 00    MOV   [X+0],A
    0D8C: 80 53    JMP   0x0DE0
(0111) 		
(0112) 
(0113)         while (j >= 0 && my_vocab[j].freq > key) {
(0114)             my_vocab[j + 1] = my_vocab[j];
    0D8E: 62 D0 00 MOV   REG[0xD0],0x0
    0D91: 52 00    MOV   A,[X+0]
    0D93: 53 6F    MOV   [__r1],A
    0D95: 55 70 00 MOV   [__r0],0x0
    0D98: 47 6F 80 TST   [__r1],0x80
    0D9B: A0 04    JZ    0x0DA0
    0D9D: 55 70 FF MOV   [__r0],0xFF
    0DA0: 62 D0 00 MOV   REG[0xD0],0x0
    0DA3: 51 70    MOV   A,[__r0]
    0DA5: 08       PUSH  A
    0DA6: 51 6F    MOV   A,[__r1]
    0DA8: 08       PUSH  A
    0DA9: 50 00    MOV   A,0x0
    0DAB: 08       PUSH  A
    0DAC: 50 03    MOV   A,0x3
    0DAE: 08       PUSH  A
    0DAF: 7C 17 C1 LCALL 0x17C1
    0DB2: 38 FC    ADD   SP,0xFC
    0DB4: 51 64    MOV   A,[__rX]
    0DB6: 53 6F    MOV   [__r1],A
    0DB8: 51 63    MOV   A,[__rY]
    0DBA: 53 70    MOV   [__r0],A
    0DBC: 51 6F    MOV   A,[__r1]
    0DBE: 01 08    ADD   A,0x8
    0DC0: 53 6D    MOV   [__r3],A
    0DC2: 51 70    MOV   A,[__r0]
    0DC4: 09 00    ADC   A,0x0
    0DC6: 06 6F 0B ADD   [__r1],0xB
    0DC9: 0E 70 00 ADC   [__r0],0x0
    0DCC: 60 D4    MOV   REG[0xD4],A
    0DCE: 51 70    MOV   A,[__r0]
    0DD0: 60 D5    MOV   REG[0xD5],A
    0DD2: 3E 6D    MVI   A,[__r3]
    0DD4: 3F 6F    MVI   [__r1],A
    0DD6: 3E 6D    MVI   A,[__r3]
    0DD8: 3F 6F    MVI   [__r1],A
    0DDA: 3E 6D    MVI   A,[__r3]
    0DDC: 3F 6F    MVI   [__r1],A
(0115)             j--;
    0DDE: 7B 00    DEC   [X+0]
(0116)         }
    0DE0: 48 00 80 TST   [X+0],0x80
    0DE3: B0 43    JNZ   0x0E27
    0DE5: 62 D0 00 MOV   REG[0xD0],0x0
    0DE8: 52 00    MOV   A,[X+0]
    0DEA: 53 6F    MOV   [__r1],A
    0DEC: 55 70 00 MOV   [__r0],0x0
    0DEF: 47 6F 80 TST   [__r1],0x80
    0DF2: A0 04    JZ    0x0DF7
    0DF4: 55 70 FF MOV   [__r0],0xFF
    0DF7: 62 D0 00 MOV   REG[0xD0],0x0
    0DFA: 51 70    MOV   A,[__r0]
    0DFC: 08       PUSH  A
    0DFD: 51 6F    MOV   A,[__r1]
    0DFF: 08       PUSH  A
    0E00: 50 00    MOV   A,0x0
    0E02: 08       PUSH  A
    0E03: 50 03    MOV   A,0x3
    0E05: 08       PUSH  A
    0E06: 7C 17 C1 LCALL 0x17C1
    0E09: 38 FC    ADD   SP,0xFC
    0E0B: 51 64    MOV   A,[__rX]
    0E0D: 53 6F    MOV   [__r1],A
    0E0F: 51 63    MOV   A,[__rY]
    0E11: 53 70    MOV   [__r0],A
    0E13: 06 6F 0A ADD   [__r1],0xA
    0E16: 0E 70 00 ADC   [__r0],0x0
    0E19: 51 70    MOV   A,[__r0]
    0E1B: 60 D4    MOV   REG[0xD4],A
    0E1D: 3E 6F    MVI   A,[__r1]
    0E1F: 53 70    MOV   [__r0],A
    0E21: 52 01    MOV   A,[X+1]
    0E23: 3A 70    CMP   A,[__r0]
    0E25: CF 68    JC    0x0D8E
(0117)         my_vocab[j + 1] = temp;
    0E27: 62 D0 00 MOV   REG[0xD0],0x0
    0E2A: 55 70 07 MOV   [__r0],0x7
    0E2D: 5A 6F    MOV   [__r1],X
    0E2F: 06 6F 03 ADD   [__r1],0x3
    0E32: 52 00    MOV   A,[X+0]
    0E34: 53 6D    MOV   [__r3],A
    0E36: 55 6E 00 MOV   [__r2],0x0
    0E39: 47 6D 80 TST   [__r3],0x80
    0E3C: A0 04    JZ    0x0E41
    0E3E: 55 6E FF MOV   [__r2],0xFF
    0E41: 62 D0 00 MOV   REG[0xD0],0x0
    0E44: 51 6E    MOV   A,[__r2]
    0E46: 08       PUSH  A
    0E47: 51 6D    MOV   A,[__r3]
    0E49: 08       PUSH  A
    0E4A: 50 00    MOV   A,0x0
    0E4C: 08       PUSH  A
    0E4D: 50 03    MOV   A,0x3
    0E4F: 08       PUSH  A
    0E50: 7C 17 C1 LCALL 0x17C1
    0E53: 38 FC    ADD   SP,0xFC
    0E55: 51 64    MOV   A,[__rX]
    0E57: 53 6D    MOV   [__r3],A
    0E59: 51 63    MOV   A,[__rY]
    0E5B: 53 6E    MOV   [__r2],A
    0E5D: 06 6D 0B ADD   [__r3],0xB
    0E60: 0E 6E 00 ADC   [__r2],0x0
    0E63: 51 70    MOV   A,[__r0]
    0E65: 60 D4    MOV   REG[0xD4],A
    0E67: 51 6E    MOV   A,[__r2]
    0E69: 60 D5    MOV   REG[0xD5],A
    0E6B: 3E 6F    MVI   A,[__r1]
    0E6D: 3F 6D    MVI   [__r3],A
    0E6F: 3E 6F    MVI   A,[__r1]
    0E71: 3F 6D    MVI   [__r3],A
    0E73: 3E 6F    MVI   A,[__r1]
    0E75: 3F 6D    MVI   [__r3],A
(0118)     }
    0E77: 77 02    INC   [X+2]
    0E79: 62 D0 00 MOV   REG[0xD0],0x0
    0E7C: 51 89    MOV   A,[my_vocab_index]
    0E7E: 62 D0 00 MOV   REG[0xD0],0x0
    0E81: 53 6F    MOV   [__r1],A
    0E83: 55 70 00 MOV   [__r0],0x0
    0E86: 52 02    MOV   A,[X+2]
    0E88: 53 6D    MOV   [__r3],A
    0E8A: 55 6E 00 MOV   [__r2],0x0
    0E8D: 47 6D 80 TST   [__r3],0x80
    0E90: A0 04    JZ    0x0E95
    0E92: 55 6E FF MOV   [__r2],0xFF
    0E95: 62 D0 00 MOV   REG[0xD0],0x0
    0E98: 51 6D    MOV   A,[__r3]
    0E9A: 12 6F    SUB   A,[__r1]
    0E9C: 51 70    MOV   A,[__r0]
    0E9E: 31 80    XOR   A,0x80
    0EA0: 53 64    MOV   [__rX],A
    0EA2: 51 6E    MOV   A,[__r2]
    0EA4: 31 80    XOR   A,0x80
    0EA6: 1A 64    SBB   A,[__rX]
    0EA8: CE 58    JC    0x0D01
    0EAA: 38 FA    ADD   SP,0xFA
    0EAC: 20       POP   X
    0EAD: 7F       RET   
(0119) }
(0120) #pragma interrupt_handler Timer_ISR
(0121) /* Timer ISR in C where timer
(0122) interrupts are processed */
(0123) void Timer_ISR(void)
(0124) {
_Timer_ISR:
    0EAE: 71 C0    OR    F,0xC0
    0EB0: 08       PUSH  A
    0EB1: 5D D0    MOV   A,REG[0xD0]
    0EB3: 08       PUSH  A
    0EB4: 5D D3    MOV   A,REG[0xD3]
    0EB6: 08       PUSH  A
    0EB7: 5D D4    MOV   A,REG[0xD4]
    0EB9: 08       PUSH  A
    0EBA: 5D D5    MOV   A,REG[0xD5]
    0EBC: 08       PUSH  A
    0EBD: 62 D0 00 MOV   REG[0xD0],0x0
    0EC0: 51 70    MOV   A,[__r0]
    0EC2: 08       PUSH  A
    0EC3: 51 6F    MOV   A,[__r1]
    0EC5: 08       PUSH  A
    0EC6: 51 6E    MOV   A,[__r2]
    0EC8: 08       PUSH  A
    0EC9: 51 6D    MOV   A,[__r3]
    0ECB: 08       PUSH  A
    0ECC: 51 6C    MOV   A,[__r4]
    0ECE: 08       PUSH  A
    0ECF: 51 6B    MOV   A,[__r5]
    0ED1: 08       PUSH  A
    0ED2: 51 6A    MOV   A,[__r6]
    0ED4: 08       PUSH  A
    0ED5: 51 69    MOV   A,[__r7]
    0ED7: 08       PUSH  A
    0ED8: 51 68    MOV   A,[__r8]
    0EDA: 08       PUSH  A
    0EDB: 51 67    MOV   A,[__r9]
    0EDD: 08       PUSH  A
    0EDE: 51 66    MOV   A,[__r10]
    0EE0: 08       PUSH  A
    0EE1: 51 65    MOV   A,[__r11]
    0EE3: 08       PUSH  A
    0EE4: 51 64    MOV   A,[__rX]
    0EE6: 08       PUSH  A
    0EE7: 51 63    MOV   A,[__rY]
    0EE9: 08       PUSH  A
    0EEA: 51 62    MOV   A,[__rZ]
    0EEC: 08       PUSH  A
(0125) 
(0126) 	
(0127) 	
(0128) 	
(0129) 	reorder();
    0EED: 9E 06    CALL  _reorder
    0EEF: 62 D0 00 MOV   REG[0xD0],0x0
    0EF2: 18       POP   A
    0EF3: 53 62    MOV   [__rZ],A
    0EF5: 18       POP   A
    0EF6: 53 63    MOV   [__rY],A
    0EF8: 18       POP   A
    0EF9: 53 64    MOV   [__rX],A
    0EFB: 18       POP   A
    0EFC: 53 65    MOV   [__r11],A
    0EFE: 18       POP   A
    0EFF: 53 66    MOV   [__r10],A
    0F01: 18       POP   A
    0F02: 53 67    MOV   [__r9],A
    0F04: 18       POP   A
    0F05: 53 68    MOV   [__r8],A
    0F07: 18       POP   A
    0F08: 53 69    MOV   [__r7],A
    0F0A: 18       POP   A
    0F0B: 53 6A    MOV   [__r6],A
    0F0D: 18       POP   A
    0F0E: 53 6B    MOV   [__r5],A
    0F10: 18       POP   A
    0F11: 53 6C    MOV   [__r4],A
    0F13: 18       POP   A
    0F14: 53 6D    MOV   [__r3],A
    0F16: 18       POP   A
    0F17: 53 6E    MOV   [__r2],A
    0F19: 18       POP   A
    0F1A: 53 6F    MOV   [__r1],A
    0F1C: 18       POP   A
    0F1D: 53 70    MOV   [__r0],A
    0F1F: 18       POP   A
    0F20: 60 D5    MOV   REG[0xD5],A
    0F22: 18       POP   A
    0F23: 60 D4    MOV   REG[0xD4],A
    0F25: 18       POP   A
    0F26: 60 D3    MOV   REG[0xD3],A
    0F28: 18       POP   A
    0F29: 60 D0    MOV   REG[0xD0],A
    0F2B: 18       POP   A
    0F2C: 7E       RETI  
(0130) 	
(0131) 	
(0132) 
(0133) }
(0134) 
(0135) 
(0136) 
(0137) void main(void) {
_main:
  counter              --> X+18
  my_word_map          --> X+2
  light_bin            --> X+1
  word                 --> X+0
    0F2D: 10       PUSH  X
    0F2E: 4F       MOV   X,SP
    0F2F: 38 13    ADD   SP,0x13
(0138) 
(0139) /*#############################################################################*/
(0140)                  // table to store the current vocab for L seconds. N_WORDS = 16
(0141) 	//embedding sensed_vocab[16];       // table to store the sensed vocab for M seconds
(0142) 	BYTE my_word_map[N_WORDS];
(0143) 	BYTE light_bin;
(0144) 	BYTE counter;	// temp variable for counter
(0145) 	// BYTE temp_bin;
(0146) 	BYTE word;
(0147)     init_my_word_map(my_word_map);      // initialize the word-> index map to get index of word in my_vocab
    0F31: 62 D0 00 MOV   REG[0xD0],0x0
    0F34: 5A 6F    MOV   [__r1],X
    0F36: 06 6F 02 ADD   [__r1],0x2
    0F39: 50 07    MOV   A,0x7
    0F3B: 08       PUSH  A
    0F3C: 51 6F    MOV   A,[__r1]
    0F3E: 08       PUSH  A
    0F3F: 9A A3    CALL  _init_my_word_map
    0F41: 38 FE    ADD   SP,0xFE
(0148) /*#############################################################################*/
(0149) 
(0150)     PGA_Start(PGA_HIGHPOWER); 			// Start PGA with Highpower
    0F43: 10       PUSH  X
    0F44: 50 03    MOV   A,0x3
    0F46: 7C 06 70 LCALL PGA_Start|_PGA_SetPower|PGA_SetPower|_PGA_Start
(0151) 	LCD_Start();						// Start LCD
    0F49: 7C 07 C2 LCALL _LCD_Start|LCD_Init|_LCD_Init
    0F4C: 20       POP   X
(0152) 	//LCD_Position(0,0);				// Set LCD position to row 0 column 0
(0153) 	//LCD_PrCString("Light = ");		// Print string "MEASURED VOLTAGE" on LCD
(0154) 	M8C_EnableGInt; 					// Enable Global Interrupts
    0F4D: 71 01    OR    F,0x1
(0155) 	ADC_Start(ADC_HIGHPOWER); 			// Start ADC by powering SC block at High Power
    0F4F: 10       PUSH  X
    0F50: 50 03    MOV   A,0x3
    0F52: 7C 08 E4 LCALL _ADC_SetPower|_ADC_Start|ADC_Start|ADC_SetPower
(0156) 	ADC_GetSamples(0); 					// Have ADC run continuously
    0F55: 50 00    MOV   A,0x0
    0F57: 7C 09 08 LCALL _ADC_GetSamples
    0F5A: 20       POP   X
(0157) 	fScaleFactor = (float)5/(float)4096;// Calculate Scale Factor.
    0F5B: 62 D0 00 MOV   REG[0xD0],0x0
    0F5E: 55 75 3A MOV   [fScaleFactor],0x3A
    0F61: 55 76 A0 MOV   [fScaleFactor+1],0xA0
    0F64: 55 77 00 MOV   [fScaleFactor+2],0x0
    0F67: 55 78 00 MOV   [fScaleFactor+3],0x0
(0158) 	//for(counter = 0; counter < 15; counter++)								// Infinite loop
(0159) 	Timer32_1_Start();
    0F6A: 10       PUSH  X
    0F6B: 7C 05 78 LCALL _Timer32_1_Start
(0160) 	/* Enable Timer Interrupt. This
(0161) 	library function writes into
(0162) 	INT_MSK0 register */
(0163) 	Timer32_1_EnableInt();
    0F6E: 7C 05 70 LCALL _Timer32_1_EnableInt
    0F71: 20       POP   X
    0F72: 82 91    JMP   0x1204
(0164) 	//counter = 1;
(0165) 	while (1)
(0166) 	{
(0167) 		while(ADC_fIsDataAvailable() == 0); // Loop until value ready
    0F74: 10       PUSH  X
    0F75: 7C 09 4E LCALL ADC_fIsDataAvailable|ADC_fIsData|_ADC_fIsDataAvailable|_ADC_fIsData
    0F78: 20       POP   X
    0F79: 62 D0 00 MOV   REG[0xD0],0x0
    0F7C: 39 00    CMP   A,0x0
    0F7E: AF F5    JZ    0x0F74
(0168) 		iData=ADC_iGetData();				// Read ADC result
    0F80: 10       PUSH  X
    0F81: 7C 09 61 LCALL _ADC_iGetData
    0F84: 62 D0 00 MOV   REG[0xD0],0x0
    0F87: 5A 70    MOV   [__r0],X
    0F89: 20       POP   X
    0F8A: 08       PUSH  A
    0F8B: 51 70    MOV   A,[__r0]
    0F8D: 62 D0 00 MOV   REG[0xD0],0x0
    0F90: 53 79    MOV   [iData],A
    0F92: 18       POP   A
    0F93: 53 7A    MOV   [iData+1],A
(0169) 		ADC_ClearFlag(); 					// Clear ADC flag
    0F95: 10       PUSH  X
    0F96: 7C 09 69 LCALL _ADC_ClearFlag
    0F99: 20       POP   X
(0170) 		fVolts = fScaleFactor*(float)iData;	// Calculate voltage using ADC result and scale factor
    0F9A: 62 D0 00 MOV   REG[0xD0],0x0
    0F9D: 51 7A    MOV   A,[iData+1]
    0F9F: 62 D0 00 MOV   REG[0xD0],0x0
    0FA2: 53 6D    MOV   [__r3],A
    0FA4: 62 D0 00 MOV   REG[0xD0],0x0
    0FA7: 51 79    MOV   A,[iData]
    0FA9: 62 D0 00 MOV   REG[0xD0],0x0
    0FAC: 53 6E    MOV   [__r2],A
    0FAE: 47 6E 80 TST   [__r2],0x80
    0FB1: A0 09    JZ    0x0FBB
    0FB3: 55 6F FF MOV   [__r1],0xFF
    0FB6: 55 70 FF MOV   [__r0],0xFF
    0FB9: 80 0A    JMP   0x0FC4
    0FBB: 62 D0 00 MOV   REG[0xD0],0x0
    0FBE: 55 6F 00 MOV   [__r1],0x0
    0FC1: 55 70 00 MOV   [__r0],0x0
    0FC4: 62 D0 00 MOV   REG[0xD0],0x0
    0FC7: 51 70    MOV   A,[__r0]
    0FC9: 08       PUSH  A
    0FCA: 51 6F    MOV   A,[__r1]
    0FCC: 08       PUSH  A
    0FCD: 51 6E    MOV   A,[__r2]
    0FCF: 08       PUSH  A
    0FD0: 51 6D    MOV   A,[__r3]
    0FD2: 08       PUSH  A
    0FD3: 7C 17 56 LCALL 0x1756
    0FD6: 18       POP   A
    0FD7: 53 6D    MOV   [__r3],A
    0FD9: 18       POP   A
    0FDA: 53 6E    MOV   [__r2],A
    0FDC: 18       POP   A
    0FDD: 53 6F    MOV   [__r1],A
    0FDF: 18       POP   A
    0FE0: 08       PUSH  A
    0FE1: 51 6F    MOV   A,[__r1]
    0FE3: 08       PUSH  A
    0FE4: 51 6E    MOV   A,[__r2]
    0FE6: 08       PUSH  A
    0FE7: 51 6D    MOV   A,[__r3]
    0FE9: 08       PUSH  A
    0FEA: 62 D0 00 MOV   REG[0xD0],0x0
    0FED: 51 75    MOV   A,[fScaleFactor]
    0FEF: 08       PUSH  A
    0FF0: 51 76    MOV   A,[fScaleFactor+1]
    0FF2: 08       PUSH  A
    0FF3: 51 77    MOV   A,[fScaleFactor+2]
    0FF5: 08       PUSH  A
    0FF6: 51 78    MOV   A,[fScaleFactor+3]
    0FF8: 08       PUSH  A
    0FF9: 62 D0 00 MOV   REG[0xD0],0x0
    0FFC: 7C 15 B5 LCALL 0x15B5
    0FFF: 18       POP   A
    1000: 62 D0 00 MOV   REG[0xD0],0x0
    1003: 53 74    MOV   [fVolts+3],A
    1005: 18       POP   A
    1006: 53 73    MOV   [fVolts+2],A
    1008: 18       POP   A
    1009: 53 72    MOV   [fVolts+1],A
    100B: 18       POP   A
    100C: 53 71    MOV   [fVolts],A
    100E: 38 FC    ADD   SP,0xFC
(0171) 		//pResult = ftoa(fVolts,&iStatus );	// Convernt Float value of voltage into ASCII string
(0172) 		light_reading = (int)(fVolts * 800) / 3.7;
    1010: 51 71    MOV   A,[fVolts]
    1012: 08       PUSH  A
    1013: 51 72    MOV   A,[fVolts+1]
    1015: 08       PUSH  A
    1016: 51 73    MOV   A,[fVolts+2]
    1018: 08       PUSH  A
    1019: 51 74    MOV   A,[fVolts+3]
    101B: 08       PUSH  A
    101C: 50 44    MOV   A,0x44
    101E: 08       PUSH  A
    101F: 50 48    MOV   A,0x48
    1021: 08       PUSH  A
    1022: 50 00    MOV   A,0x0
    1024: 08       PUSH  A
    1025: 08       PUSH  A
    1026: 62 D0 00 MOV   REG[0xD0],0x0
    1029: 7C 15 B5 LCALL 0x15B5
    102C: 18       POP   A
    102D: 53 6D    MOV   [__r3],A
    102F: 18       POP   A
    1030: 53 6E    MOV   [__r2],A
    1032: 18       POP   A
    1033: 53 6F    MOV   [__r1],A
    1035: 18       POP   A
    1036: 38 FC    ADD   SP,0xFC
    1038: 08       PUSH  A
    1039: 51 6F    MOV   A,[__r1]
    103B: 08       PUSH  A
    103C: 51 6E    MOV   A,[__r2]
    103E: 08       PUSH  A
    103F: 51 6D    MOV   A,[__r3]
    1041: 08       PUSH  A
    1042: 7C 12 64 LCALL 0x1264
    1045: 18       POP   A
    1046: 53 6F    MOV   [__r1],A
    1048: 18       POP   A
    1049: 53 70    MOV   [__r0],A
    104B: 38 FE    ADD   SP,0xFE
    104D: 51 6F    MOV   A,[__r1]
    104F: 53 6D    MOV   [__r3],A
    1051: 51 70    MOV   A,[__r0]
    1053: 53 6E    MOV   [__r2],A
    1055: 47 6E 80 TST   [__r2],0x80
    1058: A0 09    JZ    0x1062
    105A: 55 6F FF MOV   [__r1],0xFF
    105D: 55 70 FF MOV   [__r0],0xFF
    1060: 80 0A    JMP   0x106B
    1062: 62 D0 00 MOV   REG[0xD0],0x0
    1065: 55 6F 00 MOV   [__r1],0x0
    1068: 55 70 00 MOV   [__r0],0x0
    106B: 62 D0 00 MOV   REG[0xD0],0x0
    106E: 51 70    MOV   A,[__r0]
    1070: 08       PUSH  A
    1071: 51 6F    MOV   A,[__r1]
    1073: 08       PUSH  A
    1074: 51 6E    MOV   A,[__r2]
    1076: 08       PUSH  A
    1077: 51 6D    MOV   A,[__r3]
    1079: 08       PUSH  A
    107A: 7C 17 56 LCALL 0x1756
    107D: 18       POP   A
    107E: 53 6D    MOV   [__r3],A
    1080: 18       POP   A
    1081: 53 6E    MOV   [__r2],A
    1083: 18       POP   A
    1084: 53 6F    MOV   [__r1],A
    1086: 18       POP   A
    1087: 53 70    MOV   [__r0],A
    1089: 50 40    MOV   A,0x40
    108B: 08       PUSH  A
    108C: 50 6C    MOV   A,0x6C
    108E: 08       PUSH  A
    108F: 50 CC    MOV   A,0xCC
    1091: 08       PUSH  A
    1092: 50 CD    MOV   A,0xCD
    1094: 08       PUSH  A
    1095: 51 70    MOV   A,[__r0]
    1097: 08       PUSH  A
    1098: 51 6F    MOV   A,[__r1]
    109A: 08       PUSH  A
    109B: 51 6E    MOV   A,[__r2]
    109D: 08       PUSH  A
    109E: 51 6D    MOV   A,[__r3]
    10A0: 08       PUSH  A
    10A1: 7C 14 D2 LCALL 0x14D2
    10A4: 18       POP   A
    10A5: 53 6D    MOV   [__r3],A
    10A7: 18       POP   A
    10A8: 53 6E    MOV   [__r2],A
    10AA: 18       POP   A
    10AB: 53 6F    MOV   [__r1],A
    10AD: 18       POP   A
    10AE: 38 FC    ADD   SP,0xFC
    10B0: 08       PUSH  A
    10B1: 51 6F    MOV   A,[__r1]
    10B3: 08       PUSH  A
    10B4: 51 6E    MOV   A,[__r2]
    10B6: 08       PUSH  A
    10B7: 51 6D    MOV   A,[__r3]
    10B9: 08       PUSH  A
    10BA: 7C 12 64 LCALL 0x1264
    10BD: 18       POP   A
    10BE: 62 D0 00 MOV   REG[0xD0],0x0
    10C1: 53 84    MOV   [light_reading+1],A
    10C3: 18       POP   A
    10C4: 53 83    MOV   [light_reading],A
    10C6: 38 FE    ADD   SP,0xFE
(0173) 		csprintf(buffer, "%d", light_reading);
    10C8: 51 83    MOV   A,[light_reading]
    10CA: 08       PUSH  A
    10CB: 51 84    MOV   A,[light_reading+1]
    10CD: 08       PUSH  A
    10CE: 50 01    MOV   A,0x1
    10D0: 08       PUSH  A
    10D1: 50 A0    MOV   A,0xA0
    10D3: 08       PUSH  A
    10D4: 50 00    MOV   A,0x0
    10D6: 08       PUSH  A
    10D7: 50 51    MOV   A,0x51
    10D9: 08       PUSH  A
    10DA: 7C 1D 1A LCALL _csprintf
    10DD: 38 FA    ADD   SP,0xFA
(0174) 		
(0175) 		LCD_Position(0,0);					// Set LCD position to row 1 column 0
    10DF: 10       PUSH  X
    10E0: 50 00    MOV   A,0x0
    10E2: 57 00    MOV   X,0x0
    10E4: 7C 08 35 LCALL _LCD_Position
(0176) 		//LCD_PrHexInt(light_reading);				// Print voltage value on LCD
(0177) 		LCD_PrString(buffer);
    10E7: 50 00    MOV   A,0x0
    10E9: 08       PUSH  A
    10EA: 50 51    MOV   A,0x51
    10EC: 5C       MOV   X,A
    10ED: 18       POP   A
    10EE: 7C 06 EC LCALL _LCD_PrString
    10F1: 20       POP   X
(0178) 		//LCD_PrCString(" Lux");				// Print string " V" on LCD after voltage value
(0179) 		
(0180) 		i = 0;
    10F2: 62 D0 00 MOV   REG[0xD0],0x0
    10F5: 55 8C 00 MOV   [i],0x0
(0181) 		//light_bin =  light_reading/100;
(0182) 		light_bin = get_light_bin(light_reading);
    10F8: 62 D0 00 MOV   REG[0xD0],0x0
    10FB: 51 83    MOV   A,[light_reading]
    10FD: 08       PUSH  A
    10FE: 51 84    MOV   A,[light_reading+1]
    1100: 08       PUSH  A
    1101: 99 0F    CALL  _get_light_bin
    1103: 38 FE    ADD   SP,0xFE
    1105: 62 D0 00 MOV   REG[0xD0],0x0
    1108: 54 01    MOV   [X+1],A
(0183)         word = get_word(light_bin, 1);
    110A: 50 01    MOV   A,0x1
    110C: 08       PUSH  A
    110D: 52 01    MOV   A,[X+1]
    110F: 08       PUSH  A
    1110: 9A 9B    CALL  _get_word
    1112: 62 D0 00 MOV   REG[0xD0],0x0
    1115: 54 00    MOV   [X+0],A
(0184)         insert_vocab(my_vocab, my_word_map, light_bin, 1, word);	// temp_bin hard coded to 1
    1117: 52 00    MOV   A,[X+0]
    1119: 08       PUSH  A
    111A: 50 01    MOV   A,0x1
    111C: 08       PUSH  A
    111D: 52 01    MOV   A,[X+1]
    111F: 08       PUSH  A
    1120: 5A 6F    MOV   [__r1],X
    1122: 06 6F 02 ADD   [__r1],0x2
    1125: 50 07    MOV   A,0x7
    1127: 08       PUSH  A
    1128: 51 6F    MOV   A,[__r1]
    112A: 08       PUSH  A
    112B: 50 00    MOV   A,0x0
    112D: 08       PUSH  A
    112E: 50 08    MOV   A,0x8
    1130: 08       PUSH  A
    1131: 9A 83    CALL  _insert_vocab
    1133: 38 F7    ADD   SP,0xF7
(0185) 		
(0186) 		LCD_Position(1,0);
    1135: 10       PUSH  X
    1136: 57 00    MOV   X,0x0
    1138: 50 01    MOV   A,0x1
    113A: 7C 08 35 LCALL _LCD_Position
    113D: 20       POP   X
(0187) 		LCD_PrHexInt(word);					// dispay light_bin number		
    113E: 62 D0 00 MOV   REG[0xD0],0x0
    1141: 52 00    MOV   A,[X+0]
    1143: 53 6F    MOV   [__r1],A
    1145: 10       PUSH  X
    1146: 50 00    MOV   A,0x0
    1148: 08       PUSH  A
    1149: 51 6F    MOV   A,[__r1]
    114B: 20       POP   X
    114C: 7C 06 E5 LCALL _LCD_PrHexInt
(0188) 		LCD_Position(1,5);
    114F: 57 05    MOV   X,0x5
    1151: 50 01    MOV   A,0x1
    1153: 7C 08 35 LCALL _LCD_Position
    1156: 20       POP   X
(0189) 		LCD_PrHexInt(my_vocab[my_word_map[word - 1]].freq);
    1157: 62 D0 00 MOV   REG[0xD0],0x0
    115A: 55 70 07 MOV   [__r0],0x7
    115D: 5A 6F    MOV   [__r1],X
    115F: 06 6F 01 ADD   [__r1],0x1
    1162: 52 00    MOV   A,[X+0]
    1164: 02 6F    ADD   A,[__r1]
    1166: 53 6F    MOV   [__r1],A
    1168: 50 00    MOV   A,0x0
    116A: 0A 70    ADC   A,[__r0]
    116C: 60 D4    MOV   REG[0xD4],A
    116E: 3E 6F    MVI   A,[__r1]
    1170: 53 6F    MOV   [__r1],A
    1172: 50 00    MOV   A,0x0
    1174: 08       PUSH  A
    1175: 51 6F    MOV   A,[__r1]
    1177: 08       PUSH  A
    1178: 50 00    MOV   A,0x0
    117A: 08       PUSH  A
    117B: 50 03    MOV   A,0x3
    117D: 08       PUSH  A
    117E: 7C 17 C1 LCALL 0x17C1
    1181: 38 FC    ADD   SP,0xFC
    1183: 51 64    MOV   A,[__rX]
    1185: 53 6F    MOV   [__r1],A
    1187: 51 63    MOV   A,[__rY]
    1189: 53 70    MOV   [__r0],A
    118B: 06 6F 0A ADD   [__r1],0xA
    118E: 0E 70 00 ADC   [__r0],0x0
    1191: 51 70    MOV   A,[__r0]
    1193: 60 D4    MOV   REG[0xD4],A
    1195: 3E 6F    MVI   A,[__r1]
    1197: 53 6F    MOV   [__r1],A
    1199: 10       PUSH  X
    119A: 50 00    MOV   A,0x0
    119C: 08       PUSH  A
    119D: 51 6F    MOV   A,[__r1]
    119F: 20       POP   X
    11A0: 7C 06 E5 LCALL _LCD_PrHexInt
    11A3: 20       POP   X
    11A4: 80 26    JMP   0x11CB
(0190) 		while (i < word)						// broadcast light_bin number 
(0191) 		{ 
(0192) 			PWM8_Speaker_Start();				// Loud bit
    11A6: 10       PUSH  X
    11A7: 7C 06 32 LCALL _PWM8_Speaker_Start
    11AA: 20       POP   X
(0193) 			WaitMs(z);
    11AB: 50 00    MOV   A,0x0
    11AD: 08       PUSH  A
    11AE: 50 96    MOV   A,0x96
    11B0: 08       PUSH  A
    11B1: 7C 09 A3 LCALL __UserModules_end|_WaitMs|__text_start|_WaitMs
    11B4: 38 FE    ADD   SP,0xFE
(0194) 			PWM8_Speaker_Stop();				// Silent bit (loud parser) 
    11B6: 10       PUSH  X
    11B7: 7C 06 36 LCALL _PWM8_Speaker_Stop
    11BA: 20       POP   X
(0195) 			WaitMs(y);
    11BB: 50 00    MOV   A,0x0
    11BD: 08       PUSH  A
    11BE: 50 96    MOV   A,0x96
    11C0: 08       PUSH  A
    11C1: 7C 09 A3 LCALL __UserModules_end|_WaitMs|__text_start|_WaitMs
    11C4: 38 FE    ADD   SP,0xFE
(0196) 			i++;
    11C6: 62 D0 00 MOV   REG[0xD0],0x0
    11C9: 76 8C    INC   [i]
(0197) 		}
    11CB: 62 D0 00 MOV   REG[0xD0],0x0
    11CE: 51 8C    MOV   A,[i]
    11D0: 3B 00    CMP   A,[X+0]
    11D2: CF D3    JC    0x11A6
(0198) 		i = 0;
    11D4: 62 D0 00 MOV   REG[0xD0],0x0
    11D7: 55 8C 00 MOV   [i],0x0
    11DA: 80 11    JMP   0x11EC
(0199) 		while (i < ( N_LIGHT_BINS - light_bin) )	// broadcast leftout light_bin Empty field silent bits
(0200) 		{
(0201) 			WaitMs(z+y);
    11DC: 50 01    MOV   A,0x1
    11DE: 08       PUSH  A
    11DF: 50 2C    MOV   A,0x2C
    11E1: 08       PUSH  A
    11E2: 7C 09 A3 LCALL __UserModules_end|_WaitMs|__text_start|_WaitMs
    11E5: 38 FE    ADD   SP,0xFE
(0202) 			i++;
    11E7: 62 D0 00 MOV   REG[0xD0],0x0
    11EA: 76 8C    INC   [i]
(0203) 		} 
    11EC: 62 D0 00 MOV   REG[0xD0],0x0
    11EF: 51 8B    MOV   A,[N_LIGHT_BINS]
    11F1: 13 01    SUB   A,[X+1]
    11F3: 62 D0 00 MOV   REG[0xD0],0x0
    11F6: 53 70    MOV   [__r0],A
    11F8: 62 D0 00 MOV   REG[0xD0],0x0
    11FB: 51 8C    MOV   A,[i]
    11FD: 62 D0 00 MOV   REG[0xD0],0x0
    1200: 3A 70    CMP   A,[__r0]
    1202: CF D9    JC    0x11DC
(0204) 		
(0205) 		
(0206) 		
(0207) 		/*if ( counter == LEN_L ){
(0208) 			LCD_PrCString(" Bye Bye");
(0209) 			break;
(0210) 		}*/
(0211) 		
(0212) 		
(0213) 		//counter+=1;
(0214) 		//WaitMs(2000);
(0215) 		
(0216) 	}
    1204: 8D 6F    JMP   0x0F74
(0217) }    1206: 38 ED    ADD   SP,0xED
    1208: 20       POP   X
    1209: 8F FF    JMP   0x1209
__plcall:
    17FF: 53 64    MOV   [__rX],A
    1801: 28       ROMX  
    1802: 08       PUSH  A
    1803: 51 64    MOV   A,[__rX]
    1805: 75       INC   X
    1806: 09 00    ADC   A,0x0
    1808: 28       ROMX  
    1809: 08       PUSH  A
    180A: 7F       RET   
_itoa:
    180B: 10       PUSH  X
    180C: 4F       MOV   X,SP
    180D: 38 09    ADD   SP,0x9
    180F: 52 FA    MOV   A,[X-6]
    1811: 54 03    MOV   [X+3],A
    1813: 52 F9    MOV   A,[X-7]
    1815: 54 02    MOV   [X+2],A
    1817: 3D F9 00 CMP   [X-7],0x0
    181A: B0 2F    JNZ   0x184A
    181C: 3D FA 00 CMP   [X-6],0x0
    181F: B0 2A    JNZ   0x184A
    1821: 62 D0 00 MOV   REG[0xD0],0x0
    1824: 52 FC    MOV   A,[X-4]
    1826: 53 6F    MOV   [__r1],A
    1828: 52 FB    MOV   A,[X-5]
    182A: 60 D5    MOV   REG[0xD5],A
    182C: 50 30    MOV   A,0x30
    182E: 3F 6F    MVI   [__r1],A
    1830: 52 FC    MOV   A,[X-4]
    1832: 01 01    ADD   A,0x1
    1834: 53 6F    MOV   [__r1],A
    1836: 52 FB    MOV   A,[X-5]
    1838: 09 00    ADC   A,0x0
    183A: 60 D5    MOV   REG[0xD5],A
    183C: 50 00    MOV   A,0x0
    183E: 3F 6F    MVI   [__r1],A
    1840: 52 FC    MOV   A,[X-4]
    1842: 53 6F    MOV   [__r1],A
    1844: 52 FB    MOV   A,[X-5]
    1846: 53 70    MOV   [__r0],A
    1848: 81 97    JMP   0x19E0
    184A: 52 FA    MOV   A,[X-6]
    184C: 11 00    SUB   A,0x0
    184E: 52 F9    MOV   A,[X-7]
    1850: 31 80    XOR   A,0x80
    1852: 19 80    SBB   A,0x80
    1854: D0 29    JNC   0x187E
    1856: 3D F7 00 CMP   [X-9],0x0
    1859: B0 24    JNZ   0x187E
    185B: 3D F8 0A CMP   [X-8],0xA
    185E: B0 1F    JNZ   0x187E
    1860: 56 06 01 MOV   [X+6],0x1
    1863: 62 D0 00 MOV   REG[0xD0],0x0
    1866: 52 03    MOV   A,[X+3]
    1868: 73       CPL   A
    1869: 53 6F    MOV   [__r1],A
    186B: 52 02    MOV   A,[X+2]
    186D: 73       CPL   A
    186E: 53 70    MOV   [__r0],A
    1870: 51 6F    MOV   A,[__r1]
    1872: 01 01    ADD   A,0x1
    1874: 54 03    MOV   [X+3],A
    1876: 51 70    MOV   A,[__r0]
    1878: 09 00    ADC   A,0x0
    187A: 54 02    MOV   [X+2],A
    187C: 80 04    JMP   0x1881
    187E: 56 06 00 MOV   [X+6],0x0
    1881: 52 FC    MOV   A,[X-4]
    1883: 54 01    MOV   [X+1],A
    1885: 52 FB    MOV   A,[X-5]
    1887: 54 00    MOV   [X+0],A
    1889: 62 D0 00 MOV   REG[0xD0],0x0
    188C: 52 F7    MOV   A,[X-9]
    188E: 08       PUSH  A
    188F: 52 F8    MOV   A,[X-8]
    1891: 08       PUSH  A
    1892: 52 02    MOV   A,[X+2]
    1894: 08       PUSH  A
    1895: 52 03    MOV   A,[X+3]
    1897: 08       PUSH  A
    1898: 7C 12 59 LCALL 0x1259
    189B: 38 FE    ADD   SP,0xFE
    189D: 18       POP   A
    189E: 53 6F    MOV   [__r1],A
    18A0: 18       POP   A
    18A1: 53 70    MOV   [__r0],A
    18A3: 51 6F    MOV   A,[__r1]
    18A5: 54 08    MOV   [X+8],A
    18A7: 51 70    MOV   A,[__r0]
    18A9: 54 07    MOV   [X+7],A
    18AB: 50 09    MOV   A,0x9
    18AD: 13 08    SUB   A,[X+8]
    18AF: 52 07    MOV   A,[X+7]
    18B1: 31 80    XOR   A,0x80
    18B3: 53 64    MOV   [__rX],A
    18B5: 50 80    MOV   A,0x80
    18B7: 1A 64    SBB   A,[__rX]
    18B9: C0 28    JC    0x18E2
    18BB: 62 D0 00 MOV   REG[0xD0],0x0
    18BE: 52 01    MOV   A,[X+1]
    18C0: 53 6F    MOV   [__r1],A
    18C2: 52 00    MOV   A,[X+0]
    18C4: 53 70    MOV   [__r0],A
    18C6: 51 6F    MOV   A,[__r1]
    18C8: 01 01    ADD   A,0x1
    18CA: 54 01    MOV   [X+1],A
    18CC: 51 70    MOV   A,[__r0]
    18CE: 09 00    ADC   A,0x0
    18D0: 54 00    MOV   [X+0],A
    18D2: 52 08    MOV   A,[X+8]
    18D4: 01 30    ADD   A,0x30
    18D6: 53 6E    MOV   [__r2],A
    18D8: 51 70    MOV   A,[__r0]
    18DA: 60 D5    MOV   REG[0xD5],A
    18DC: 51 6E    MOV   A,[__r2]
    18DE: 3F 6F    MVI   [__r1],A
    18E0: 80 26    JMP   0x1907
    18E2: 62 D0 00 MOV   REG[0xD0],0x0
    18E5: 52 01    MOV   A,[X+1]
    18E7: 53 6F    MOV   [__r1],A
    18E9: 52 00    MOV   A,[X+0]
    18EB: 53 70    MOV   [__r0],A
    18ED: 51 6F    MOV   A,[__r1]
    18EF: 01 01    ADD   A,0x1
    18F1: 54 01    MOV   [X+1],A
    18F3: 51 70    MOV   A,[__r0]
    18F5: 09 00    ADC   A,0x0
    18F7: 54 00    MOV   [X+0],A
    18F9: 52 08    MOV   A,[X+8]
    18FB: 01 57    ADD   A,0x57
    18FD: 53 6E    MOV   [__r2],A
    18FF: 51 70    MOV   A,[__r0]
    1901: 60 D5    MOV   REG[0xD5],A
    1903: 51 6E    MOV   A,[__r2]
    1905: 3F 6F    MVI   [__r1],A
    1907: 52 F7    MOV   A,[X-9]
    1909: 08       PUSH  A
    190A: 52 F8    MOV   A,[X-8]
    190C: 08       PUSH  A
    190D: 52 02    MOV   A,[X+2]
    190F: 08       PUSH  A
    1910: 52 03    MOV   A,[X+3]
    1912: 08       PUSH  A
    1913: 62 D0 00 MOV   REG[0xD0],0x0
    1916: 7C 12 59 LCALL 0x1259
    1919: 18       POP   A
    191A: 54 03    MOV   [X+3],A
    191C: 18       POP   A
    191D: 54 02    MOV   [X+2],A
    191F: 38 FE    ADD   SP,0xFE
    1921: 3D 02 00 CMP   [X+2],0x0
    1924: BF 64    JNZ   0x1889
    1926: 3D 03 00 CMP   [X+3],0x0
    1929: BF 5F    JNZ   0x1889
    192B: 3D 06 00 CMP   [X+6],0x0
    192E: A0 20    JZ    0x194F
    1930: 62 D0 00 MOV   REG[0xD0],0x0
    1933: 52 01    MOV   A,[X+1]
    1935: 53 6F    MOV   [__r1],A
    1937: 52 00    MOV   A,[X+0]
    1939: 53 70    MOV   [__r0],A
    193B: 51 6F    MOV   A,[__r1]
    193D: 01 01    ADD   A,0x1
    193F: 54 01    MOV   [X+1],A
    1941: 51 70    MOV   A,[__r0]
    1943: 09 00    ADC   A,0x0
    1945: 54 00    MOV   [X+0],A
    1947: 51 70    MOV   A,[__r0]
    1949: 60 D5    MOV   REG[0xD5],A
    194B: 50 2D    MOV   A,0x2D
    194D: 3F 6F    MVI   [__r1],A
    194F: 62 D0 00 MOV   REG[0xD0],0x0
    1952: 52 01    MOV   A,[X+1]
    1954: 53 6F    MOV   [__r1],A
    1956: 52 00    MOV   A,[X+0]
    1958: 53 70    MOV   [__r0],A
    195A: 51 6F    MOV   A,[__r1]
    195C: 01 FF    ADD   A,0xFF
    195E: 54 01    MOV   [X+1],A
    1960: 51 70    MOV   A,[__r0]
    1962: 09 FF    ADC   A,0xFF
    1964: 54 00    MOV   [X+0],A
    1966: 51 70    MOV   A,[__r0]
    1968: 60 D5    MOV   REG[0xD5],A
    196A: 50 00    MOV   A,0x0
    196C: 3F 6F    MVI   [__r1],A
    196E: 52 FC    MOV   A,[X-4]
    1970: 54 05    MOV   [X+5],A
    1972: 52 FB    MOV   A,[X-5]
    1974: 54 04    MOV   [X+4],A
    1976: 80 54    JMP   0x19CB
    1978: 62 D0 00 MOV   REG[0xD0],0x0
    197B: 52 05    MOV   A,[X+5]
    197D: 53 6F    MOV   [__r1],A
    197F: 52 04    MOV   A,[X+4]
    1981: 60 D4    MOV   REG[0xD4],A
    1983: 3E 6F    MVI   A,[__r1]
    1985: 54 06    MOV   [X+6],A
    1987: 52 05    MOV   A,[X+5]
    1989: 53 6F    MOV   [__r1],A
    198B: 52 04    MOV   A,[X+4]
    198D: 53 70    MOV   [__r0],A
    198F: 51 6F    MOV   A,[__r1]
    1991: 01 01    ADD   A,0x1
    1993: 54 05    MOV   [X+5],A
    1995: 51 70    MOV   A,[__r0]
    1997: 09 00    ADC   A,0x0
    1999: 54 04    MOV   [X+4],A
    199B: 52 01    MOV   A,[X+1]
    199D: 53 6D    MOV   [__r3],A
    199F: 52 00    MOV   A,[X+0]
    19A1: 60 D4    MOV   REG[0xD4],A
    19A3: 3E 6D    MVI   A,[__r3]
    19A5: 53 6E    MOV   [__r2],A
    19A7: 51 70    MOV   A,[__r0]
    19A9: 60 D5    MOV   REG[0xD5],A
    19AB: 51 6E    MOV   A,[__r2]
    19AD: 3F 6F    MVI   [__r1],A
    19AF: 52 01    MOV   A,[X+1]
    19B1: 53 6F    MOV   [__r1],A
    19B3: 52 00    MOV   A,[X+0]
    19B5: 53 70    MOV   [__r0],A
    19B7: 51 6F    MOV   A,[__r1]
    19B9: 01 FF    ADD   A,0xFF
    19BB: 54 01    MOV   [X+1],A
    19BD: 51 70    MOV   A,[__r0]
    19BF: 09 FF    ADC   A,0xFF
    19C1: 54 00    MOV   [X+0],A
    19C3: 51 70    MOV   A,[__r0]
    19C5: 60 D5    MOV   REG[0xD5],A
    19C7: 52 06    MOV   A,[X+6]
    19C9: 3F 6F    MVI   [__r1],A
    19CB: 52 05    MOV   A,[X+5]
    19CD: 13 01    SUB   A,[X+1]
    19CF: 52 04    MOV   A,[X+4]
    19D1: 1B 00    SBB   A,[X+0]
    19D3: CF A4    JC    0x1978
    19D5: 62 D0 00 MOV   REG[0xD0],0x0
    19D8: 52 FC    MOV   A,[X-4]
    19DA: 53 6F    MOV   [__r1],A
    19DC: 52 FB    MOV   A,[X-5]
    19DE: 53 70    MOV   [__r0],A
    19E0: 38 F7    ADD   SP,0xF7
    19E2: 20       POP   X
    19E3: 7F       RET   
_utoa:
    19E4: 10       PUSH  X
    19E5: 4F       MOV   X,SP
    19E6: 38 07    ADD   SP,0x7
    19E8: 52 FC    MOV   A,[X-4]
    19EA: 54 01    MOV   [X+1],A
    19EC: 52 FB    MOV   A,[X-5]
    19EE: 54 00    MOV   [X+0],A
    19F0: 62 D0 00 MOV   REG[0xD0],0x0
    19F3: 52 F7    MOV   A,[X-9]
    19F5: 08       PUSH  A
    19F6: 52 F8    MOV   A,[X-8]
    19F8: 08       PUSH  A
    19F9: 52 F9    MOV   A,[X-7]
    19FB: 08       PUSH  A
    19FC: 52 FA    MOV   A,[X-6]
    19FE: 08       PUSH  A
    19FF: 7C 12 59 LCALL 0x1259
    1A02: 38 FE    ADD   SP,0xFE
    1A04: 18       POP   A
    1A05: 53 6F    MOV   [__r1],A
    1A07: 18       POP   A
    1A08: 53 70    MOV   [__r0],A
    1A0A: 51 6F    MOV   A,[__r1]
    1A0C: 54 06    MOV   [X+6],A
    1A0E: 51 70    MOV   A,[__r0]
    1A10: 54 05    MOV   [X+5],A
    1A12: 50 09    MOV   A,0x9
    1A14: 13 06    SUB   A,[X+6]
    1A16: 52 05    MOV   A,[X+5]
    1A18: 31 80    XOR   A,0x80
    1A1A: 53 64    MOV   [__rX],A
    1A1C: 50 80    MOV   A,0x80
    1A1E: 1A 64    SBB   A,[__rX]
    1A20: C0 28    JC    0x1A49
    1A22: 62 D0 00 MOV   REG[0xD0],0x0
    1A25: 52 01    MOV   A,[X+1]
    1A27: 53 6F    MOV   [__r1],A
    1A29: 52 00    MOV   A,[X+0]
    1A2B: 53 70    MOV   [__r0],A
    1A2D: 51 6F    MOV   A,[__r1]
    1A2F: 01 01    ADD   A,0x1
    1A31: 54 01    MOV   [X+1],A
    1A33: 51 70    MOV   A,[__r0]
    1A35: 09 00    ADC   A,0x0
    1A37: 54 00    MOV   [X+0],A
    1A39: 52 06    MOV   A,[X+6]
    1A3B: 01 30    ADD   A,0x30
    1A3D: 53 6E    MOV   [__r2],A
    1A3F: 51 70    MOV   A,[__r0]
    1A41: 60 D5    MOV   REG[0xD5],A
    1A43: 51 6E    MOV   A,[__r2]
    1A45: 3F 6F    MVI   [__r1],A
    1A47: 80 26    JMP   0x1A6E
    1A49: 62 D0 00 MOV   REG[0xD0],0x0
    1A4C: 52 01    MOV   A,[X+1]
    1A4E: 53 6F    MOV   [__r1],A
    1A50: 52 00    MOV   A,[X+0]
    1A52: 53 70    MOV   [__r0],A
    1A54: 51 6F    MOV   A,[__r1]
    1A56: 01 01    ADD   A,0x1
    1A58: 54 01    MOV   [X+1],A
    1A5A: 51 70    MOV   A,[__r0]
    1A5C: 09 00    ADC   A,0x0
    1A5E: 54 00    MOV   [X+0],A
    1A60: 52 06    MOV   A,[X+6]
    1A62: 01 57    ADD   A,0x57
    1A64: 53 6E    MOV   [__r2],A
    1A66: 51 70    MOV   A,[__r0]
    1A68: 60 D5    MOV   REG[0xD5],A
    1A6A: 51 6E    MOV   A,[__r2]
    1A6C: 3F 6F    MVI   [__r1],A
    1A6E: 52 F7    MOV   A,[X-9]
    1A70: 08       PUSH  A
    1A71: 52 F8    MOV   A,[X-8]
    1A73: 08       PUSH  A
    1A74: 52 F9    MOV   A,[X-7]
    1A76: 08       PUSH  A
    1A77: 52 FA    MOV   A,[X-6]
    1A79: 08       PUSH  A
    1A7A: 62 D0 00 MOV   REG[0xD0],0x0
    1A7D: 7C 12 59 LCALL 0x1259
    1A80: 18       POP   A
    1A81: 54 FA    MOV   [X-6],A
    1A83: 18       POP   A
    1A84: 54 F9    MOV   [X-7],A
    1A86: 38 FE    ADD   SP,0xFE
    1A88: 3D F9 00 CMP   [X-7],0x0
    1A8B: BF 64    JNZ   0x19F0
    1A8D: 3D FA 00 CMP   [X-6],0x0
    1A90: BF 5F    JNZ   0x19F0
    1A92: 62 D0 00 MOV   REG[0xD0],0x0
    1A95: 52 01    MOV   A,[X+1]
    1A97: 53 6F    MOV   [__r1],A
    1A99: 52 00    MOV   A,[X+0]
    1A9B: 53 70    MOV   [__r0],A
    1A9D: 51 6F    MOV   A,[__r1]
    1A9F: 01 FF    ADD   A,0xFF
    1AA1: 54 01    MOV   [X+1],A
    1AA3: 51 70    MOV   A,[__r0]
    1AA5: 09 FF    ADC   A,0xFF
    1AA7: 54 00    MOV   [X+0],A
    1AA9: 51 70    MOV   A,[__r0]
    1AAB: 60 D5    MOV   REG[0xD5],A
    1AAD: 50 00    MOV   A,0x0
    1AAF: 3F 6F    MVI   [__r1],A
    1AB1: 52 FC    MOV   A,[X-4]
    1AB3: 54 03    MOV   [X+3],A
    1AB5: 52 FB    MOV   A,[X-5]
    1AB7: 54 02    MOV   [X+2],A
    1AB9: 80 54    JMP   0x1B0E
    1ABB: 62 D0 00 MOV   REG[0xD0],0x0
    1ABE: 52 03    MOV   A,[X+3]
    1AC0: 53 6F    MOV   [__r1],A
    1AC2: 52 02    MOV   A,[X+2]
    1AC4: 60 D4    MOV   REG[0xD4],A
    1AC6: 3E 6F    MVI   A,[__r1]
    1AC8: 54 04    MOV   [X+4],A
    1ACA: 52 03    MOV   A,[X+3]
    1ACC: 53 6F    MOV   [__r1],A
    1ACE: 52 02    MOV   A,[X+2]
    1AD0: 53 70    MOV   [__r0],A
    1AD2: 51 6F    MOV   A,[__r1]
    1AD4: 01 01    ADD   A,0x1
    1AD6: 54 03    MOV   [X+3],A
    1AD8: 51 70    MOV   A,[__r0]
    1ADA: 09 00    ADC   A,0x0
    1ADC: 54 02    MOV   [X+2],A
    1ADE: 52 01    MOV   A,[X+1]
    1AE0: 53 6D    MOV   [__r3],A
    1AE2: 52 00    MOV   A,[X+0]
    1AE4: 60 D4    MOV   REG[0xD4],A
    1AE6: 3E 6D    MVI   A,[__r3]
    1AE8: 53 6E    MOV   [__r2],A
    1AEA: 51 70    MOV   A,[__r0]
    1AEC: 60 D5    MOV   REG[0xD5],A
    1AEE: 51 6E    MOV   A,[__r2]
    1AF0: 3F 6F    MVI   [__r1],A
    1AF2: 52 01    MOV   A,[X+1]
    1AF4: 53 6F    MOV   [__r1],A
    1AF6: 52 00    MOV   A,[X+0]
    1AF8: 53 70    MOV   [__r0],A
    1AFA: 51 6F    MOV   A,[__r1]
    1AFC: 01 FF    ADD   A,0xFF
    1AFE: 54 01    MOV   [X+1],A
    1B00: 51 70    MOV   A,[__r0]
    1B02: 09 FF    ADC   A,0xFF
    1B04: 54 00    MOV   [X+0],A
    1B06: 51 70    MOV   A,[__r0]
    1B08: 60 D5    MOV   REG[0xD5],A
    1B0A: 52 04    MOV   A,[X+4]
    1B0C: 3F 6F    MVI   [__r1],A
    1B0E: 52 03    MOV   A,[X+3]
    1B10: 13 01    SUB   A,[X+1]
    1B12: 52 02    MOV   A,[X+2]
    1B14: 1B 00    SBB   A,[X+0]
    1B16: CF A4    JC    0x1ABB
    1B18: 62 D0 00 MOV   REG[0xD0],0x0
    1B1B: 52 FC    MOV   A,[X-4]
    1B1D: 53 6F    MOV   [__r1],A
    1B1F: 52 FB    MOV   A,[X-5]
    1B21: 53 70    MOV   [__r0],A
    1B23: 38 F9    ADD   SP,0xF9
    1B25: 20       POP   X
    1B26: 7F       RET   
_isdigit:
    1B27: 10       PUSH  X
    1B28: 4F       MOV   X,SP
    1B29: 62 D0 00 MOV   REG[0xD0],0x0
    1B2C: 52 FC    MOV   A,[X-4]
    1B2E: 01 88    ADD   A,0x88
    1B30: 53 6F    MOV   [__r1],A
    1B32: 52 FB    MOV   A,[X-5]
    1B34: 09 02    ADC   A,0x2
    1B36: 10       PUSH  X
    1B37: 58 6F    MOV   X,[__r1]
    1B39: 28       ROMX  
    1B3A: 20       POP   X
    1B3B: 53 6F    MOV   [__r1],A
    1B3D: 55 70 00 MOV   [__r0],0x0
    1B40: 26 6F 04 AND   [__r1],0x4
    1B43: 26 70 00 AND   [__r0],0x0
    1B46: 20       POP   X
    1B47: 7F       RET   
_islower:
    1B48: 10       PUSH  X
    1B49: 4F       MOV   X,SP
    1B4A: 62 D0 00 MOV   REG[0xD0],0x0
    1B4D: 52 FC    MOV   A,[X-4]
    1B4F: 01 88    ADD   A,0x88
    1B51: 53 6F    MOV   [__r1],A
    1B53: 52 FB    MOV   A,[X-5]
    1B55: 09 02    ADC   A,0x2
    1B57: 10       PUSH  X
    1B58: 58 6F    MOV   X,[__r1]
    1B5A: 28       ROMX  
    1B5B: 20       POP   X
    1B5C: 53 6F    MOV   [__r1],A
    1B5E: 55 70 00 MOV   [__r0],0x0
    1B61: 26 6F 02 AND   [__r1],0x2
    1B64: 26 70 00 AND   [__r0],0x0
    1B67: 20       POP   X
    1B68: 7F       RET   
_isspace:
    1B69: 10       PUSH  X
    1B6A: 4F       MOV   X,SP
    1B6B: 62 D0 00 MOV   REG[0xD0],0x0
    1B6E: 52 FC    MOV   A,[X-4]
    1B70: 01 88    ADD   A,0x88
    1B72: 53 6F    MOV   [__r1],A
    1B74: 52 FB    MOV   A,[X-5]
    1B76: 09 02    ADC   A,0x2
    1B78: 10       PUSH  X
    1B79: 58 6F    MOV   X,[__r1]
    1B7B: 28       ROMX  
    1B7C: 20       POP   X
    1B7D: 53 6F    MOV   [__r1],A
    1B7F: 55 70 00 MOV   [__r0],0x0
    1B82: 26 6F 10 AND   [__r1],0x10
    1B85: 26 70 00 AND   [__r0],0x0
    1B88: 20       POP   X
    1B89: 7F       RET   
_toupper:
    1B8A: 10       PUSH  X
    1B8B: 4F       MOV   X,SP
    1B8C: 52 FB    MOV   A,[X-5]
    1B8E: 08       PUSH  A
    1B8F: 52 FC    MOV   A,[X-4]
    1B91: 08       PUSH  A
    1B92: 7C 1B 48 LCALL _islower
    1B95: 38 FE    ADD   SP,0xFE
    1B97: 62 D0 00 MOV   REG[0xD0],0x0
    1B9A: 3C 70 00 CMP   [__r0],0x0
    1B9D: B0 06    JNZ   0x1BA4
    1B9F: 3C 6F 00 CMP   [__r1],0x0
    1BA2: A0 18    JZ    0x1BBB
    1BA4: 62 D0 00 MOV   REG[0xD0],0x0
    1BA7: 52 FC    MOV   A,[X-4]
    1BA9: 11 61    SUB   A,0x61
    1BAB: 53 6F    MOV   [__r1],A
    1BAD: 52 FB    MOV   A,[X-5]
    1BAF: 19 00    SBB   A,0x0
    1BB1: 53 70    MOV   [__r0],A
    1BB3: 06 6F 41 ADD   [__r1],0x41
    1BB6: 0E 70 00 ADC   [__r0],0x0
    1BB9: 80 0C    JMP   0x1BC6
    1BBB: 62 D0 00 MOV   REG[0xD0],0x0
    1BBE: 52 FC    MOV   A,[X-4]
    1BC0: 53 6F    MOV   [__r1],A
    1BC2: 52 FB    MOV   A,[X-5]
    1BC4: 53 70    MOV   [__r0],A
    1BC6: 20       POP   X
    1BC7: 7F       RET   
_ceilf:
    1BC8: 10       PUSH  X
    1BC9: 4F       MOV   X,SP
    1BCA: 38 08    ADD   SP,0x8
    1BCC: 52 F9    MOV   A,[X-7]
    1BCE: 54 04    MOV   [X+4],A
    1BD0: 52 FA    MOV   A,[X-6]
    1BD2: 54 05    MOV   [X+5],A
    1BD4: 52 FB    MOV   A,[X-5]
    1BD6: 54 06    MOV   [X+6],A
    1BD8: 52 FC    MOV   A,[X-4]
    1BDA: 54 07    MOV   [X+7],A
    1BDC: 52 F9    MOV   A,[X-7]
    1BDE: 08       PUSH  A
    1BDF: 52 FA    MOV   A,[X-6]
    1BE1: 08       PUSH  A
    1BE2: 52 FB    MOV   A,[X-5]
    1BE4: 08       PUSH  A
    1BE5: 52 FC    MOV   A,[X-4]
    1BE7: 08       PUSH  A
    1BE8: 62 D0 00 MOV   REG[0xD0],0x0
    1BEB: 7C 12 64 LCALL 0x1264
    1BEE: 18       POP   A
    1BEF: 54 03    MOV   [X+3],A
    1BF1: 18       POP   A
    1BF2: 54 02    MOV   [X+2],A
    1BF4: 18       POP   A
    1BF5: 54 01    MOV   [X+1],A
    1BF7: 18       POP   A
    1BF8: 54 00    MOV   [X+0],A
    1BFA: 52 00    MOV   A,[X+0]
    1BFC: 08       PUSH  A
    1BFD: 52 01    MOV   A,[X+1]
    1BFF: 08       PUSH  A
    1C00: 52 02    MOV   A,[X+2]
    1C02: 08       PUSH  A
    1C03: 52 03    MOV   A,[X+3]
    1C05: 08       PUSH  A
    1C06: 7C 17 56 LCALL 0x1756
    1C09: 18       POP   A
    1C0A: 53 6D    MOV   [__r3],A
    1C0C: 18       POP   A
    1C0D: 53 6E    MOV   [__r2],A
    1C0F: 18       POP   A
    1C10: 53 6F    MOV   [__r1],A
    1C12: 18       POP   A
    1C13: 53 70    MOV   [__r0],A
    1C15: 52 F9    MOV   A,[X-7]
    1C17: 08       PUSH  A
    1C18: 52 FA    MOV   A,[X-6]
    1C1A: 08       PUSH  A
    1C1B: 52 FB    MOV   A,[X-5]
    1C1D: 08       PUSH  A
    1C1E: 52 FC    MOV   A,[X-4]
    1C20: 08       PUSH  A
    1C21: 51 70    MOV   A,[__r0]
    1C23: 08       PUSH  A
    1C24: 51 6F    MOV   A,[__r1]
    1C26: 08       PUSH  A
    1C27: 51 6E    MOV   A,[__r2]
    1C29: 08       PUSH  A
    1C2A: 51 6D    MOV   A,[__r3]
    1C2C: 08       PUSH  A
    1C2D: 7C 14 75 LCALL 0x1475
    1C30: 38 F8    ADD   SP,0xF8
    1C32: 39 00    CMP   A,0x0
    1C34: A0 17    JZ    0x1C4C
    1C36: 52 05    MOV   A,[X+5]
    1C38: 21 80    AND   A,0x80
    1C3A: 53 6F    MOV   [__r1],A
    1C3C: 52 04    MOV   A,[X+4]
    1C3E: 21 7F    AND   A,0x7F
    1C40: 53 70    MOV   [__r0],A
    1C42: 51 6F    MOV   A,[__r1]
    1C44: 11 80    SUB   A,0x80
    1C46: 51 70    MOV   A,[__r0]
    1C48: 19 4B    SBB   A,0x4B
    1C4A: C0 16    JC    0x1C61
    1C4C: 62 D0 00 MOV   REG[0xD0],0x0
    1C4F: 52 F9    MOV   A,[X-7]
    1C51: 53 70    MOV   [__r0],A
    1C53: 52 FA    MOV   A,[X-6]
    1C55: 53 6F    MOV   [__r1],A
    1C57: 52 FB    MOV   A,[X-5]
    1C59: 53 6E    MOV   [__r2],A
    1C5B: 52 FC    MOV   A,[X-4]
    1C5D: 53 6D    MOV   [__r3],A
    1C5F: 80 84    JMP   0x1CE4
    1C61: 50 00    MOV   A,0x0
    1C63: 08       PUSH  A
    1C64: 08       PUSH  A
    1C65: 08       PUSH  A
    1C66: 08       PUSH  A
    1C67: 52 F9    MOV   A,[X-7]
    1C69: 08       PUSH  A
    1C6A: 52 FA    MOV   A,[X-6]
    1C6C: 08       PUSH  A
    1C6D: 52 FB    MOV   A,[X-5]
    1C6F: 08       PUSH  A
    1C70: 52 FC    MOV   A,[X-4]
    1C72: 08       PUSH  A
    1C73: 62 D0 00 MOV   REG[0xD0],0x0
    1C76: 7C 14 75 LCALL 0x1475
    1C79: 38 F8    ADD   SP,0xF8
    1C7B: 39 00    CMP   A,0x0
    1C7D: A0 48    JZ    0x1CC6
    1C7F: 39 01    CMP   A,0x1
    1C81: B0 44    JNZ   0x1CC6
    1C83: 52 03    MOV   A,[X+3]
    1C85: 01 01    ADD   A,0x1
    1C87: 53 6D    MOV   [__r3],A
    1C89: 52 02    MOV   A,[X+2]
    1C8B: 09 00    ADC   A,0x0
    1C8D: 53 6E    MOV   [__r2],A
    1C8F: 52 01    MOV   A,[X+1]
    1C91: 09 00    ADC   A,0x0
    1C93: 53 6F    MOV   [__r1],A
    1C95: 52 00    MOV   A,[X+0]
    1C97: 09 00    ADC   A,0x0
    1C99: 53 70    MOV   [__r0],A
    1C9B: 54 00    MOV   [X+0],A
    1C9D: 51 6F    MOV   A,[__r1]
    1C9F: 54 01    MOV   [X+1],A
    1CA1: 51 6E    MOV   A,[__r2]
    1CA3: 54 02    MOV   [X+2],A
    1CA5: 51 6D    MOV   A,[__r3]
    1CA7: 54 03    MOV   [X+3],A
    1CA9: 51 70    MOV   A,[__r0]
    1CAB: 08       PUSH  A
    1CAC: 51 6F    MOV   A,[__r1]
    1CAE: 08       PUSH  A
    1CAF: 51 6E    MOV   A,[__r2]
    1CB1: 08       PUSH  A
    1CB2: 51 6D    MOV   A,[__r3]
    1CB4: 08       PUSH  A
    1CB5: 7C 17 56 LCALL 0x1756
    1CB8: 18       POP   A
    1CB9: 53 6D    MOV   [__r3],A
    1CBB: 18       POP   A
    1CBC: 53 6E    MOV   [__r2],A
    1CBE: 18       POP   A
    1CBF: 53 6F    MOV   [__r1],A
    1CC1: 18       POP   A
    1CC2: 53 70    MOV   [__r0],A
    1CC4: 80 1F    JMP   0x1CE4
    1CC6: 62 D0 00 MOV   REG[0xD0],0x0
    1CC9: 52 00    MOV   A,[X+0]
    1CCB: 08       PUSH  A
    1CCC: 52 01    MOV   A,[X+1]
    1CCE: 08       PUSH  A
    1CCF: 52 02    MOV   A,[X+2]
    1CD1: 08       PUSH  A
    1CD2: 52 03    MOV   A,[X+3]
    1CD4: 08       PUSH  A
    1CD5: 7C 17 56 LCALL 0x1756
    1CD8: 18       POP   A
    1CD9: 53 6D    MOV   [__r3],A
    1CDB: 18       POP   A
    1CDC: 53 6E    MOV   [__r2],A
    1CDE: 18       POP   A
    1CDF: 53 6F    MOV   [__r1],A
    1CE1: 18       POP   A
    1CE2: 53 70    MOV   [__r0],A
    1CE4: 38 F8    ADD   SP,0xF8
    1CE6: 20       POP   X
    1CE7: 7F       RET   
__csdepi:
    1CE8: 10       PUSH  X
    1CE9: 4F       MOV   X,SP
    1CEA: 62 D0 00 MOV   REG[0xD0],0x0
    1CED: 51 7E    MOV   A,[x_isr+3]
    1CEF: 08       PUSH  A
    1CF0: 51 7D    MOV   A,[x_isr+2]
    1CF2: 62 D0 00 MOV   REG[0xD0],0x0
    1CF5: 53 70    MOV   [__r0],A
    1CF7: 18       POP   A
    1CF8: 53 6F    MOV   [__r1],A
    1CFA: 01 01    ADD   A,0x1
    1CFC: 62 D0 00 MOV   REG[0xD0],0x0
    1CFF: 53 7E    MOV   [x_isr+3],A
    1D01: 62 D0 00 MOV   REG[0xD0],0x0
    1D04: 51 70    MOV   A,[__r0]
    1D06: 09 00    ADC   A,0x0
    1D08: 62 D0 00 MOV   REG[0xD0],0x0
    1D0B: 53 7D    MOV   [x_isr+2],A
    1D0D: 62 D0 00 MOV   REG[0xD0],0x0
    1D10: 51 70    MOV   A,[__r0]
    1D12: 60 D5    MOV   REG[0xD5],A
    1D14: 52 FC    MOV   A,[X-4]
    1D16: 3F 6F    MVI   [__r1],A
    1D18: 20       POP   X
    1D19: 7F       RET   
_csprintf:
    1D1A: 10       PUSH  X
    1D1B: 4F       MOV   X,SP
    1D1C: 38 02    ADD   SP,0x2
    1D1E: 62 D0 00 MOV   REG[0xD0],0x0
    1D21: 52 FC    MOV   A,[X-4]
    1D23: 53 7E    MOV   [x_isr+3],A
    1D25: 52 FB    MOV   A,[X-5]
    1D27: 53 7D    MOV   [x_isr+2],A
    1D29: 62 D0 00 MOV   REG[0xD0],0x0
    1D2C: 5A 6F    MOV   [__r1],X
    1D2E: 16 6F 07 SUB   [__r1],0x7
    1D31: 51 6F    MOV   A,[__r1]
    1D33: 54 01    MOV   [X+1],A
    1D35: 56 00 07 MOV   [X+0],0x7
    1D38: 52 00    MOV   A,[X+0]
    1D3A: 08       PUSH  A
    1D3B: 52 01    MOV   A,[X+1]
    1D3D: 08       PUSH  A
    1D3E: 52 F9    MOV   A,[X-7]
    1D40: 08       PUSH  A
    1D41: 52 FA    MOV   A,[X-6]
    1D43: 08       PUSH  A
    1D44: 50 03    MOV   A,0x3
    1D46: 08       PUSH  A
    1D47: 50 FE    MOV   A,0xFE
    1D49: 08       PUSH  A
    1D4A: 7C 1D 83 LCALL __cprint
    1D4D: 38 FA    ADD   SP,0xFA
    1D4F: 62 D0 00 MOV   REG[0xD0],0x0
    1D52: 51 7E    MOV   A,[x_isr+3]
    1D54: 08       PUSH  A
    1D55: 51 7D    MOV   A,[x_isr+2]
    1D57: 62 D0 00 MOV   REG[0xD0],0x0
    1D5A: 53 70    MOV   [__r0],A
    1D5C: 18       POP   A
    1D5D: 53 6F    MOV   [__r1],A
    1D5F: 51 70    MOV   A,[__r0]
    1D61: 60 D5    MOV   REG[0xD5],A
    1D63: 50 00    MOV   A,0x0
    1D65: 3F 6F    MVI   [__r1],A
    1D67: 62 D0 00 MOV   REG[0xD0],0x0
    1D6A: 51 7E    MOV   A,[x_isr+3]
    1D6C: 13 FC    SUB   A,[X-4]
    1D6E: 62 D0 00 MOV   REG[0xD0],0x0
    1D71: 53 6F    MOV   [__r1],A
    1D73: 62 D0 00 MOV   REG[0xD0],0x0
    1D76: 51 7D    MOV   A,[x_isr+2]
    1D78: 1B FB    SBB   A,[X-5]
    1D7A: 62 D0 00 MOV   REG[0xD0],0x0
    1D7D: 53 70    MOV   [__r0],A
    1D7F: 38 FE    ADD   SP,0xFE
    1D81: 20       POP   X
    1D82: 7F       RET   
__cprint:
    1D83: 10       PUSH  X
    1D84: 4F       MOV   X,SP
    1D85: 38 11    ADD   SP,0x11
    1D87: 56 05 00 MOV   [X+5],0x0
    1D8A: 56 04 00 MOV   [X+4],0x0
    1D8D: 83 C7    JMP   0x2155
    1D8F: 62 D0 00 MOV   REG[0xD0],0x0
    1D92: 52 FA    MOV   A,[X-6]
    1D94: 53 6F    MOV   [__r1],A
    1D96: 52 F9    MOV   A,[X-7]
    1D98: 10       PUSH  X
    1D99: 58 6F    MOV   X,[__r1]
    1D9B: 28       ROMX  
    1D9C: 20       POP   X
    1D9D: 39 25    CMP   A,0x25
    1D9F: A0 23    JZ    0x1DC3
    1DA1: 52 FA    MOV   A,[X-6]
    1DA3: 53 6F    MOV   [__r1],A
    1DA5: 52 F9    MOV   A,[X-7]
    1DA7: 10       PUSH  X
    1DA8: 58 6F    MOV   X,[__r1]
    1DAA: 28       ROMX  
    1DAB: 20       POP   X
    1DAC: 10       PUSH  X
    1DAD: 08       PUSH  A
    1DAE: 52 FC    MOV   A,[X-4]
    1DB0: 53 6F    MOV   [__r1],A
    1DB2: 52 FB    MOV   A,[X-5]
    1DB4: 58 6F    MOV   X,[__r1]
    1DB6: 7C 17 FF LCALL __plcall
    1DB9: 38 FF    ADD   SP,0xFF
    1DBB: 20       POP   X
    1DBC: 77 05    INC   [X+5]
    1DBE: 0F 04 00 ADC   [X+4],0x0
    1DC1: 83 8E    JMP   0x2150
    1DC3: 56 0A 00 MOV   [X+10],0x0
    1DC6: 56 09 00 MOV   [X+9],0x0
    1DC9: 56 07 38 MOV   [X+7],0x38
    1DCC: 56 06 00 MOV   [X+6],0x0
    1DCF: 56 08 20 MOV   [X+8],0x20
    1DD2: 77 FA    INC   [X-6]
    1DD4: 0F F9 00 ADC   [X-7],0x0
    1DD7: 62 D0 00 MOV   REG[0xD0],0x0
    1DDA: 52 FA    MOV   A,[X-6]
    1DDC: 53 6F    MOV   [__r1],A
    1DDE: 52 F9    MOV   A,[X-7]
    1DE0: 10       PUSH  X
    1DE1: 58 6F    MOV   X,[__r1]
    1DE3: 28       ROMX  
    1DE4: 20       POP   X
    1DE5: 54 10    MOV   [X+16],A
    1DE7: 56 0F 00 MOV   [X+15],0x0
    1DEA: 52 10    MOV   A,[X+16]
    1DEC: 11 58    SUB   A,0x58
    1DEE: 53 63    MOV   [__rY],A
    1DF0: 52 0F    MOV   A,[X+15]
    1DF2: 31 80    XOR   A,0x80
    1DF4: 19 80    SBB   A,0x80
    1DF6: 2A 63    OR    A,[__rY]
    1DF8: A0 ED    JZ    0x1EE6
    1DFA: D0 22    JNC   0x1E1D
    1DFC: 52 10    MOV   A,[X+16]
    1DFE: 11 45    SUB   A,0x45
    1E00: 62 D0 00 MOV   REG[0xD0],0x0
    1E03: 53 63    MOV   [__rY],A
    1E05: 52 0F    MOV   A,[X+15]
    1E07: 31 80    XOR   A,0x80
    1E09: 19 80    SBB   A,0x80
    1E0B: C0 83    JC    0x1E8F
    1E0D: 2A 63    OR    A,[__rY]
    1E0F: A3 38    JZ    0x2148
    1E11: 3D 0F 00 CMP   [X+15],0x0
    1E14: B0 06    JNZ   0x1E1B
    1E16: 3D 10 53 CMP   [X+16],0x53
    1E19: A2 32    JZ    0x204C
    1E1B: 80 73    JMP   0x1E8F
    1E1D: 3D 0F 00 CMP   [X+15],0x0
    1E20: B0 06    JNZ   0x1E27
    1E22: 3D 10 63 CMP   [X+16],0x63
    1E25: A1 F6    JZ    0x201C
    1E27: 3D 0F 00 CMP   [X+15],0x0
    1E2A: B0 06    JNZ   0x1E31
    1E2C: 3D 10 64 CMP   [X+16],0x64
    1E2F: A0 84    JZ    0x1EB4
    1E31: 3D 0F 00 CMP   [X+15],0x0
    1E34: B0 06    JNZ   0x1E3B
    1E36: 3D 10 65 CMP   [X+16],0x65
    1E39: A3 0E    JZ    0x2148
    1E3B: 3D 0F 00 CMP   [X+15],0x0
    1E3E: B0 06    JNZ   0x1E45
    1E40: 3D 10 66 CMP   [X+16],0x66
    1E43: A3 04    JZ    0x2148
    1E45: 3D 0F 00 CMP   [X+15],0x0
    1E48: B0 06    JNZ   0x1E4F
    1E4A: 3D 10 69 CMP   [X+16],0x69
    1E4D: A0 66    JZ    0x1EB4
    1E4F: 3D 0F 00 CMP   [X+15],0x0
    1E52: B0 06    JNZ   0x1E59
    1E54: 3D 10 6F CMP   [X+16],0x6F
    1E57: A0 8E    JZ    0x1EE6
    1E59: 3D 0F 00 CMP   [X+15],0x0
    1E5C: B0 06    JNZ   0x1E63
    1E5E: 3D 10 70 CMP   [X+16],0x70
    1E61: A0 84    JZ    0x1EE6
    1E63: 52 10    MOV   A,[X+16]
    1E65: 11 63    SUB   A,0x63
    1E67: 52 0F    MOV   A,[X+15]
    1E69: 31 80    XOR   A,0x80
    1E6B: 19 80    SBB   A,0x80
    1E6D: C0 21    JC    0x1E8F
    1E6F: 3D 0F 00 CMP   [X+15],0x0
    1E72: B0 06    JNZ   0x1E79
    1E74: 3D 10 73 CMP   [X+16],0x73
    1E77: A2 4A    JZ    0x20C2
    1E79: 3D 0F 00 CMP   [X+15],0x0
    1E7C: B0 06    JNZ   0x1E83
    1E7E: 3D 10 75 CMP   [X+16],0x75
    1E81: A0 64    JZ    0x1EE6
    1E83: 3D 0F 00 CMP   [X+15],0x0
    1E86: B0 06    JNZ   0x1E8D
    1E88: 3D 10 78 CMP   [X+16],0x78
    1E8B: A0 5A    JZ    0x1EE6
    1E8D: 80 01    JMP   0x1E8F
    1E8F: 62 D0 00 MOV   REG[0xD0],0x0
    1E92: 52 FA    MOV   A,[X-6]
    1E94: 53 6F    MOV   [__r1],A
    1E96: 52 F9    MOV   A,[X-7]
    1E98: 10       PUSH  X
    1E99: 58 6F    MOV   X,[__r1]
    1E9B: 28       ROMX  
    1E9C: 20       POP   X
    1E9D: 10       PUSH  X
    1E9E: 08       PUSH  A
    1E9F: 52 FC    MOV   A,[X-4]
    1EA1: 53 6F    MOV   [__r1],A
    1EA3: 52 FB    MOV   A,[X-5]
    1EA5: 58 6F    MOV   X,[__r1]
    1EA7: 7C 17 FF LCALL __plcall
    1EAA: 38 FF    ADD   SP,0xFF
    1EAC: 20       POP   X
    1EAD: 77 05    INC   [X+5]
    1EAF: 0F 04 00 ADC   [X+4],0x0
    1EB2: 82 9D    JMP   0x2150
    1EB4: 07 F8 FE ADD   [X-8],0xFE
    1EB7: 0F F7 FF ADC   [X-9],0xFF
    1EBA: 62 D0 00 MOV   REG[0xD0],0x0
    1EBD: 52 F8    MOV   A,[X-8]
    1EBF: 53 6F    MOV   [__r1],A
    1EC1: 52 F7    MOV   A,[X-9]
    1EC3: 60 D4    MOV   REG[0xD4],A
    1EC5: 3E 6F    MVI   A,[__r1]
    1EC7: 54 0B    MOV   [X+11],A
    1EC9: 3E 6F    MVI   A,[__r1]
    1ECB: 54 0C    MOV   [X+12],A
    1ECD: 50 00    MOV   A,0x0
    1ECF: 08       PUSH  A
    1ED0: 50 0A    MOV   A,0xA
    1ED2: 08       PUSH  A
    1ED3: 52 0B    MOV   A,[X+11]
    1ED5: 08       PUSH  A
    1ED6: 52 0C    MOV   A,[X+12]
    1ED8: 08       PUSH  A
    1ED9: 52 06    MOV   A,[X+6]
    1EDB: 08       PUSH  A
    1EDC: 52 07    MOV   A,[X+7]
    1EDE: 08       PUSH  A
    1EDF: 7C 18 0B LCALL _itoa
    1EE2: 38 FA    ADD   SP,0xFA
    1EE4: 81 2F    JMP   0x2014
    1EE6: 07 F8 FE ADD   [X-8],0xFE
    1EE9: 0F F7 FF ADC   [X-9],0xFF
    1EEC: 62 D0 00 MOV   REG[0xD0],0x0
    1EEF: 52 F8    MOV   A,[X-8]
    1EF1: 53 6F    MOV   [__r1],A
    1EF3: 52 F7    MOV   A,[X-9]
    1EF5: 60 D4    MOV   REG[0xD4],A
    1EF7: 3E 6F    MVI   A,[__r1]
    1EF9: 53 70    MOV   [__r0],A
    1EFB: 3E 6F    MVI   A,[__r1]
    1EFD: 54 0C    MOV   [X+12],A
    1EFF: 51 70    MOV   A,[__r0]
    1F01: 54 0B    MOV   [X+11],A
    1F03: 52 FA    MOV   A,[X-6]
    1F05: 53 6F    MOV   [__r1],A
    1F07: 52 F9    MOV   A,[X-7]
    1F09: 10       PUSH  X
    1F0A: 58 6F    MOV   X,[__r1]
    1F0C: 28       ROMX  
    1F0D: 20       POP   X
    1F0E: 39 75    CMP   A,0x75
    1F10: B0 1A    JNZ   0x1F2B
    1F12: 50 00    MOV   A,0x0
    1F14: 08       PUSH  A
    1F15: 50 0A    MOV   A,0xA
    1F17: 08       PUSH  A
    1F18: 52 0B    MOV   A,[X+11]
    1F1A: 08       PUSH  A
    1F1B: 52 0C    MOV   A,[X+12]
    1F1D: 08       PUSH  A
    1F1E: 52 06    MOV   A,[X+6]
    1F20: 08       PUSH  A
    1F21: 52 07    MOV   A,[X+7]
    1F23: 08       PUSH  A
    1F24: 7C 19 E4 LCALL _utoa
    1F27: 38 FA    ADD   SP,0xFA
    1F29: 80 EA    JMP   0x2014
    1F2B: 62 D0 00 MOV   REG[0xD0],0x0
    1F2E: 52 FA    MOV   A,[X-6]
    1F30: 53 6F    MOV   [__r1],A
    1F32: 52 F9    MOV   A,[X-7]
    1F34: 10       PUSH  X
    1F35: 58 6F    MOV   X,[__r1]
    1F37: 28       ROMX  
    1F38: 20       POP   X
    1F39: 39 6F    CMP   A,0x6F
    1F3B: B0 1A    JNZ   0x1F56
    1F3D: 50 00    MOV   A,0x0
    1F3F: 08       PUSH  A
    1F40: 50 08    MOV   A,0x8
    1F42: 08       PUSH  A
    1F43: 52 0B    MOV   A,[X+11]
    1F45: 08       PUSH  A
    1F46: 52 0C    MOV   A,[X+12]
    1F48: 08       PUSH  A
    1F49: 52 06    MOV   A,[X+6]
    1F4B: 08       PUSH  A
    1F4C: 52 07    MOV   A,[X+7]
    1F4E: 08       PUSH  A
    1F4F: 7C 19 E4 LCALL _utoa
    1F52: 38 FA    ADD   SP,0xFA
    1F54: 80 BF    JMP   0x2014
    1F56: 62 D0 00 MOV   REG[0xD0],0x0
    1F59: 52 FA    MOV   A,[X-6]
    1F5B: 53 6F    MOV   [__r1],A
    1F5D: 52 F9    MOV   A,[X-7]
    1F5F: 10       PUSH  X
    1F60: 58 6F    MOV   X,[__r1]
    1F62: 28       ROMX  
    1F63: 20       POP   X
    1F64: 39 70    CMP   A,0x70
    1F66: B0 39    JNZ   0x1FA0
    1F68: 52 07    MOV   A,[X+7]
    1F6A: 53 6F    MOV   [__r1],A
    1F6C: 52 06    MOV   A,[X+6]
    1F6E: 53 70    MOV   [__r0],A
    1F70: 51 6F    MOV   A,[__r1]
    1F72: 01 01    ADD   A,0x1
    1F74: 54 07    MOV   [X+7],A
    1F76: 51 70    MOV   A,[__r0]
    1F78: 09 00    ADC   A,0x0
    1F7A: 54 06    MOV   [X+6],A
    1F7C: 51 70    MOV   A,[__r0]
    1F7E: 60 D5    MOV   REG[0xD5],A
    1F80: 50 30    MOV   A,0x30
    1F82: 3F 6F    MVI   [__r1],A
    1F84: 52 07    MOV   A,[X+7]
    1F86: 53 6F    MOV   [__r1],A
    1F88: 52 06    MOV   A,[X+6]
    1F8A: 53 70    MOV   [__r0],A
    1F8C: 51 6F    MOV   A,[__r1]
    1F8E: 01 01    ADD   A,0x1
    1F90: 54 07    MOV   [X+7],A
    1F92: 51 70    MOV   A,[__r0]
    1F94: 09 00    ADC   A,0x0
    1F96: 54 06    MOV   [X+6],A
    1F98: 51 70    MOV   A,[__r0]
    1F9A: 60 D5    MOV   REG[0xD5],A
    1F9C: 50 78    MOV   A,0x78
    1F9E: 3F 6F    MVI   [__r1],A
    1FA0: 50 00    MOV   A,0x0
    1FA2: 08       PUSH  A
    1FA3: 50 10    MOV   A,0x10
    1FA5: 08       PUSH  A
    1FA6: 52 0B    MOV   A,[X+11]
    1FA8: 08       PUSH  A
    1FA9: 52 0C    MOV   A,[X+12]
    1FAB: 08       PUSH  A
    1FAC: 52 06    MOV   A,[X+6]
    1FAE: 08       PUSH  A
    1FAF: 52 07    MOV   A,[X+7]
    1FB1: 08       PUSH  A
    1FB2: 7C 19 E4 LCALL _utoa
    1FB5: 38 FA    ADD   SP,0xFA
    1FB7: 62 D0 00 MOV   REG[0xD0],0x0
    1FBA: 52 FA    MOV   A,[X-6]
    1FBC: 53 6F    MOV   [__r1],A
    1FBE: 52 F9    MOV   A,[X-7]
    1FC0: 10       PUSH  X
    1FC1: 58 6F    MOV   X,[__r1]
    1FC3: 28       ROMX  
    1FC4: 20       POP   X
    1FC5: 39 58    CMP   A,0x58
    1FC7: B0 4C    JNZ   0x2014
    1FC9: 56 01 38 MOV   [X+1],0x38
    1FCC: 56 00 00 MOV   [X+0],0x0
    1FCF: 80 33    JMP   0x2003
    1FD1: 62 D0 00 MOV   REG[0xD0],0x0
    1FD4: 52 01    MOV   A,[X+1]
    1FD6: 53 6F    MOV   [__r1],A
    1FD8: 52 00    MOV   A,[X+0]
    1FDA: 60 D4    MOV   REG[0xD4],A
    1FDC: 3E 6F    MVI   A,[__r1]
    1FDE: 53 6F    MOV   [__r1],A
    1FE0: 50 00    MOV   A,0x0
    1FE2: 08       PUSH  A
    1FE3: 51 6F    MOV   A,[__r1]
    1FE5: 08       PUSH  A
    1FE6: 7C 1B 8A LCALL _toupper
    1FE9: 38 FE    ADD   SP,0xFE
    1FEB: 62 D0 00 MOV   REG[0xD0],0x0
    1FEE: 51 6F    MOV   A,[__r1]
    1FF0: 53 70    MOV   [__r0],A
    1FF2: 52 01    MOV   A,[X+1]
    1FF4: 53 6D    MOV   [__r3],A
    1FF6: 52 00    MOV   A,[X+0]
    1FF8: 60 D5    MOV   REG[0xD5],A
    1FFA: 51 70    MOV   A,[__r0]
    1FFC: 3F 6D    MVI   [__r3],A
    1FFE: 77 01    INC   [X+1]
    2000: 0F 00 00 ADC   [X+0],0x0
    2003: 62 D0 00 MOV   REG[0xD0],0x0
    2006: 52 01    MOV   A,[X+1]
    2008: 53 6F    MOV   [__r1],A
    200A: 52 00    MOV   A,[X+0]
    200C: 60 D4    MOV   REG[0xD4],A
    200E: 3E 6F    MVI   A,[__r1]
    2010: 39 00    CMP   A,0x0
    2012: BF BE    JNZ   0x1FD1
    2014: 56 01 38 MOV   [X+1],0x38
    2017: 56 00 00 MOV   [X+0],0x0
    201A: 80 D2    JMP   0x20ED
    201C: 07 F8 FE ADD   [X-8],0xFE
    201F: 0F F7 FF ADC   [X-9],0xFF
    2022: 62 D0 00 MOV   REG[0xD0],0x0
    2025: 52 F8    MOV   A,[X-8]
    2027: 53 6F    MOV   [__r1],A
    2029: 52 F7    MOV   A,[X-9]
    202B: 60 D4    MOV   REG[0xD4],A
    202D: 3E 6F    MVI   A,[__r1]
    202F: 3E 6F    MVI   A,[__r1]
    2031: 54 0D    MOV   [X+13],A
    2033: 10       PUSH  X
    2034: 52 0D    MOV   A,[X+13]
    2036: 08       PUSH  A
    2037: 52 FC    MOV   A,[X-4]
    2039: 53 6F    MOV   [__r1],A
    203B: 52 FB    MOV   A,[X-5]
    203D: 58 6F    MOV   X,[__r1]
    203F: 7C 17 FF LCALL __plcall
    2042: 38 FF    ADD   SP,0xFF
    2044: 20       POP   X
    2045: 77 05    INC   [X+5]
    2047: 0F 04 00 ADC   [X+4],0x0
    204A: 81 05    JMP   0x2150
    204C: 07 F8 FE ADD   [X-8],0xFE
    204F: 0F F7 FF ADC   [X-9],0xFF
    2052: 62 D0 00 MOV   REG[0xD0],0x0
    2055: 52 F8    MOV   A,[X-8]
    2057: 53 6F    MOV   [__r1],A
    2059: 52 F7    MOV   A,[X-9]
    205B: 60 D4    MOV   REG[0xD4],A
    205D: 3E 6F    MVI   A,[__r1]
    205F: 54 02    MOV   [X+2],A
    2061: 3E 6F    MVI   A,[__r1]
    2063: 54 03    MOV   [X+3],A
    2065: 3D 08 2D CMP   [X+8],0x2D
    2068: B0 45    JNZ   0x20AE
    206A: 10       PUSH  X
    206B: 50 2D    MOV   A,0x2D
    206D: 08       PUSH  A
    206E: 62 D0 00 MOV   REG[0xD0],0x0
    2071: 52 FC    MOV   A,[X-4]
    2073: 53 6F    MOV   [__r1],A
    2075: 52 FB    MOV   A,[X-5]
    2077: 58 6F    MOV   X,[__r1]
    2079: 7C 17 FF LCALL __plcall
    207C: 38 FF    ADD   SP,0xFF
    207E: 20       POP   X
    207F: 77 05    INC   [X+5]
    2081: 0F 04 00 ADC   [X+4],0x0
    2084: 80 29    JMP   0x20AE
    2086: 62 D0 00 MOV   REG[0xD0],0x0
    2089: 52 03    MOV   A,[X+3]
    208B: 53 6F    MOV   [__r1],A
    208D: 52 02    MOV   A,[X+2]
    208F: 10       PUSH  X
    2090: 58 6F    MOV   X,[__r1]
    2092: 28       ROMX  
    2093: 20       POP   X
    2094: 10       PUSH  X
    2095: 08       PUSH  A
    2096: 52 FC    MOV   A,[X-4]
    2098: 53 6F    MOV   [__r1],A
    209A: 52 FB    MOV   A,[X-5]
    209C: 58 6F    MOV   X,[__r1]
    209E: 7C 17 FF LCALL __plcall
    20A1: 38 FF    ADD   SP,0xFF
    20A3: 20       POP   X
    20A4: 77 05    INC   [X+5]
    20A6: 0F 04 00 ADC   [X+4],0x0
    20A9: 77 03    INC   [X+3]
    20AB: 0F 02 00 ADC   [X+2],0x0
    20AE: 62 D0 00 MOV   REG[0xD0],0x0
    20B1: 52 03    MOV   A,[X+3]
    20B3: 53 6F    MOV   [__r1],A
    20B5: 52 02    MOV   A,[X+2]
    20B7: 10       PUSH  X
    20B8: 58 6F    MOV   X,[__r1]
    20BA: 28       ROMX  
    20BB: 20       POP   X
    20BC: 39 00    CMP   A,0x0
    20BE: BF C7    JNZ   0x2086
    20C0: 80 8F    JMP   0x2150
    20C2: 07 F8 FE ADD   [X-8],0xFE
    20C5: 0F F7 FF ADC   [X-9],0xFF
    20C8: 62 D0 00 MOV   REG[0xD0],0x0
    20CB: 52 F8    MOV   A,[X-8]
    20CD: 53 6F    MOV   [__r1],A
    20CF: 52 F7    MOV   A,[X-9]
    20D1: 60 D4    MOV   REG[0xD4],A
    20D3: 3E 6F    MVI   A,[__r1]
    20D5: 54 00    MOV   [X+0],A
    20D7: 3E 6F    MVI   A,[__r1]
    20D9: 54 01    MOV   [X+1],A
    20DB: 3D 00 00 CMP   [X+0],0x0
    20DE: B0 0E    JNZ   0x20ED
    20E0: 3D 01 00 CMP   [X+1],0x0
    20E3: B0 09    JNZ   0x20ED
    20E5: 56 03 88 MOV   [X+3],0x88
    20E8: 56 02 03 MOV   [X+2],0x3
    20EB: 8F 79    JMP   0x2065
    20ED: 3D 08 2D CMP   [X+8],0x2D
    20F0: B0 44    JNZ   0x2135
    20F2: 10       PUSH  X
    20F3: 50 2D    MOV   A,0x2D
    20F5: 08       PUSH  A
    20F6: 62 D0 00 MOV   REG[0xD0],0x0
    20F9: 52 FC    MOV   A,[X-4]
    20FB: 53 6F    MOV   [__r1],A
    20FD: 52 FB    MOV   A,[X-5]
    20FF: 58 6F    MOV   X,[__r1]
    2101: 7C 17 FF LCALL __plcall
    2104: 38 FF    ADD   SP,0xFF
    2106: 20       POP   X
    2107: 77 05    INC   [X+5]
    2109: 0F 04 00 ADC   [X+4],0x0
    210C: 80 28    JMP   0x2135
    210E: 62 D0 00 MOV   REG[0xD0],0x0
    2111: 52 01    MOV   A,[X+1]
    2113: 53 6F    MOV   [__r1],A
    2115: 52 00    MOV   A,[X+0]
    2117: 60 D4    MOV   REG[0xD4],A
    2119: 3E 6F    MVI   A,[__r1]
    211B: 10       PUSH  X
    211C: 08       PUSH  A
    211D: 52 FC    MOV   A,[X-4]
    211F: 53 6F    MOV   [__r1],A
    2121: 52 FB    MOV   A,[X-5]
    2123: 58 6F    MOV   X,[__r1]
    2125: 7C 17 FF LCALL __plcall
    2128: 38 FF    ADD   SP,0xFF
    212A: 20       POP   X
    212B: 77 05    INC   [X+5]
    212D: 0F 04 00 ADC   [X+4],0x0
    2130: 77 01    INC   [X+1]
    2132: 0F 00 00 ADC   [X+0],0x0
    2135: 62 D0 00 MOV   REG[0xD0],0x0
    2138: 52 01    MOV   A,[X+1]
    213A: 53 6F    MOV   [__r1],A
    213C: 52 00    MOV   A,[X+0]
    213E: 60 D4    MOV   REG[0xD4],A
    2140: 3E 6F    MVI   A,[__r1]
    2142: 39 00    CMP   A,0x0
    2144: BF C9    JNZ   0x210E
    2146: 80 09    JMP   0x2150
    2148: 56 03 9A MOV   [X+3],0x9A
    214B: 56 02 03 MOV   [X+2],0x3
    214E: 8F 16    JMP   0x2065
    2150: 77 FA    INC   [X-6]
    2152: 0F F9 00 ADC   [X-7],0x0
    2155: 62 D0 00 MOV   REG[0xD0],0x0
    2158: 52 FA    MOV   A,[X-6]
    215A: 53 6F    MOV   [__r1],A
    215C: 52 F9    MOV   A,[X-7]
    215E: 10       PUSH  X
    215F: 58 6F    MOV   X,[__r1]
    2161: 28       ROMX  
    2162: 20       POP   X
    2163: 39 00    CMP   A,0x0
    2165: BC 29    JNZ   0x1D8F
    2167: 52 05    MOV   A,[X+5]
    2169: 53 6F    MOV   [__r1],A
    216B: 52 04    MOV   A,[X+4]
    216D: 53 70    MOV   [__r0],A
    216F: 38 EF    ADD   SP,0xEF
    2171: 20       POP   X
    2172: 7F       RET   
    2173: 10       PUSH  X
    2174: 4F       MOV   X,SP
    2175: 38 04    ADD   SP,0x4
    2177: 80 06    JMP   0x217E
    2179: 77 FC    INC   [X-4]
    217B: 0F FB 00 ADC   [X-5],0x0
    217E: 62 D0 00 MOV   REG[0xD0],0x0
    2181: 52 FC    MOV   A,[X-4]
    2183: 53 6F    MOV   [__r1],A
    2185: 52 FB    MOV   A,[X-5]
    2187: 10       PUSH  X
    2188: 58 6F    MOV   X,[__r1]
    218A: 28       ROMX  
    218B: 20       POP   X
    218C: 53 6F    MOV   [__r1],A
    218E: 50 00    MOV   A,0x0
    2190: 08       PUSH  A
    2191: 51 6F    MOV   A,[__r1]
    2193: 08       PUSH  A
    2194: 7C 1B 69 LCALL _isspace
    2197: 38 FE    ADD   SP,0xFE
    2199: 62 D0 00 MOV   REG[0xD0],0x0
    219C: 3C 70 00 CMP   [__r0],0x0
    219F: BF D9    JNZ   0x2179
    21A1: 3C 6F 00 CMP   [__r1],0x0
    21A4: BF D4    JNZ   0x2179
    21A6: 56 03 00 MOV   [X+3],0x0
    21A9: 56 02 00 MOV   [X+2],0x0
    21AC: 62 D0 00 MOV   REG[0xD0],0x0
    21AF: 52 FC    MOV   A,[X-4]
    21B1: 53 6F    MOV   [__r1],A
    21B3: 52 FB    MOV   A,[X-5]
    21B5: 10       PUSH  X
    21B6: 58 6F    MOV   X,[__r1]
    21B8: 28       ROMX  
    21B9: 20       POP   X
    21BA: 39 2D    CMP   A,0x2D
    21BC: B0 0E    JNZ   0x21CB
    21BE: 56 03 01 MOV   [X+3],0x1
    21C1: 56 02 00 MOV   [X+2],0x0
    21C4: 77 FC    INC   [X-4]
    21C6: 0F FB 00 ADC   [X-5],0x0
    21C9: 80 18    JMP   0x21E2
    21CB: 62 D0 00 MOV   REG[0xD0],0x0
    21CE: 52 FC    MOV   A,[X-4]
    21D0: 53 6F    MOV   [__r1],A
    21D2: 52 FB    MOV   A,[X-5]
    21D4: 10       PUSH  X
    21D5: 58 6F    MOV   X,[__r1]
    21D7: 28       ROMX  
    21D8: 20       POP   X
    21D9: 39 2B    CMP   A,0x2B
    21DB: B0 06    JNZ   0x21E2
    21DD: 77 FC    INC   [X-4]
    21DF: 0F FB 00 ADC   [X-5],0x0
    21E2: 56 01 00 MOV   [X+1],0x0
    21E5: 56 00 00 MOV   [X+0],0x0
    21E8: 80 7C    JMP   0x2265
    21EA: 62 D0 00 MOV   REG[0xD0],0x0
    21ED: 52 FC    MOV   A,[X-4]
    21EF: 53 6F    MOV   [__r1],A
    21F1: 52 FB    MOV   A,[X-5]
    21F3: 53 70    MOV   [__r0],A
    21F5: 51 6F    MOV   A,[__r1]
    21F7: 01 01    ADD   A,0x1
    21F9: 54 FC    MOV   [X-4],A
    21FB: 51 70    MOV   A,[__r0]
    21FD: 09 00    ADC   A,0x0
    21FF: 54 FB    MOV   [X-5],A
    2201: 52 01    MOV   A,[X+1]
    2203: 53 6D    MOV   [__r3],A
    2205: 52 00    MOV   A,[X+0]
    2207: 53 6E    MOV   [__r2],A
    2209: 55 6B 0A MOV   [__r5],0xA
    220C: 55 6C 00 MOV   [__r4],0x0
    220F: 55 64 00 MOV   [__rX],0x0
    2212: 55 63 00 MOV   [__rY],0x0
    2215: 3C 6C 00 CMP   [__r4],0x0
    2218: B0 06    JNZ   0x221F
    221A: 3C 6B 00 CMP   [__r5],0x0
    221D: A0 1A    JZ    0x2238
    221F: 70 FB    AND   F,0xFB
    2221: 6E 6C    RRC   [__r4]
    2223: 6E 6B    RRC   [__r5]
    2225: D0 0C    JNC   0x2232
    2227: 62 D0 00 MOV   REG[0xD0],0x0
    222A: 51 6D    MOV   A,[__r3]
    222C: 04 64    ADD   [__rX],A
    222E: 51 6E    MOV   A,[__r2]
    2230: 0C 63    ADC   [__rY],A
    2232: 65 6D    ASL   [__r3]
    2234: 6B 6E    RLC   [__r2]
    2236: 8F DE    JMP   0x2215
    2238: 5F 6D 64 MOV   [__r3],[__rX]
    223B: 5F 6E 63 MOV   [__r2],[__rY]
    223E: 62 D0 00 MOV   REG[0xD0],0x0
    2241: 51 70    MOV   A,[__r0]
    2243: 10       PUSH  X
    2244: 58 6F    MOV   X,[__r1]
    2246: 28       ROMX  
    2247: 20       POP   X
    2248: 53 6F    MOV   [__r1],A
    224A: 55 70 00 MOV   [__r0],0x0
    224D: 51 6D    MOV   A,[__r3]
    224F: 02 6F    ADD   A,[__r1]
    2251: 53 6F    MOV   [__r1],A
    2253: 51 6E    MOV   A,[__r2]
    2255: 0A 70    ADC   A,[__r0]
    2257: 53 70    MOV   [__r0],A
    2259: 51 6F    MOV   A,[__r1]
    225B: 11 30    SUB   A,0x30
    225D: 54 01    MOV   [X+1],A
    225F: 51 70    MOV   A,[__r0]
    2261: 19 00    SBB   A,0x0
    2263: 54 00    MOV   [X+0],A
    2265: 62 D0 00 MOV   REG[0xD0],0x0
    2268: 52 FC    MOV   A,[X-4]
    226A: 53 6F    MOV   [__r1],A
    226C: 52 FB    MOV   A,[X-5]
    226E: 10       PUSH  X
    226F: 58 6F    MOV   X,[__r1]
    2271: 28       ROMX  
    2272: 20       POP   X
    2273: 53 6F    MOV   [__r1],A
    2275: 50 00    MOV   A,0x0
    2277: 08       PUSH  A
    2278: 51 6F    MOV   A,[__r1]
    227A: 08       PUSH  A
    227B: 7C 1B 27 LCALL _isdigit
    227E: 38 FE    ADD   SP,0xFE
    2280: 62 D0 00 MOV   REG[0xD0],0x0
    2283: 3C 70 00 CMP   [__r0],0x0
    2286: BF 63    JNZ   0x21EA
    2288: 3C 6F 00 CMP   [__r1],0x0
    228B: BF 5E    JNZ   0x21EA
    228D: 3D 02 00 CMP   [X+2],0x0
    2290: B0 06    JNZ   0x2297
    2292: 3D 03 00 CMP   [X+3],0x0
    2295: A0 14    JZ    0x22AA
    2297: 62 D0 00 MOV   REG[0xD0],0x0
    229A: 52 01    MOV   A,[X+1]
    229C: 73       CPL   A
    229D: 11 FF    SUB   A,0xFF
    229F: 53 6F    MOV   [__r1],A
    22A1: 52 00    MOV   A,[X+0]
    22A3: 73       CPL   A
    22A4: 19 FF    SBB   A,0xFF
    22A6: 53 70    MOV   [__r0],A
    22A8: 80 0C    JMP   0x22B5
    22AA: 62 D0 00 MOV   REG[0xD0],0x0
    22AD: 52 01    MOV   A,[X+1]
    22AF: 53 6F    MOV   [__r1],A
    22B1: 52 00    MOV   A,[X+0]
    22B3: 53 70    MOV   [__r0],A
    22B5: 38 FC    ADD   SP,0xFC
    22B7: 20       POP   X
    22B8: 7F       RET   
